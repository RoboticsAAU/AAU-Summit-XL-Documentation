// Generated by gencpp from file robotnik_leds_msgs/LedEffectsRequest.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_LEDS_MSGS_MESSAGE_LEDEFFECTSREQUEST_H
#define ROBOTNIK_LEDS_MSGS_MESSAGE_LEDEFFECTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_leds_msgs
{
template <class ContainerAllocator>
struct LedEffectsRequest_
{
  typedef LedEffectsRequest_<ContainerAllocator> Type;

  LedEffectsRequest_()
    : id()
    , mode()
    , channel(0)
    , type()
    , color_R(0)
    , color_G(0)
    , color_B(0)
    , color_W(0)
    , start_led(0)
    , end_led(0)
    , ms_on(0)
    , ms_off(0)
    , fade_in(0)
    , fade_out(0)
    , background_R(0)
    , background_G(0)
    , background_B(0)
    , background_W(0)
    , direction()
    , speed(0)
    , sleep(0)
    , led_increment(0)
    , layer(0)
    , enabled(false)  {
    }
  LedEffectsRequest_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , mode(_alloc)
    , channel(0)
    , type(_alloc)
    , color_R(0)
    , color_G(0)
    , color_B(0)
    , color_W(0)
    , start_led(0)
    , end_led(0)
    , ms_on(0)
    , ms_off(0)
    , fade_in(0)
    , fade_out(0)
    , background_R(0)
    , background_G(0)
    , background_B(0)
    , background_W(0)
    , direction(_alloc)
    , speed(0)
    , sleep(0)
    , led_increment(0)
    , layer(0)
    , enabled(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef uint8_t _channel_type;
  _channel_type channel;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef uint8_t _color_R_type;
  _color_R_type color_R;

   typedef uint8_t _color_G_type;
  _color_G_type color_G;

   typedef uint8_t _color_B_type;
  _color_B_type color_B;

   typedef uint8_t _color_W_type;
  _color_W_type color_W;

   typedef uint16_t _start_led_type;
  _start_led_type start_led;

   typedef uint16_t _end_led_type;
  _end_led_type end_led;

   typedef uint16_t _ms_on_type;
  _ms_on_type ms_on;

   typedef uint16_t _ms_off_type;
  _ms_off_type ms_off;

   typedef uint16_t _fade_in_type;
  _fade_in_type fade_in;

   typedef uint16_t _fade_out_type;
  _fade_out_type fade_out;

   typedef uint8_t _background_R_type;
  _background_R_type background_R;

   typedef uint8_t _background_G_type;
  _background_G_type background_G;

   typedef uint8_t _background_B_type;
  _background_B_type background_B;

   typedef uint8_t _background_W_type;
  _background_W_type background_W;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _direction_type;
  _direction_type direction;

   typedef uint16_t _speed_type;
  _speed_type speed;

   typedef uint16_t _sleep_type;
  _sleep_type sleep;

   typedef uint16_t _led_increment_type;
  _led_increment_type led_increment;

   typedef uint8_t _layer_type;
  _layer_type layer;

   typedef uint8_t _enabled_type;
  _enabled_type enabled;





  typedef boost::shared_ptr< ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LedEffectsRequest_

typedef ::robotnik_leds_msgs::LedEffectsRequest_<std::allocator<void> > LedEffectsRequest;

typedef boost::shared_ptr< ::robotnik_leds_msgs::LedEffectsRequest > LedEffectsRequestPtr;
typedef boost::shared_ptr< ::robotnik_leds_msgs::LedEffectsRequest const> LedEffectsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator1> & lhs, const ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.mode == rhs.mode &&
    lhs.channel == rhs.channel &&
    lhs.type == rhs.type &&
    lhs.color_R == rhs.color_R &&
    lhs.color_G == rhs.color_G &&
    lhs.color_B == rhs.color_B &&
    lhs.color_W == rhs.color_W &&
    lhs.start_led == rhs.start_led &&
    lhs.end_led == rhs.end_led &&
    lhs.ms_on == rhs.ms_on &&
    lhs.ms_off == rhs.ms_off &&
    lhs.fade_in == rhs.fade_in &&
    lhs.fade_out == rhs.fade_out &&
    lhs.background_R == rhs.background_R &&
    lhs.background_G == rhs.background_G &&
    lhs.background_B == rhs.background_B &&
    lhs.background_W == rhs.background_W &&
    lhs.direction == rhs.direction &&
    lhs.speed == rhs.speed &&
    lhs.sleep == rhs.sleep &&
    lhs.led_increment == rhs.led_increment &&
    lhs.layer == rhs.layer &&
    lhs.enabled == rhs.enabled;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator1> & lhs, const ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_leds_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4971f1ee1e211ef4482773fdcd58d02";
  }

  static const char* value(const ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4971f1ee1e211efULL;
  static const uint64_t static_value2 = 0x4482773fdcd58d02ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_leds_msgs/LedEffectsRequest";
  }

  static const char* value(const ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string  id\n"
"string  mode\n"
"uint8   channel\n"
"string  type\n"
"uint8   color_R\n"
"uint8   color_G\n"
"uint8   color_B\n"
"uint8   color_W \n"
"uint16  start_led\n"
"uint16  end_led\n"
"uint16  ms_on\n"
"uint16  ms_off\n"
"uint16  fade_in\n"
"uint16  fade_out\n"
"uint8   background_R\n"
"uint8   background_G\n"
"uint8   background_B\n"
"uint8   background_W\n"
"string  direction\n"
"uint16  speed\n"
"uint16  sleep\n"
"uint16  led_increment\n"
"uint8   layer\n"
"bool    enabled\n"
;
  }

  static const char* value(const ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.mode);
      stream.next(m.channel);
      stream.next(m.type);
      stream.next(m.color_R);
      stream.next(m.color_G);
      stream.next(m.color_B);
      stream.next(m.color_W);
      stream.next(m.start_led);
      stream.next(m.end_led);
      stream.next(m.ms_on);
      stream.next(m.ms_off);
      stream.next(m.fade_in);
      stream.next(m.fade_out);
      stream.next(m.background_R);
      stream.next(m.background_G);
      stream.next(m.background_B);
      stream.next(m.background_W);
      stream.next(m.direction);
      stream.next(m.speed);
      stream.next(m.sleep);
      stream.next(m.led_increment);
      stream.next(m.layer);
      stream.next(m.enabled);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LedEffectsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_leds_msgs::LedEffectsRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "channel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.channel);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "color_R: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color_R);
    s << indent << "color_G: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color_G);
    s << indent << "color_B: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color_B);
    s << indent << "color_W: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color_W);
    s << indent << "start_led: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.start_led);
    s << indent << "end_led: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.end_led);
    s << indent << "ms_on: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ms_on);
    s << indent << "ms_off: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ms_off);
    s << indent << "fade_in: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.fade_in);
    s << indent << "fade_out: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.fade_out);
    s << indent << "background_R: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.background_R);
    s << indent << "background_G: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.background_G);
    s << indent << "background_B: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.background_B);
    s << indent << "background_W: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.background_W);
    s << indent << "direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.direction);
    s << indent << "speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speed);
    s << indent << "sleep: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.sleep);
    s << indent << "led_increment: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.led_increment);
    s << indent << "layer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.layer);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_LEDS_MSGS_MESSAGE_LEDEFFECTSREQUEST_H
