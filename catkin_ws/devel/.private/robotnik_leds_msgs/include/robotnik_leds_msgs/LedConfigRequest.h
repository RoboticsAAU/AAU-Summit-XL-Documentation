// Generated by gencpp from file robotnik_leds_msgs/LedConfigRequest.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_LEDS_MSGS_MESSAGE_LEDCONFIGREQUEST_H
#define ROBOTNIK_LEDS_MSGS_MESSAGE_LEDCONFIGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_leds_msgs
{
template <class ContainerAllocator>
struct LedConfigRequest_
{
  typedef LedConfigRequest_<ContainerAllocator> Type;

  LedConfigRequest_()
    : password()
    , state()
    , mode()
    , color_R(0)
    , color_G(0)
    , color_B(0)
    , color_W(0)
    , start_led(0)
    , end_led(0)
    , ms_on(0)
    , ms_off(0)
    , direction()
    , speed(0)  {
    }
  LedConfigRequest_(const ContainerAllocator& _alloc)
    : password(_alloc)
    , state(_alloc)
    , mode(_alloc)
    , color_R(0)
    , color_G(0)
    , color_B(0)
    , color_W(0)
    , start_led(0)
    , end_led(0)
    , ms_on(0)
    , ms_off(0)
    , direction(_alloc)
    , speed(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _password_type;
  _password_type password;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef uint8_t _color_R_type;
  _color_R_type color_R;

   typedef uint8_t _color_G_type;
  _color_G_type color_G;

   typedef uint8_t _color_B_type;
  _color_B_type color_B;

   typedef uint8_t _color_W_type;
  _color_W_type color_W;

   typedef uint16_t _start_led_type;
  _start_led_type start_led;

   typedef uint16_t _end_led_type;
  _end_led_type end_led;

   typedef uint16_t _ms_on_type;
  _ms_on_type ms_on;

   typedef uint16_t _ms_off_type;
  _ms_off_type ms_off;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _direction_type;
  _direction_type direction;

   typedef uint16_t _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LedConfigRequest_

typedef ::robotnik_leds_msgs::LedConfigRequest_<std::allocator<void> > LedConfigRequest;

typedef boost::shared_ptr< ::robotnik_leds_msgs::LedConfigRequest > LedConfigRequestPtr;
typedef boost::shared_ptr< ::robotnik_leds_msgs::LedConfigRequest const> LedConfigRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator1> & lhs, const ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator2> & rhs)
{
  return lhs.password == rhs.password &&
    lhs.state == rhs.state &&
    lhs.mode == rhs.mode &&
    lhs.color_R == rhs.color_R &&
    lhs.color_G == rhs.color_G &&
    lhs.color_B == rhs.color_B &&
    lhs.color_W == rhs.color_W &&
    lhs.start_led == rhs.start_led &&
    lhs.end_led == rhs.end_led &&
    lhs.ms_on == rhs.ms_on &&
    lhs.ms_off == rhs.ms_off &&
    lhs.direction == rhs.direction &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator1> & lhs, const ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_leds_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ab3f7f591b547b85c672944179b13ea";
  }

  static const char* value(const ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ab3f7f591b547b8ULL;
  static const uint64_t static_value2 = 0x5c672944179b13eaULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_leds_msgs/LedConfigRequest";
  }

  static const char* value(const ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string password  # Same password used on robotnik robots\n"
"string state     # BOOTING, READY, EXIT\n"
"string mode	 # Properties to configure effects\n"
"uint8  color_R   \n"
"uint8  color_G\n"
"uint8  color_B\n"
"uint8  color_W \n"
"uint16 start_led\n"
"uint16 end_led\n"
"uint16 ms_on\n"
"uint16 ms_off\n"
"string direction\n"
"uint16 speed\n"
;
  }

  static const char* value(const ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.password);
      stream.next(m.state);
      stream.next(m.mode);
      stream.next(m.color_R);
      stream.next(m.color_G);
      stream.next(m.color_B);
      stream.next(m.color_W);
      stream.next(m.start_led);
      stream.next(m.end_led);
      stream.next(m.ms_on);
      stream.next(m.ms_off);
      stream.next(m.direction);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LedConfigRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_leds_msgs::LedConfigRequest_<ContainerAllocator>& v)
  {
    s << indent << "password: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.password);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "color_R: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color_R);
    s << indent << "color_G: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color_G);
    s << indent << "color_B: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color_B);
    s << indent << "color_W: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color_W);
    s << indent << "start_led: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.start_led);
    s << indent << "end_led: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.end_led);
    s << indent << "ms_on: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ms_on);
    s << indent << "ms_off: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ms_off);
    s << indent << "direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.direction);
    s << indent << "speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_LEDS_MSGS_MESSAGE_LEDCONFIGREQUEST_H
