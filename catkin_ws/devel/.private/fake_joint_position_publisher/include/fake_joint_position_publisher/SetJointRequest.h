// Generated by gencpp from file fake_joint_position_publisher/SetJointRequest.msg
// DO NOT EDIT!


#ifndef FAKE_JOINT_POSITION_PUBLISHER_MESSAGE_SETJOINTREQUEST_H
#define FAKE_JOINT_POSITION_PUBLISHER_MESSAGE_SETJOINTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fake_joint_position_publisher
{
template <class ContainerAllocator>
struct SetJointRequest_
{
  typedef SetJointRequest_<ContainerAllocator> Type;

  SetJointRequest_()
    : joint_name()
    , position(0.0)  {
    }
  SetJointRequest_(const ContainerAllocator& _alloc)
    : joint_name(_alloc)
    , position(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_name_type;
  _joint_name_type joint_name;

   typedef float _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetJointRequest_

typedef ::fake_joint_position_publisher::SetJointRequest_<std::allocator<void> > SetJointRequest;

typedef boost::shared_ptr< ::fake_joint_position_publisher::SetJointRequest > SetJointRequestPtr;
typedef boost::shared_ptr< ::fake_joint_position_publisher::SetJointRequest const> SetJointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator1> & lhs, const ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_name == rhs.joint_name &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator1> & lhs, const ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fake_joint_position_publisher

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6facef4290e75bdc65be59043e176ad";
  }

  static const char* value(const ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6facef4290e75bdULL;
  static const uint64_t static_value2 = 0xc65be59043e176adULL;
};

template<class ContainerAllocator>
struct DataType< ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fake_joint_position_publisher/SetJointRequest";
  }

  static const char* value(const ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string joint_name\n"
"float32 position\n"
;
  }

  static const char* value(const ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_name);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetJointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fake_joint_position_publisher::SetJointRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_name);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FAKE_JOINT_POSITION_PUBLISHER_MESSAGE_SETJOINTREQUEST_H
