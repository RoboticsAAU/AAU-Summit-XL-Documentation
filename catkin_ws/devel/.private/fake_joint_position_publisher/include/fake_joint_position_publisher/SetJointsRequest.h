// Generated by gencpp from file fake_joint_position_publisher/SetJointsRequest.msg
// DO NOT EDIT!


#ifndef FAKE_JOINT_POSITION_PUBLISHER_MESSAGE_SETJOINTSREQUEST_H
#define FAKE_JOINT_POSITION_PUBLISHER_MESSAGE_SETJOINTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fake_joint_position_publisher
{
template <class ContainerAllocator>
struct SetJointsRequest_
{
  typedef SetJointsRequest_<ContainerAllocator> Type;

  SetJointsRequest_()
    : joints_names()
    , positions()  {
    }
  SetJointsRequest_(const ContainerAllocator& _alloc)
    : joints_names(_alloc)
    , positions(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joints_names_type;
  _joints_names_type joints_names;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _positions_type;
  _positions_type positions;





  typedef boost::shared_ptr< ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetJointsRequest_

typedef ::fake_joint_position_publisher::SetJointsRequest_<std::allocator<void> > SetJointsRequest;

typedef boost::shared_ptr< ::fake_joint_position_publisher::SetJointsRequest > SetJointsRequestPtr;
typedef boost::shared_ptr< ::fake_joint_position_publisher::SetJointsRequest const> SetJointsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator1> & lhs, const ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joints_names == rhs.joints_names &&
    lhs.positions == rhs.positions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator1> & lhs, const ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fake_joint_position_publisher

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d308deefb95efe1ad2f704392a4b85f3";
  }

  static const char* value(const ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd308deefb95efe1aULL;
  static const uint64_t static_value2 = 0xd2f704392a4b85f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fake_joint_position_publisher/SetJointsRequest";
  }

  static const char* value(const ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] joints_names\n"
"float32[] positions\n"
;
  }

  static const char* value(const ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joints_names);
      stream.next(m.positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetJointsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fake_joint_position_publisher::SetJointsRequest_<ContainerAllocator>& v)
  {
    s << indent << "joints_names[]" << std::endl;
    for (size_t i = 0; i < v.joints_names.size(); ++i)
    {
      s << indent << "  joints_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joints_names[i]);
    }
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.positions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FAKE_JOINT_POSITION_PUBLISHER_MESSAGE_SETJOINTSREQUEST_H
