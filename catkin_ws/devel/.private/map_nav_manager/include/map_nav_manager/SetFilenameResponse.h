// Generated by gencpp from file map_nav_manager/SetFilenameResponse.msg
// DO NOT EDIT!


#ifndef MAP_NAV_MANAGER_MESSAGE_SETFILENAMERESPONSE_H
#define MAP_NAV_MANAGER_MESSAGE_SETFILENAMERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace map_nav_manager
{
template <class ContainerAllocator>
struct SetFilenameResponse_
{
  typedef SetFilenameResponse_<ContainerAllocator> Type;

  SetFilenameResponse_()
    : ret(false)
    , msg()  {
    }
  SetFilenameResponse_(const ContainerAllocator& _alloc)
    : ret(false)
    , msg(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _ret_type;
  _ret_type ret;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  _msg_type msg;





  typedef boost::shared_ptr< ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SetFilenameResponse_

typedef ::map_nav_manager::SetFilenameResponse_<std::allocator<void> > SetFilenameResponse;

typedef boost::shared_ptr< ::map_nav_manager::SetFilenameResponse > SetFilenameResponsePtr;
typedef boost::shared_ptr< ::map_nav_manager::SetFilenameResponse const> SetFilenameResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::map_nav_manager::SetFilenameResponse_<ContainerAllocator1> & lhs, const ::map_nav_manager::SetFilenameResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ret == rhs.ret &&
    lhs.msg == rhs.msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::map_nav_manager::SetFilenameResponse_<ContainerAllocator1> & lhs, const ::map_nav_manager::SetFilenameResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace map_nav_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65c6e116a9cb9637c42bc276afbf8ed8";
  }

  static const char* value(const ::map_nav_manager::SetFilenameResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65c6e116a9cb9637ULL;
  static const uint64_t static_value2 = 0xc42bc276afbf8ed8ULL;
};

template<class ContainerAllocator>
struct DataType< ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "map_nav_manager/SetFilenameResponse";
  }

  static const char* value(const ::map_nav_manager::SetFilenameResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ret\n"
"string msg\n"
"\n"
;
  }

  static const char* value(const ::map_nav_manager::SetFilenameResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ret);
      stream.next(m.msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetFilenameResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::map_nav_manager::SetFilenameResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_nav_manager::SetFilenameResponse_<ContainerAllocator>& v)
  {
    s << indent << "ret: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ret);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAP_NAV_MANAGER_MESSAGE_SETFILENAMERESPONSE_H
