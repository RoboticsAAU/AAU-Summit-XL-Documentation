// Generated by gencpp from file map_nav_manager/State.msg
// DO NOT EDIT!


#ifndef MAP_NAV_MANAGER_MESSAGE_STATE_H
#define MAP_NAV_MANAGER_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_msgs/State.h>

namespace map_nav_manager
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : state()
    , substate()
    , mapping(false)
    , navigation(false)
    , localization(false)
    , map_server(false)  {
    }
  State_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , substate(_alloc)
    , mapping(false)
    , navigation(false)
    , localization(false)
    , map_server(false)  {
  (void)_alloc;
    }



   typedef  ::robotnik_msgs::State_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _substate_type;
  _substate_type substate;

   typedef uint8_t _mapping_type;
  _mapping_type mapping;

   typedef uint8_t _navigation_type;
  _navigation_type navigation;

   typedef uint8_t _localization_type;
  _localization_type localization;

   typedef uint8_t _map_server_type;
  _map_server_type map_server;





  typedef boost::shared_ptr< ::map_nav_manager::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::map_nav_manager::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::map_nav_manager::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::map_nav_manager::State > StatePtr;
typedef boost::shared_ptr< ::map_nav_manager::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::map_nav_manager::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::map_nav_manager::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::map_nav_manager::State_<ContainerAllocator1> & lhs, const ::map_nav_manager::State_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.substate == rhs.substate &&
    lhs.mapping == rhs.mapping &&
    lhs.navigation == rhs.navigation &&
    lhs.localization == rhs.localization &&
    lhs.map_server == rhs.map_server;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::map_nav_manager::State_<ContainerAllocator1> & lhs, const ::map_nav_manager::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace map_nav_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::map_nav_manager::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::map_nav_manager::State_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::map_nav_manager::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::map_nav_manager::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_nav_manager::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_nav_manager::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::map_nav_manager::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb3247a8a50c3079508d6ddd0c93c134";
  }

  static const char* value(const ::map_nav_manager::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb3247a8a50c3079ULL;
  static const uint64_t static_value2 = 0x508d6ddd0c93c134ULL;
};

template<class ContainerAllocator>
struct DataType< ::map_nav_manager::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "map_nav_manager/State";
  }

  static const char* value(const ::map_nav_manager::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::map_nav_manager::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/State state\n"
"string substate\n"
"bool mapping\n"
"bool navigation\n"
"bool localization\n"
"bool map_server\n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/State\n"
"# constants\n"
"int32 INIT_STATE = 100\n"
"int32 STANDBY_STATE = 200\n"
"int32 READY_STATE = 300\n"
"int32 EMERGENCY_STATE = 400\n"
"int32 FAILURE_STATE = 500\n"
"int32 SHUTDOWN_STATE = 600\n"
"int32 UNKOWN_STATE = 700\n"
"\n"
"# state of the component\n"
"int32 state\n"
"# desired control loop frecuency\n"
"float32 desired_freq\n"
"# real frecuency \n"
"float32 real_freq\n"
"# Description of the state\n"
"string state_description\n"
;
  }

  static const char* value(const ::map_nav_manager::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::map_nav_manager::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.substate);
      stream.next(m.mapping);
      stream.next(m.navigation);
      stream.next(m.localization);
      stream.next(m.map_server);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::map_nav_manager::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_nav_manager::State_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    s << std::endl;
    Printer< ::robotnik_msgs::State_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "substate: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.substate);
    s << indent << "mapping: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mapping);
    s << indent << "navigation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.navigation);
    s << indent << "localization: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.localization);
    s << indent << "map_server: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.map_server);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAP_NAV_MANAGER_MESSAGE_STATE_H
