// Generated by gencpp from file ping_time_monitor/PingStatus.msg
// DO NOT EDIT!


#ifndef PING_TIME_MONITOR_MESSAGE_PINGSTATUS_H
#define PING_TIME_MONITOR_MESSAGE_PINGSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ping_time_monitor
{
template <class ContainerAllocator>
struct PingStatus_
{
  typedef PingStatus_<ContainerAllocator> Type;

  PingStatus_()
    : header()
    , time(0.0)
    , host()
    , count(0)
    , timeout(0.0)
    , packet_loss(0.0)
    , t_min(0.0)
    , t_avg(0.0)
    , t_max(0.0)
    , t_mdev(0.0)  {
    }
  PingStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time(0.0)
    , host(_alloc)
    , count(0)
    , timeout(0.0)
    , packet_loss(0.0)
    , t_min(0.0)
    , t_avg(0.0)
    , t_max(0.0)
    , t_mdev(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _time_type;
  _time_type time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _host_type;
  _host_type host;

   typedef int32_t _count_type;
  _count_type count;

   typedef float _timeout_type;
  _timeout_type timeout;

   typedef float _packet_loss_type;
  _packet_loss_type packet_loss;

   typedef float _t_min_type;
  _t_min_type t_min;

   typedef float _t_avg_type;
  _t_avg_type t_avg;

   typedef float _t_max_type;
  _t_max_type t_max;

   typedef float _t_mdev_type;
  _t_mdev_type t_mdev;





  typedef boost::shared_ptr< ::ping_time_monitor::PingStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ping_time_monitor::PingStatus_<ContainerAllocator> const> ConstPtr;

}; // struct PingStatus_

typedef ::ping_time_monitor::PingStatus_<std::allocator<void> > PingStatus;

typedef boost::shared_ptr< ::ping_time_monitor::PingStatus > PingStatusPtr;
typedef boost::shared_ptr< ::ping_time_monitor::PingStatus const> PingStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ping_time_monitor::PingStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ping_time_monitor::PingStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ping_time_monitor::PingStatus_<ContainerAllocator1> & lhs, const ::ping_time_monitor::PingStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.time == rhs.time &&
    lhs.host == rhs.host &&
    lhs.count == rhs.count &&
    lhs.timeout == rhs.timeout &&
    lhs.packet_loss == rhs.packet_loss &&
    lhs.t_min == rhs.t_min &&
    lhs.t_avg == rhs.t_avg &&
    lhs.t_max == rhs.t_max &&
    lhs.t_mdev == rhs.t_mdev;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ping_time_monitor::PingStatus_<ContainerAllocator1> & lhs, const ::ping_time_monitor::PingStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ping_time_monitor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ping_time_monitor::PingStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ping_time_monitor::PingStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ping_time_monitor::PingStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ping_time_monitor::PingStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ping_time_monitor::PingStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ping_time_monitor::PingStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ping_time_monitor::PingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95d991aad8be91a150ff80392e4e042c";
  }

  static const char* value(const ::ping_time_monitor::PingStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95d991aad8be91a1ULL;
  static const uint64_t static_value2 = 0x50ff80392e4e042cULL;
};

template<class ContainerAllocator>
struct DataType< ::ping_time_monitor::PingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ping_time_monitor/PingStatus";
  }

  static const char* value(const ::ping_time_monitor::PingStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ping_time_monitor::PingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float32 time\n"
"string host\n"
"int32 count\n"
"float32 timeout\n"
"# % of packets loss\n"
"float32 packet_loss\n"
"# min transmission time\n"
"float32 t_min\n"
"# average transmission time\n"
"float32 t_avg\n"
"# max transmission time\n"
"float32 t_max\n"
"float32 t_mdev\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ping_time_monitor::PingStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ping_time_monitor::PingStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.host);
      stream.next(m.count);
      stream.next(m.timeout);
      stream.next(m.packet_loss);
      stream.next(m.t_min);
      stream.next(m.t_avg);
      stream.next(m.t_max);
      stream.next(m.t_mdev);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PingStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ping_time_monitor::PingStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ping_time_monitor::PingStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "host: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.host);
    s << indent << "count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count);
    s << indent << "timeout: ";
    Printer<float>::stream(s, indent + "  ", v.timeout);
    s << indent << "packet_loss: ";
    Printer<float>::stream(s, indent + "  ", v.packet_loss);
    s << indent << "t_min: ";
    Printer<float>::stream(s, indent + "  ", v.t_min);
    s << indent << "t_avg: ";
    Printer<float>::stream(s, indent + "  ", v.t_avg);
    s << indent << "t_max: ";
    Printer<float>::stream(s, indent + "  ", v.t_max);
    s << indent << "t_mdev: ";
    Printer<float>::stream(s, indent + "  ", v.t_mdev);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PING_TIME_MONITOR_MESSAGE_PINGSTATUS_H
