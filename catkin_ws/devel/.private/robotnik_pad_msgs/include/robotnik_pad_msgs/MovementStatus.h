// Generated by gencpp from file robotnik_pad_msgs/MovementStatus.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_PAD_MSGS_MESSAGE_MOVEMENTSTATUS_H
#define ROBOTNIK_PAD_MSGS_MESSAGE_MOVEMENTSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_pad_msgs
{
template <class ContainerAllocator>
struct MovementStatus_
{
  typedef MovementStatus_<ContainerAllocator> Type;

  MovementStatus_()
    : velocity_level(0.0)
    , kinematic_mode()  {
    }
  MovementStatus_(const ContainerAllocator& _alloc)
    : velocity_level(0.0)
    , kinematic_mode(_alloc)  {
  (void)_alloc;
    }



   typedef float _velocity_level_type;
  _velocity_level_type velocity_level;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _kinematic_mode_type;
  _kinematic_mode_type kinematic_mode;





  typedef boost::shared_ptr< ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> const> ConstPtr;

}; // struct MovementStatus_

typedef ::robotnik_pad_msgs::MovementStatus_<std::allocator<void> > MovementStatus;

typedef boost::shared_ptr< ::robotnik_pad_msgs::MovementStatus > MovementStatusPtr;
typedef boost::shared_ptr< ::robotnik_pad_msgs::MovementStatus const> MovementStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator1> & lhs, const ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator2> & rhs)
{
  return lhs.velocity_level == rhs.velocity_level &&
    lhs.kinematic_mode == rhs.kinematic_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator1> & lhs, const ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_pad_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8160ce2c4f4adfe5c5d11e61af5bad5";
  }

  static const char* value(const ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8160ce2c4f4adfeULL;
  static const uint64_t static_value2 = 0x5c5d11e61af5bad5ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_pad_msgs/MovementStatus";
  }

  static const char* value(const ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 velocity_level\n"
"string kinematic_mode\n"
;
  }

  static const char* value(const ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity_level);
      stream.next(m.kinematic_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MovementStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_pad_msgs::MovementStatus_<ContainerAllocator>& v)
  {
    s << indent << "velocity_level: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_level);
    s << indent << "kinematic_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.kinematic_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_PAD_MSGS_MESSAGE_MOVEMENTSTATUS_H
