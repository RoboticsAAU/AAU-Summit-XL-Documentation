// Generated by gencpp from file imu_manager/ImuManagerStatus.msg
// DO NOT EDIT!


#ifndef IMU_MANAGER_MESSAGE_IMUMANAGERSTATUS_H
#define IMU_MANAGER_MESSAGE_IMUMANAGERSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace imu_manager
{
template <class ContainerAllocator>
struct ImuManagerStatus_
{
  typedef ImuManagerStatus_<ContainerAllocator> Type;

  ImuManagerStatus_()
    : header()
    , calibration_status()
    , next_check_countdown(0)
    , calibration_duration(0)
    , imu_temperature(0.0)
    , calibrated_imu_temperature(0.0)
    , robot_moving(false)  {
    }
  ImuManagerStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , calibration_status(_alloc)
    , next_check_countdown(0)
    , calibration_duration(0)
    , imu_temperature(0.0)
    , calibrated_imu_temperature(0.0)
    , robot_moving(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _calibration_status_type;
  _calibration_status_type calibration_status;

   typedef int32_t _next_check_countdown_type;
  _next_check_countdown_type next_check_countdown;

   typedef int32_t _calibration_duration_type;
  _calibration_duration_type calibration_duration;

   typedef float _imu_temperature_type;
  _imu_temperature_type imu_temperature;

   typedef float _calibrated_imu_temperature_type;
  _calibrated_imu_temperature_type calibrated_imu_temperature;

   typedef uint8_t _robot_moving_type;
  _robot_moving_type robot_moving;





  typedef boost::shared_ptr< ::imu_manager::ImuManagerStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imu_manager::ImuManagerStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ImuManagerStatus_

typedef ::imu_manager::ImuManagerStatus_<std::allocator<void> > ImuManagerStatus;

typedef boost::shared_ptr< ::imu_manager::ImuManagerStatus > ImuManagerStatusPtr;
typedef boost::shared_ptr< ::imu_manager::ImuManagerStatus const> ImuManagerStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imu_manager::ImuManagerStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imu_manager::ImuManagerStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::imu_manager::ImuManagerStatus_<ContainerAllocator1> & lhs, const ::imu_manager::ImuManagerStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.calibration_status == rhs.calibration_status &&
    lhs.next_check_countdown == rhs.next_check_countdown &&
    lhs.calibration_duration == rhs.calibration_duration &&
    lhs.imu_temperature == rhs.imu_temperature &&
    lhs.calibrated_imu_temperature == rhs.calibrated_imu_temperature &&
    lhs.robot_moving == rhs.robot_moving;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::imu_manager::ImuManagerStatus_<ContainerAllocator1> & lhs, const ::imu_manager::ImuManagerStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace imu_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::imu_manager::ImuManagerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu_manager::ImuManagerStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu_manager::ImuManagerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu_manager::ImuManagerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_manager::ImuManagerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_manager::ImuManagerStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imu_manager::ImuManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f781e87f06b49385516d30f4b92b9f0";
  }

  static const char* value(const ::imu_manager::ImuManagerStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f781e87f06b4938ULL;
  static const uint64_t static_value2 = 0x5516d30f4b92b9f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::imu_manager::ImuManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imu_manager/ImuManagerStatus";
  }

  static const char* value(const ::imu_manager::ImuManagerStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imu_manager::ImuManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string calibration_status\n"
"# in seconds\n"
"int32 next_check_countdown\n"
"# in seconds\n"
"int32 calibration_duration\n"
"# current temperature\n"
"float32 imu_temperature\n"
"# Temperature after last calibration\n"
"float32 calibrated_imu_temperature\n"
"# is robot moving?\n"
"bool robot_moving\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::imu_manager::ImuManagerStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imu_manager::ImuManagerStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.calibration_status);
      stream.next(m.next_check_countdown);
      stream.next(m.calibration_duration);
      stream.next(m.imu_temperature);
      stream.next(m.calibrated_imu_temperature);
      stream.next(m.robot_moving);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImuManagerStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imu_manager::ImuManagerStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imu_manager::ImuManagerStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "calibration_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.calibration_status);
    s << indent << "next_check_countdown: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_check_countdown);
    s << indent << "calibration_duration: ";
    Printer<int32_t>::stream(s, indent + "  ", v.calibration_duration);
    s << indent << "imu_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.imu_temperature);
    s << indent << "calibrated_imu_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.calibrated_imu_temperature);
    s << indent << "robot_moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_moving);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMU_MANAGER_MESSAGE_IMUMANAGERSTATUS_H
