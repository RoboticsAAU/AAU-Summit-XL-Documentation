// Generated by gencpp from file robot_simple_command_manager_msgs/StatusCodes.msg
// DO NOT EDIT!


#ifndef ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_STATUSCODES_H
#define ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_STATUSCODES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_simple_command_manager_msgs
{
template <class ContainerAllocator>
struct StatusCodes_
{
  typedef StatusCodes_<ContainerAllocator> Type;

  StatusCodes_()
    {
    }
  StatusCodes_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ACTIVE)
  #undef ACTIVE
#endif
#if defined(_WIN32) && defined(CANCELLED)
  #undef CANCELLED
#endif
#if defined(_WIN32) && defined(SUCCEEDED)
  #undef SUCCEEDED
#endif
#if defined(_WIN32) && defined(FAILED)
  #undef FAILED
#endif
#if defined(_WIN32) && defined(REJECTED)
  #undef REJECTED
#endif

  enum {
    ACTIVE = 1,
    CANCELLED = 2,
    SUCCEEDED = 3,
    FAILED = 4,
    REJECTED = 5,
  };


  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> const> ConstPtr;

}; // struct StatusCodes_

typedef ::robot_simple_command_manager_msgs::StatusCodes_<std::allocator<void> > StatusCodes;

typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::StatusCodes > StatusCodesPtr;
typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::StatusCodes const> StatusCodesConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace robot_simple_command_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4c26888d420c5a0f01c58b3c577e13c";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4c26888d420c5a0ULL;
  static const uint64_t static_value2 = 0xf01c58b3c577e13cULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_simple_command_manager_msgs/StatusCodes";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 ACTIVE    =  1\n"
"int16 CANCELLED =  2\n"
"int16 SUCCEEDED =  3\n"
"int16 FAILED    =  4\n"
"int16 REJECTED  =  5\n"
;
  }

  static const char* value(const ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StatusCodes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::robot_simple_command_manager_msgs::StatusCodes_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_STATUSCODES_H
