// Generated by gencpp from file robot_simple_command_manager_msgs/CommandLogArray.msg
// DO NOT EDIT!


#ifndef ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_COMMANDLOGARRAY_H
#define ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_COMMANDLOGARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_simple_command_manager_msgs/CommandLog.h>

namespace robot_simple_command_manager_msgs
{
template <class ContainerAllocator>
struct CommandLogArray_
{
  typedef CommandLogArray_<ContainerAllocator> Type;

  CommandLogArray_()
    : log_commands()  {
    }
  CommandLogArray_(const ContainerAllocator& _alloc)
    : log_commands(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> >::other >  _log_commands_type;
  _log_commands_type log_commands;





  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> const> ConstPtr;

}; // struct CommandLogArray_

typedef ::robot_simple_command_manager_msgs::CommandLogArray_<std::allocator<void> > CommandLogArray;

typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::CommandLogArray > CommandLogArrayPtr;
typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::CommandLogArray const> CommandLogArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator1> & lhs, const ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator2> & rhs)
{
  return lhs.log_commands == rhs.log_commands;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator1> & lhs, const ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_simple_command_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5753f43e634712e7e70f05cdca4c3ba4";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5753f43e634712e7ULL;
  static const uint64_t static_value2 = 0xe70f05cdca4c3ba4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_simple_command_manager_msgs/CommandLogArray";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "CommandLog[] log_commands\n"
"================================================================================\n"
"MSG: robot_simple_command_manager_msgs/CommandLog\n"
"string node_name\n"
"string process_name\n"
"string command\n"
"string status\n"
"string result\n"
"bool error\n"
"\n"
;
  }

  static const char* value(const ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.log_commands);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommandLogArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_simple_command_manager_msgs::CommandLogArray_<ContainerAllocator>& v)
  {
    s << indent << "log_commands[]" << std::endl;
    for (size_t i = 0; i < v.log_commands.size(); ++i)
    {
      s << indent << "  log_commands[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> >::stream(s, indent + "    ", v.log_commands[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_COMMANDLOGARRAY_H
