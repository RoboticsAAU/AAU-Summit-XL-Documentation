// Generated by gencpp from file robot_simple_command_manager_msgs/SequencerStatus.msg
// DO NOT EDIT!


#ifndef ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_SEQUENCERSTATUS_H
#define ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_SEQUENCERSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_simple_command_manager_msgs/SequenceStatus.h>

namespace robot_simple_command_manager_msgs
{
template <class ContainerAllocator>
struct SequencerStatus_
{
  typedef SequencerStatus_<ContainerAllocator> Type;

  SequencerStatus_()
    : loaded_sequences()
    , current_sequence()
    , last_error()  {
    }
  SequencerStatus_(const ContainerAllocator& _alloc)
    : loaded_sequences(_alloc)
    , current_sequence(_alloc)
    , last_error(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _loaded_sequences_type;
  _loaded_sequences_type loaded_sequences;

   typedef  ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator>  _current_sequence_type;
  _current_sequence_type current_sequence;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _last_error_type;
  _last_error_type last_error;





  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SequencerStatus_

typedef ::robot_simple_command_manager_msgs::SequencerStatus_<std::allocator<void> > SequencerStatus;

typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::SequencerStatus > SequencerStatusPtr;
typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::SequencerStatus const> SequencerStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator1> & lhs, const ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator2> & rhs)
{
  return lhs.loaded_sequences == rhs.loaded_sequences &&
    lhs.current_sequence == rhs.current_sequence &&
    lhs.last_error == rhs.last_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator1> & lhs, const ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_simple_command_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d7f7e4a8b14f29c9977247d3fad3132";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d7f7e4a8b14f29cULL;
  static const uint64_t static_value2 = 0x9977247d3fad3132ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_simple_command_manager_msgs/SequencerStatus";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] loaded_sequences \n"
"SequenceStatus current_sequence \n"
"string last_error\n"
"================================================================================\n"
"MSG: robot_simple_command_manager_msgs/SequenceStatus\n"
"string name \n"
"string[] commands \n"
"string current_command \n"
"int16 command_index \n"
"\n"
"\n"
;
  }

  static const char* value(const ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.loaded_sequences);
      stream.next(m.current_sequence);
      stream.next(m.last_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SequencerStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_simple_command_manager_msgs::SequencerStatus_<ContainerAllocator>& v)
  {
    s << indent << "loaded_sequences[]" << std::endl;
    for (size_t i = 0; i < v.loaded_sequences.size(); ++i)
    {
      s << indent << "  loaded_sequences[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.loaded_sequences[i]);
    }
    s << indent << "current_sequence: ";
    s << std::endl;
    Printer< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.current_sequence);
    s << indent << "last_error: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.last_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_SEQUENCERSTATUS_H
