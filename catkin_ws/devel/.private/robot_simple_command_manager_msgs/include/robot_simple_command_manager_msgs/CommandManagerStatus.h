// Generated by gencpp from file robot_simple_command_manager_msgs/CommandManagerStatus.msg
// DO NOT EDIT!


#ifndef ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_COMMANDMANAGERSTATUS_H
#define ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_COMMANDMANAGERSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_simple_command_manager_msgs
{
template <class ContainerAllocator>
struct CommandManagerStatus_
{
  typedef CommandManagerStatus_<ContainerAllocator> Type;

  CommandManagerStatus_()
    : loaded_commands()
    , paused_commands()
    , command()
    , code()
    , msg()  {
    }
  CommandManagerStatus_(const ContainerAllocator& _alloc)
    : loaded_commands(_alloc)
    , paused_commands(_alloc)
    , command(_alloc)
    , code(_alloc)
    , msg(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _loaded_commands_type;
  _loaded_commands_type loaded_commands;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _paused_commands_type;
  _paused_commands_type paused_commands;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _code_type;
  _code_type code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  _msg_type msg;





  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> const> ConstPtr;

}; // struct CommandManagerStatus_

typedef ::robot_simple_command_manager_msgs::CommandManagerStatus_<std::allocator<void> > CommandManagerStatus;

typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::CommandManagerStatus > CommandManagerStatusPtr;
typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::CommandManagerStatus const> CommandManagerStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator1> & lhs, const ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator2> & rhs)
{
  return lhs.loaded_commands == rhs.loaded_commands &&
    lhs.paused_commands == rhs.paused_commands &&
    lhs.command == rhs.command &&
    lhs.code == rhs.code &&
    lhs.msg == rhs.msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator1> & lhs, const ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_simple_command_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e13857c463eeda968a68cbe49d47f8d1";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe13857c463eeda96ULL;
  static const uint64_t static_value2 = 0x8a68cbe49d47f8d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_simple_command_manager_msgs/CommandManagerStatus";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] loaded_commands\n"
"string[] paused_commands\n"
"string command\n"
"string code\n"
"string msg\n"
;
  }

  static const char* value(const ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.loaded_commands);
      stream.next(m.paused_commands);
      stream.next(m.command);
      stream.next(m.code);
      stream.next(m.msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommandManagerStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_simple_command_manager_msgs::CommandManagerStatus_<ContainerAllocator>& v)
  {
    s << indent << "loaded_commands[]" << std::endl;
    for (size_t i = 0; i < v.loaded_commands.size(); ++i)
    {
      s << indent << "  loaded_commands[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.loaded_commands[i]);
    }
    s << indent << "paused_commands[]" << std::endl;
    for (size_t i = 0; i < v.paused_commands.size(); ++i)
    {
      s << indent << "  paused_commands[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.paused_commands[i]);
    }
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
    s << indent << "code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.code);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_COMMANDMANAGERSTATUS_H
