// Generated by gencpp from file robot_simple_command_manager_msgs/SequenceStatus.msg
// DO NOT EDIT!


#ifndef ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_SEQUENCESTATUS_H
#define ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_SEQUENCESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_simple_command_manager_msgs
{
template <class ContainerAllocator>
struct SequenceStatus_
{
  typedef SequenceStatus_<ContainerAllocator> Type;

  SequenceStatus_()
    : name()
    , commands()
    , current_command()
    , command_index(0)  {
    }
  SequenceStatus_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , commands(_alloc)
    , current_command(_alloc)
    , command_index(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _commands_type;
  _commands_type commands;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _current_command_type;
  _current_command_type current_command;

   typedef int16_t _command_index_type;
  _command_index_type command_index;





  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SequenceStatus_

typedef ::robot_simple_command_manager_msgs::SequenceStatus_<std::allocator<void> > SequenceStatus;

typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::SequenceStatus > SequenceStatusPtr;
typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::SequenceStatus const> SequenceStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator1> & lhs, const ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.commands == rhs.commands &&
    lhs.current_command == rhs.current_command &&
    lhs.command_index == rhs.command_index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator1> & lhs, const ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_simple_command_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28564f5cd26c96ad764c97f43145fa4e";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28564f5cd26c96adULL;
  static const uint64_t static_value2 = 0x764c97f43145fa4eULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_simple_command_manager_msgs/SequenceStatus";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name \n"
"string[] commands \n"
"string current_command \n"
"int16 command_index \n"
"\n"
"\n"
;
  }

  static const char* value(const ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.commands);
      stream.next(m.current_command);
      stream.next(m.command_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SequenceStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_simple_command_manager_msgs::SequenceStatus_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "commands[]" << std::endl;
    for (size_t i = 0; i < v.commands.size(); ++i)
    {
      s << indent << "  commands[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.commands[i]);
    }
    s << indent << "current_command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.current_command);
    s << indent << "command_index: ";
    Printer<int16_t>::stream(s, indent + "  ", v.command_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_SEQUENCESTATUS_H
