// Generated by gencpp from file robot_simple_command_manager_msgs/GetHandlerInfoResponse.msg
// DO NOT EDIT!


#ifndef ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_GETHANDLERINFORESPONSE_H
#define ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_GETHANDLERINFORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_simple_command_manager_msgs
{
template <class ContainerAllocator>
struct GetHandlerInfoResponse_
{
  typedef GetHandlerInfoResponse_<ContainerAllocator> Type;

  GetHandlerInfoResponse_()
    : success(false)
    , description()
    , types()  {
    }
  GetHandlerInfoResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , description(_alloc)
    , types(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _description_type;
  _description_type description;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _types_type;
  _types_type types;





  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetHandlerInfoResponse_

typedef ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<std::allocator<void> > GetHandlerInfoResponse;

typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse > GetHandlerInfoResponsePtr;
typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse const> GetHandlerInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator1> & lhs, const ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.description == rhs.description &&
    lhs.types == rhs.types;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator1> & lhs, const ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_simple_command_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbd7451bc33753ee0b7ab5d52e435aa8";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdbd7451bc33753eeULL;
  static const uint64_t static_value2 = 0x0b7ab5d52e435aa8ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_simple_command_manager_msgs/GetHandlerInfoResponse";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"string[] description\n"
"string[] types\n"
"\n"
;
  }

  static const char* value(const ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.description);
      stream.next(m.types);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetHandlerInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_simple_command_manager_msgs::GetHandlerInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "description[]" << std::endl;
    for (size_t i = 0; i < v.description.size(); ++i)
    {
      s << indent << "  description[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description[i]);
    }
    s << indent << "types[]" << std::endl;
    for (size_t i = 0; i < v.types.size(); ++i)
    {
      s << indent << "  types[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.types[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_GETHANDLERINFORESPONSE_H
