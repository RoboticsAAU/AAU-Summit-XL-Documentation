// Generated by gencpp from file robot_simple_command_manager_msgs/CommandLog.msg
// DO NOT EDIT!


#ifndef ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_COMMANDLOG_H
#define ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_COMMANDLOG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_simple_command_manager_msgs
{
template <class ContainerAllocator>
struct CommandLog_
{
  typedef CommandLog_<ContainerAllocator> Type;

  CommandLog_()
    : node_name()
    , process_name()
    , command()
    , status()
    , result()
    , error(false)  {
    }
  CommandLog_(const ContainerAllocator& _alloc)
    : node_name(_alloc)
    , process_name(_alloc)
    , command(_alloc)
    , status(_alloc)
    , result(_alloc)
    , error(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_name_type;
  _node_name_type node_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _process_name_type;
  _process_name_type process_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _result_type;
  _result_type result;

   typedef uint8_t _error_type;
  _error_type error;





  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> const> ConstPtr;

}; // struct CommandLog_

typedef ::robot_simple_command_manager_msgs::CommandLog_<std::allocator<void> > CommandLog;

typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::CommandLog > CommandLogPtr;
typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::CommandLog const> CommandLogConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator1> & lhs, const ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator2> & rhs)
{
  return lhs.node_name == rhs.node_name &&
    lhs.process_name == rhs.process_name &&
    lhs.command == rhs.command &&
    lhs.status == rhs.status &&
    lhs.result == rhs.result &&
    lhs.error == rhs.error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator1> & lhs, const ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_simple_command_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "27048deb83cbc31fe2ad0d1dfb0d30bd";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x27048deb83cbc31fULL;
  static const uint64_t static_value2 = 0xe2ad0d1dfb0d30bdULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_simple_command_manager_msgs/CommandLog";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string node_name\n"
"string process_name\n"
"string command\n"
"string status\n"
"string result\n"
"bool error\n"
"\n"
;
  }

  static const char* value(const ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node_name);
      stream.next(m.process_name);
      stream.next(m.command);
      stream.next(m.status);
      stream.next(m.result);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommandLog_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_simple_command_manager_msgs::CommandLog_<ContainerAllocator>& v)
  {
    s << indent << "node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node_name);
    s << indent << "process_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.process_name);
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.result);
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_COMMANDLOG_H
