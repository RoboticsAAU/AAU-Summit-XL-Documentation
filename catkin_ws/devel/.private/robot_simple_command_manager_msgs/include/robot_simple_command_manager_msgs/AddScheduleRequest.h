// Generated by gencpp from file robot_simple_command_manager_msgs/AddScheduleRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_ADDSCHEDULEREQUEST_H
#define ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_ADDSCHEDULEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_simple_command_manager_msgs/EventScheduler.h>

namespace robot_simple_command_manager_msgs
{
template <class ContainerAllocator>
struct AddScheduleRequest_
{
  typedef AddScheduleRequest_<ContainerAllocator> Type;

  AddScheduleRequest_()
    : event()  {
    }
  AddScheduleRequest_(const ContainerAllocator& _alloc)
    : event(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robot_simple_command_manager_msgs::EventScheduler_<ContainerAllocator>  _event_type;
  _event_type event;





  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddScheduleRequest_

typedef ::robot_simple_command_manager_msgs::AddScheduleRequest_<std::allocator<void> > AddScheduleRequest;

typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::AddScheduleRequest > AddScheduleRequestPtr;
typedef boost::shared_ptr< ::robot_simple_command_manager_msgs::AddScheduleRequest const> AddScheduleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator1> & lhs, const ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.event == rhs.event;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator1> & lhs, const ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_simple_command_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d98ad416fa8d002cde0281e58b5337a7";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd98ad416fa8d002cULL;
  static const uint64_t static_value2 = 0xde0281e58b5337a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_simple_command_manager_msgs/AddScheduleRequest";
  }

  static const char* value(const ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_simple_command_manager_msgs/EventScheduler event\n"
"\n"
"================================================================================\n"
"MSG: robot_simple_command_manager_msgs/EventScheduler\n"
"string id\n"
"int32[] wk\n"
"string date_start\n"
"string date_end\n"
"int32 hour\n"
"int32 minute\n"
"int32 repeat_hour\n"
"bool enabled\n"
"string commands\n"
"\n"
;
  }

  static const char* value(const ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.event);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddScheduleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_simple_command_manager_msgs::AddScheduleRequest_<ContainerAllocator>& v)
  {
    s << indent << "event: ";
    s << std::endl;
    Printer< ::robot_simple_command_manager_msgs::EventScheduler_<ContainerAllocator> >::stream(s, indent + "  ", v.event);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SIMPLE_COMMAND_MANAGER_MSGS_MESSAGE_ADDSCHEDULEREQUEST_H
