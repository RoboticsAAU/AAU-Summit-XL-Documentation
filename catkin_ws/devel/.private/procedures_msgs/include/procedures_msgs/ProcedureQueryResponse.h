// Generated by gencpp from file procedures_msgs/ProcedureQueryResponse.msg
// DO NOT EDIT!


#ifndef PROCEDURES_MSGS_MESSAGE_PROCEDUREQUERYRESPONSE_H
#define PROCEDURES_MSGS_MESSAGE_PROCEDUREQUERYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <procedures_msgs/ProcedureState.h>
#include <procedures_msgs/ProcedureResult.h>
#include <std_msgs/String.h>

namespace procedures_msgs
{
template <class ContainerAllocator>
struct ProcedureQueryResponse_
{
  typedef ProcedureQueryResponse_<ContainerAllocator> Type;

  ProcedureQueryResponse_()
    : state()
    , result()
    , last_message()  {
    }
  ProcedureQueryResponse_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , result(_alloc)
    , last_message(_alloc)  {
  (void)_alloc;
    }



   typedef  ::procedures_msgs::ProcedureState_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef  ::procedures_msgs::ProcedureResult_<ContainerAllocator>  _result_type;
  _result_type result;

   typedef  ::std_msgs::String_<ContainerAllocator>  _last_message_type;
  _last_message_type last_message;





  typedef boost::shared_ptr< ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ProcedureQueryResponse_

typedef ::procedures_msgs::ProcedureQueryResponse_<std::allocator<void> > ProcedureQueryResponse;

typedef boost::shared_ptr< ::procedures_msgs::ProcedureQueryResponse > ProcedureQueryResponsePtr;
typedef boost::shared_ptr< ::procedures_msgs::ProcedureQueryResponse const> ProcedureQueryResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator1> & lhs, const ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.result == rhs.result &&
    lhs.last_message == rhs.last_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator1> & lhs, const ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace procedures_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c0b5cb62dae6c246f302469f03b777e0";
  }

  static const char* value(const ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc0b5cb62dae6c246ULL;
  static const uint64_t static_value2 = 0xf302469f03b777e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "procedures_msgs/ProcedureQueryResponse";
  }

  static const char* value(const ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ProcedureState state\n"
"ProcedureResult result\n"
"std_msgs/String last_message\n"
"\n"
"\n"
"================================================================================\n"
"MSG: procedures_msgs/ProcedureState\n"
"# STATE allowed values. Defined as STRING because it is easier to identify them in a raw message\n"
"string QUEUED=queued\n"
"string RUNNING=running\n"
"string PAUSED=paused\n"
"string FINISHED=finished\n"
"\n"
"# EVENT allowed values. Defined as STRING because it is easier to identify them in a raw message\n"
"# events triggered from outside\n"
"string ADDED=added\n"
"string START=start\n"
"string STOP=stop\n"
"string CANCEL=cancel\n"
"string PAUSE=pause\n"
"string RESUME=resume\n"
"# self triggered events\n"
"string FINISH=finish\n"
"string ABORT=abort\n"
"\n"
"# additionally, both state and event can be UNKNOW\n"
"string UNKNOWN=unknown\n"
"\n"
"ProcedureHeader header\n"
"string current_state\n"
"string last_event\n"
"\n"
"================================================================================\n"
"MSG: procedures_msgs/ProcedureHeader\n"
"# id: identifies the procedure in the robot context.\n"
"# user should do not set this, but the proceduremanager\n"
"# TODO: may be replaced with uuid_msgs/UniqueID.\n"
"int32 id\n"
"# priority: priority of the current procedure. used in case procedure preemption is allowed\n"
"int32 priority\n"
"# stamp: timestamp when procedure was started.\n"
"# may be used by the procedure manager.\n"
"time stamp\n"
"# name: human readable identificator.\n"
"# set by the user, can be empty\n"
"# not used by the procedure manager to identify the procedure\n"
"string name\n"
"\n"
"================================================================================\n"
"MSG: procedures_msgs/ProcedureResult\n"
"# RESULT allowed values. Defined as STRING because it is easier to identify them in a raw message\n"
"string OK=ok\n"
"string ERROR=error\n"
"\n"
"string result\n"
"string message\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.result);
      stream.next(m.last_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProcedureQueryResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::procedures_msgs::ProcedureQueryResponse_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    s << std::endl;
    Printer< ::procedures_msgs::ProcedureState_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "result: ";
    s << std::endl;
    Printer< ::procedures_msgs::ProcedureResult_<ContainerAllocator> >::stream(s, indent + "  ", v.result);
    s << indent << "last_message: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.last_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROCEDURES_MSGS_MESSAGE_PROCEDUREQUERYRESPONSE_H
