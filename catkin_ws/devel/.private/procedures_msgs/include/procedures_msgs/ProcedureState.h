// Generated by gencpp from file procedures_msgs/ProcedureState.msg
// DO NOT EDIT!


#ifndef PROCEDURES_MSGS_MESSAGE_PROCEDURESTATE_H
#define PROCEDURES_MSGS_MESSAGE_PROCEDURESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <procedures_msgs/ProcedureHeader.h>

namespace procedures_msgs
{
template <class ContainerAllocator>
struct ProcedureState_
{
  typedef ProcedureState_<ContainerAllocator> Type;

  ProcedureState_()
    : header()
    , current_state()
    , last_event()  {
    }
  ProcedureState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , current_state(_alloc)
    , last_event(_alloc)  {
  (void)_alloc;
    }



   typedef  ::procedures_msgs::ProcedureHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _current_state_type;
  _current_state_type current_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _last_event_type;
  _last_event_type last_event;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(QUEUED)
  #undef QUEUED
#endif
#if defined(_WIN32) && defined(RUNNING)
  #undef RUNNING
#endif
#if defined(_WIN32) && defined(PAUSED)
  #undef PAUSED
#endif
#if defined(_WIN32) && defined(FINISHED)
  #undef FINISHED
#endif
#if defined(_WIN32) && defined(ADDED)
  #undef ADDED
#endif
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(CANCEL)
  #undef CANCEL
#endif
#if defined(_WIN32) && defined(PAUSE)
  #undef PAUSE
#endif
#if defined(_WIN32) && defined(RESUME)
  #undef RESUME
#endif
#if defined(_WIN32) && defined(FINISH)
  #undef FINISH
#endif
#if defined(_WIN32) && defined(ABORT)
  #undef ABORT
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  QUEUED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  RUNNING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PAUSED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  FINISHED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ADDED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  START;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STOP;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CANCEL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PAUSE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  RESUME;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  FINISH;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ABORT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  UNKNOWN;

  typedef boost::shared_ptr< ::procedures_msgs::ProcedureState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::procedures_msgs::ProcedureState_<ContainerAllocator> const> ConstPtr;

}; // struct ProcedureState_

typedef ::procedures_msgs::ProcedureState_<std::allocator<void> > ProcedureState;

typedef boost::shared_ptr< ::procedures_msgs::ProcedureState > ProcedureStatePtr;
typedef boost::shared_ptr< ::procedures_msgs::ProcedureState const> ProcedureStateConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureState_<ContainerAllocator>::QUEUED =
        
          "queued"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureState_<ContainerAllocator>::RUNNING =
        
          "running"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureState_<ContainerAllocator>::PAUSED =
        
          "paused"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureState_<ContainerAllocator>::FINISHED =
        
          "finished"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureState_<ContainerAllocator>::ADDED =
        
          "added"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureState_<ContainerAllocator>::START =
        
          "start"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureState_<ContainerAllocator>::STOP =
        
          "stop"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureState_<ContainerAllocator>::CANCEL =
        
          "cancel"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureState_<ContainerAllocator>::PAUSE =
        
          "pause"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureState_<ContainerAllocator>::RESUME =
        
          "resume"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureState_<ContainerAllocator>::FINISH =
        
          "finish"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureState_<ContainerAllocator>::ABORT =
        
          "abort"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureState_<ContainerAllocator>::UNKNOWN =
        
          "unknown"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::procedures_msgs::ProcedureState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::procedures_msgs::ProcedureState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::procedures_msgs::ProcedureState_<ContainerAllocator1> & lhs, const ::procedures_msgs::ProcedureState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.current_state == rhs.current_state &&
    lhs.last_event == rhs.last_event;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::procedures_msgs::ProcedureState_<ContainerAllocator1> & lhs, const ::procedures_msgs::ProcedureState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace procedures_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::procedures_msgs::ProcedureState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::procedures_msgs::ProcedureState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::procedures_msgs::ProcedureState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::procedures_msgs::ProcedureState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::procedures_msgs::ProcedureState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::procedures_msgs::ProcedureState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::procedures_msgs::ProcedureState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6979cad7e83ce5406a65ccecf3686f85";
  }

  static const char* value(const ::procedures_msgs::ProcedureState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6979cad7e83ce540ULL;
  static const uint64_t static_value2 = 0x6a65ccecf3686f85ULL;
};

template<class ContainerAllocator>
struct DataType< ::procedures_msgs::ProcedureState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "procedures_msgs/ProcedureState";
  }

  static const char* value(const ::procedures_msgs::ProcedureState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::procedures_msgs::ProcedureState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# STATE allowed values. Defined as STRING because it is easier to identify them in a raw message\n"
"string QUEUED=queued\n"
"string RUNNING=running\n"
"string PAUSED=paused\n"
"string FINISHED=finished\n"
"\n"
"# EVENT allowed values. Defined as STRING because it is easier to identify them in a raw message\n"
"# events triggered from outside\n"
"string ADDED=added\n"
"string START=start\n"
"string STOP=stop\n"
"string CANCEL=cancel\n"
"string PAUSE=pause\n"
"string RESUME=resume\n"
"# self triggered events\n"
"string FINISH=finish\n"
"string ABORT=abort\n"
"\n"
"# additionally, both state and event can be UNKNOW\n"
"string UNKNOWN=unknown\n"
"\n"
"ProcedureHeader header\n"
"string current_state\n"
"string last_event\n"
"\n"
"================================================================================\n"
"MSG: procedures_msgs/ProcedureHeader\n"
"# id: identifies the procedure in the robot context.\n"
"# user should do not set this, but the proceduremanager\n"
"# TODO: may be replaced with uuid_msgs/UniqueID.\n"
"int32 id\n"
"# priority: priority of the current procedure. used in case procedure preemption is allowed\n"
"int32 priority\n"
"# stamp: timestamp when procedure was started.\n"
"# may be used by the procedure manager.\n"
"time stamp\n"
"# name: human readable identificator.\n"
"# set by the user, can be empty\n"
"# not used by the procedure manager to identify the procedure\n"
"string name\n"
;
  }

  static const char* value(const ::procedures_msgs::ProcedureState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::procedures_msgs::ProcedureState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.current_state);
      stream.next(m.last_event);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProcedureState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::procedures_msgs::ProcedureState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::procedures_msgs::ProcedureState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::procedures_msgs::ProcedureHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "current_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.current_state);
    s << indent << "last_event: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.last_event);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROCEDURES_MSGS_MESSAGE_PROCEDURESTATE_H
