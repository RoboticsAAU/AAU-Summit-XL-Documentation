// Generated by gencpp from file procedures_msgs/ProcedureQueryRequest.msg
// DO NOT EDIT!


#ifndef PROCEDURES_MSGS_MESSAGE_PROCEDUREQUERYREQUEST_H
#define PROCEDURES_MSGS_MESSAGE_PROCEDUREQUERYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <procedures_msgs/ProcedureHeader.h>

namespace procedures_msgs
{
template <class ContainerAllocator>
struct ProcedureQueryRequest_
{
  typedef ProcedureQueryRequest_<ContainerAllocator> Type;

  ProcedureQueryRequest_()
    : header()  {
    }
  ProcedureQueryRequest_(const ContainerAllocator& _alloc)
    : header(_alloc)  {
  (void)_alloc;
    }



   typedef  ::procedures_msgs::ProcedureHeader_<ContainerAllocator>  _header_type;
  _header_type header;





  typedef boost::shared_ptr< ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ProcedureQueryRequest_

typedef ::procedures_msgs::ProcedureQueryRequest_<std::allocator<void> > ProcedureQueryRequest;

typedef boost::shared_ptr< ::procedures_msgs::ProcedureQueryRequest > ProcedureQueryRequestPtr;
typedef boost::shared_ptr< ::procedures_msgs::ProcedureQueryRequest const> ProcedureQueryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator1> & lhs, const ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator1> & lhs, const ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace procedures_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8381e7649b6a363106c049611ab9ee2";
  }

  static const char* value(const ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8381e7649b6a363ULL;
  static const uint64_t static_value2 = 0x106c049611ab9ee2ULL;
};

template<class ContainerAllocator>
struct DataType< ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "procedures_msgs/ProcedureQueryRequest";
  }

  static const char* value(const ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ProcedureHeader header\n"
"\n"
"================================================================================\n"
"MSG: procedures_msgs/ProcedureHeader\n"
"# id: identifies the procedure in the robot context.\n"
"# user should do not set this, but the proceduremanager\n"
"# TODO: may be replaced with uuid_msgs/UniqueID.\n"
"int32 id\n"
"# priority: priority of the current procedure. used in case procedure preemption is allowed\n"
"int32 priority\n"
"# stamp: timestamp when procedure was started.\n"
"# may be used by the procedure manager.\n"
"time stamp\n"
"# name: human readable identificator.\n"
"# set by the user, can be empty\n"
"# not used by the procedure manager to identify the procedure\n"
"string name\n"
;
  }

  static const char* value(const ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProcedureQueryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::procedures_msgs::ProcedureQueryRequest_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::procedures_msgs::ProcedureHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROCEDURES_MSGS_MESSAGE_PROCEDUREQUERYREQUEST_H
