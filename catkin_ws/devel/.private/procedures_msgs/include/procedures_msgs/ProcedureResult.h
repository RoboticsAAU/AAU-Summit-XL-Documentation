// Generated by gencpp from file procedures_msgs/ProcedureResult.msg
// DO NOT EDIT!


#ifndef PROCEDURES_MSGS_MESSAGE_PROCEDURERESULT_H
#define PROCEDURES_MSGS_MESSAGE_PROCEDURERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace procedures_msgs
{
template <class ContainerAllocator>
struct ProcedureResult_
{
  typedef ProcedureResult_<ContainerAllocator> Type;

  ProcedureResult_()
    : result()
    , message()  {
    }
  ProcedureResult_(const ContainerAllocator& _alloc)
    : result(_alloc)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _result_type;
  _result_type result;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OK)
  #undef OK
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OK;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ERROR;

  typedef boost::shared_ptr< ::procedures_msgs::ProcedureResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::procedures_msgs::ProcedureResult_<ContainerAllocator> const> ConstPtr;

}; // struct ProcedureResult_

typedef ::procedures_msgs::ProcedureResult_<std::allocator<void> > ProcedureResult;

typedef boost::shared_ptr< ::procedures_msgs::ProcedureResult > ProcedureResultPtr;
typedef boost::shared_ptr< ::procedures_msgs::ProcedureResult const> ProcedureResultConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureResult_<ContainerAllocator>::OK =
        
          "ok"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ProcedureResult_<ContainerAllocator>::ERROR =
        
          "error"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::procedures_msgs::ProcedureResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::procedures_msgs::ProcedureResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::procedures_msgs::ProcedureResult_<ContainerAllocator1> & lhs, const ::procedures_msgs::ProcedureResult_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::procedures_msgs::ProcedureResult_<ContainerAllocator1> & lhs, const ::procedures_msgs::ProcedureResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace procedures_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::procedures_msgs::ProcedureResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::procedures_msgs::ProcedureResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::procedures_msgs::ProcedureResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::procedures_msgs::ProcedureResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::procedures_msgs::ProcedureResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::procedures_msgs::ProcedureResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::procedures_msgs::ProcedureResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cad7f991fe633cf8d87eb04d33da9dfe";
  }

  static const char* value(const ::procedures_msgs::ProcedureResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcad7f991fe633cf8ULL;
  static const uint64_t static_value2 = 0xd87eb04d33da9dfeULL;
};

template<class ContainerAllocator>
struct DataType< ::procedures_msgs::ProcedureResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "procedures_msgs/ProcedureResult";
  }

  static const char* value(const ::procedures_msgs::ProcedureResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::procedures_msgs::ProcedureResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# RESULT allowed values. Defined as STRING because it is easier to identify them in a raw message\n"
"string OK=ok\n"
"string ERROR=error\n"
"\n"
"string result\n"
"string message\n"
;
  }

  static const char* value(const ::procedures_msgs::ProcedureResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::procedures_msgs::ProcedureResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProcedureResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::procedures_msgs::ProcedureResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::procedures_msgs::ProcedureResult_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.result);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROCEDURES_MSGS_MESSAGE_PROCEDURERESULT_H
