// Generated by gencpp from file marker_mapping/InitPoseFromMarkerRequest.msg
// DO NOT EDIT!


#ifndef MARKER_MAPPING_MESSAGE_INITPOSEFROMMARKERREQUEST_H
#define MARKER_MAPPING_MESSAGE_INITPOSEFROMMARKERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marker_mapping
{
template <class ContainerAllocator>
struct InitPoseFromMarkerRequest_
{
  typedef InitPoseFromMarkerRequest_<ContainerAllocator> Type;

  InitPoseFromMarkerRequest_()
    : id()  {
    }
  InitPoseFromMarkerRequest_(const ContainerAllocator& _alloc)
    : id(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct InitPoseFromMarkerRequest_

typedef ::marker_mapping::InitPoseFromMarkerRequest_<std::allocator<void> > InitPoseFromMarkerRequest;

typedef boost::shared_ptr< ::marker_mapping::InitPoseFromMarkerRequest > InitPoseFromMarkerRequestPtr;
typedef boost::shared_ptr< ::marker_mapping::InitPoseFromMarkerRequest const> InitPoseFromMarkerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator1> & lhs, const ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator1> & lhs, const ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marker_mapping

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75fc70b4830226cd547507be89ea6a03";
  }

  static const char* value(const ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75fc70b4830226cdULL;
  static const uint64_t static_value2 = 0x547507be89ea6a03ULL;
};

template<class ContainerAllocator>
struct DataType< ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marker_mapping/InitPoseFromMarkerRequest";
  }

  static const char* value(const ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Marker selected to load\n"
"uint32[] id\n"
;
  }

  static const char* value(const ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InitPoseFromMarkerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marker_mapping::InitPoseFromMarkerRequest_<ContainerAllocator>& v)
  {
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.id[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARKER_MAPPING_MESSAGE_INITPOSEFROMMARKERREQUEST_H
