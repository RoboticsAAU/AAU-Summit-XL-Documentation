// Generated by gencpp from file marker_mapping/FrameMappingStatus.msg
// DO NOT EDIT!


#ifndef MARKER_MAPPING_MESSAGE_FRAMEMAPPINGSTATUS_H
#define MARKER_MAPPING_MESSAGE_FRAMEMAPPINGSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <marker_mapping/FrameStatus.h>

namespace marker_mapping
{
template <class ContainerAllocator>
struct FrameMappingStatus_
{
  typedef FrameMappingStatus_<ContainerAllocator> Type;

  FrameMappingStatus_()
    : header()
    , ids_recorded()
    , ids_detected()  {
    }
  FrameMappingStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ids_recorded(_alloc)
    , ids_detected(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _ids_recorded_type;
  _ids_recorded_type ids_recorded;

   typedef std::vector< ::marker_mapping::FrameStatus_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::marker_mapping::FrameStatus_<ContainerAllocator> >::other >  _ids_detected_type;
  _ids_detected_type ids_detected;





  typedef boost::shared_ptr< ::marker_mapping::FrameMappingStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marker_mapping::FrameMappingStatus_<ContainerAllocator> const> ConstPtr;

}; // struct FrameMappingStatus_

typedef ::marker_mapping::FrameMappingStatus_<std::allocator<void> > FrameMappingStatus;

typedef boost::shared_ptr< ::marker_mapping::FrameMappingStatus > FrameMappingStatusPtr;
typedef boost::shared_ptr< ::marker_mapping::FrameMappingStatus const> FrameMappingStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marker_mapping::FrameMappingStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marker_mapping::FrameMappingStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marker_mapping::FrameMappingStatus_<ContainerAllocator1> & lhs, const ::marker_mapping::FrameMappingStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ids_recorded == rhs.ids_recorded &&
    lhs.ids_detected == rhs.ids_detected;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marker_mapping::FrameMappingStatus_<ContainerAllocator1> & lhs, const ::marker_mapping::FrameMappingStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marker_mapping

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marker_mapping::FrameMappingStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marker_mapping::FrameMappingStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_mapping::FrameMappingStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_mapping::FrameMappingStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_mapping::FrameMappingStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_mapping::FrameMappingStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marker_mapping::FrameMappingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfff8ce0f7290207c6b777f75e70e963";
  }

  static const char* value(const ::marker_mapping::FrameMappingStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdfff8ce0f7290207ULL;
  static const uint64_t static_value2 = 0xc6b777f75e70e963ULL;
};

template<class ContainerAllocator>
struct DataType< ::marker_mapping::FrameMappingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marker_mapping/FrameMappingStatus";
  }

  static const char* value(const ::marker_mapping::FrameMappingStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marker_mapping::FrameMappingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"Header header\n"
"string[] ids_recorded\n"
"FrameStatus[] ids_detected\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: marker_mapping/FrameStatus\n"
"string id\n"
"# current distance to the frame\n"
"float32 current_distance\n"
"# max allowed distance to init the pose\n"
"float32 max_distance\n"
"# pose if we use the frame to initialize the localization\n"
"geometry_msgs/Pose pose_from_frame\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::marker_mapping::FrameMappingStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marker_mapping::FrameMappingStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ids_recorded);
      stream.next(m.ids_detected);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrameMappingStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marker_mapping::FrameMappingStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marker_mapping::FrameMappingStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ids_recorded[]" << std::endl;
    for (size_t i = 0; i < v.ids_recorded.size(); ++i)
    {
      s << indent << "  ids_recorded[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ids_recorded[i]);
    }
    s << indent << "ids_detected[]" << std::endl;
    for (size_t i = 0; i < v.ids_detected.size(); ++i)
    {
      s << indent << "  ids_detected[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::marker_mapping::FrameStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.ids_detected[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARKER_MAPPING_MESSAGE_FRAMEMAPPINGSTATUS_H
