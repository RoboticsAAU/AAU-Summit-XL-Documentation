// Generated by gencpp from file marker_mapping/MarkerMappingState.msg
// DO NOT EDIT!


#ifndef MARKER_MAPPING_MESSAGE_MARKERMAPPINGSTATE_H
#define MARKER_MAPPING_MESSAGE_MARKERMAPPINGSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_msgs/State.h>

namespace marker_mapping
{
template <class ContainerAllocator>
struct MarkerMappingState_
{
  typedef MarkerMappingState_<ContainerAllocator> Type;

  MarkerMappingState_()
    : state()
    , ids_recorded()
    , ids_detected()  {
    }
  MarkerMappingState_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , ids_recorded(_alloc)
    , ids_detected(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robotnik_msgs::State_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _ids_recorded_type;
  _ids_recorded_type ids_recorded;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _ids_detected_type;
  _ids_detected_type ids_detected;





  typedef boost::shared_ptr< ::marker_mapping::MarkerMappingState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marker_mapping::MarkerMappingState_<ContainerAllocator> const> ConstPtr;

}; // struct MarkerMappingState_

typedef ::marker_mapping::MarkerMappingState_<std::allocator<void> > MarkerMappingState;

typedef boost::shared_ptr< ::marker_mapping::MarkerMappingState > MarkerMappingStatePtr;
typedef boost::shared_ptr< ::marker_mapping::MarkerMappingState const> MarkerMappingStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marker_mapping::MarkerMappingState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marker_mapping::MarkerMappingState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marker_mapping::MarkerMappingState_<ContainerAllocator1> & lhs, const ::marker_mapping::MarkerMappingState_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.ids_recorded == rhs.ids_recorded &&
    lhs.ids_detected == rhs.ids_detected;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marker_mapping::MarkerMappingState_<ContainerAllocator1> & lhs, const ::marker_mapping::MarkerMappingState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marker_mapping

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marker_mapping::MarkerMappingState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marker_mapping::MarkerMappingState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_mapping::MarkerMappingState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_mapping::MarkerMappingState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_mapping::MarkerMappingState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_mapping::MarkerMappingState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marker_mapping::MarkerMappingState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb3fc0eea314f2b16a963d2e0c2d2b3f";
  }

  static const char* value(const ::marker_mapping::MarkerMappingState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb3fc0eea314f2b1ULL;
  static const uint64_t static_value2 = 0x6a963d2e0c2d2b3fULL;
};

template<class ContainerAllocator>
struct DataType< ::marker_mapping::MarkerMappingState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marker_mapping/MarkerMappingState";
  }

  static const char* value(const ::marker_mapping::MarkerMappingState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marker_mapping::MarkerMappingState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/State state\n"
"int32[] ids_recorded\n"
"int32[] ids_detected\n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/State\n"
"# constants\n"
"int32 INIT_STATE = 100\n"
"int32 STANDBY_STATE = 200\n"
"int32 READY_STATE = 300\n"
"int32 EMERGENCY_STATE = 400\n"
"int32 FAILURE_STATE = 500\n"
"int32 SHUTDOWN_STATE = 600\n"
"int32 UNKOWN_STATE = 700\n"
"\n"
"# state of the component\n"
"int32 state\n"
"# desired control loop frecuency\n"
"float32 desired_freq\n"
"# real frecuency \n"
"float32 real_freq\n"
"# Description of the state\n"
"string state_description\n"
;
  }

  static const char* value(const ::marker_mapping::MarkerMappingState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marker_mapping::MarkerMappingState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.ids_recorded);
      stream.next(m.ids_detected);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MarkerMappingState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marker_mapping::MarkerMappingState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marker_mapping::MarkerMappingState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    s << std::endl;
    Printer< ::robotnik_msgs::State_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "ids_recorded[]" << std::endl;
    for (size_t i = 0; i < v.ids_recorded.size(); ++i)
    {
      s << indent << "  ids_recorded[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ids_recorded[i]);
    }
    s << indent << "ids_detected[]" << std::endl;
    for (size_t i = 0; i < v.ids_detected.size(); ++i)
    {
      s << indent << "  ids_detected[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ids_detected[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARKER_MAPPING_MESSAGE_MARKERMAPPINGSTATE_H
