// Generated by gencpp from file marker_mapping/FrameStatus.msg
// DO NOT EDIT!


#ifndef MARKER_MAPPING_MESSAGE_FRAMESTATUS_H
#define MARKER_MAPPING_MESSAGE_FRAMESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace marker_mapping
{
template <class ContainerAllocator>
struct FrameStatus_
{
  typedef FrameStatus_<ContainerAllocator> Type;

  FrameStatus_()
    : id()
    , current_distance(0.0)
    , max_distance(0.0)
    , pose_from_frame()  {
    }
  FrameStatus_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , current_distance(0.0)
    , max_distance(0.0)
    , pose_from_frame(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef float _current_distance_type;
  _current_distance_type current_distance;

   typedef float _max_distance_type;
  _max_distance_type max_distance;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_from_frame_type;
  _pose_from_frame_type pose_from_frame;





  typedef boost::shared_ptr< ::marker_mapping::FrameStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marker_mapping::FrameStatus_<ContainerAllocator> const> ConstPtr;

}; // struct FrameStatus_

typedef ::marker_mapping::FrameStatus_<std::allocator<void> > FrameStatus;

typedef boost::shared_ptr< ::marker_mapping::FrameStatus > FrameStatusPtr;
typedef boost::shared_ptr< ::marker_mapping::FrameStatus const> FrameStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marker_mapping::FrameStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marker_mapping::FrameStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marker_mapping::FrameStatus_<ContainerAllocator1> & lhs, const ::marker_mapping::FrameStatus_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.current_distance == rhs.current_distance &&
    lhs.max_distance == rhs.max_distance &&
    lhs.pose_from_frame == rhs.pose_from_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marker_mapping::FrameStatus_<ContainerAllocator1> & lhs, const ::marker_mapping::FrameStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marker_mapping

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marker_mapping::FrameStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marker_mapping::FrameStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_mapping::FrameStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_mapping::FrameStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_mapping::FrameStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_mapping::FrameStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marker_mapping::FrameStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f74922ad8511c5477ef362a7ef9b79a";
  }

  static const char* value(const ::marker_mapping::FrameStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f74922ad8511c54ULL;
  static const uint64_t static_value2 = 0x77ef362a7ef9b79aULL;
};

template<class ContainerAllocator>
struct DataType< ::marker_mapping::FrameStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marker_mapping/FrameStatus";
  }

  static const char* value(const ::marker_mapping::FrameStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marker_mapping::FrameStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"# current distance to the frame\n"
"float32 current_distance\n"
"# max allowed distance to init the pose\n"
"float32 max_distance\n"
"# pose if we use the frame to initialize the localization\n"
"geometry_msgs/Pose pose_from_frame\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::marker_mapping::FrameStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marker_mapping::FrameStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.current_distance);
      stream.next(m.max_distance);
      stream.next(m.pose_from_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrameStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marker_mapping::FrameStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marker_mapping::FrameStatus_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "current_distance: ";
    Printer<float>::stream(s, indent + "  ", v.current_distance);
    s << indent << "max_distance: ";
    Printer<float>::stream(s, indent + "  ", v.max_distance);
    s << indent << "pose_from_frame: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_from_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARKER_MAPPING_MESSAGE_FRAMESTATUS_H
