// Generated by gencpp from file multimap_server_msgs/Environment.msg
// DO NOT EDIT!


#ifndef MULTIMAP_SERVER_MSGS_MESSAGE_ENVIRONMENT_H
#define MULTIMAP_SERVER_MSGS_MESSAGE_ENVIRONMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multimap_server_msgs
{
template <class ContainerAllocator>
struct Environment_
{
  typedef Environment_<ContainerAllocator> Type;

  Environment_()
    : name()
    , global_frame()
    , map_name()  {
    }
  Environment_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , global_frame(_alloc)
    , map_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _global_frame_type;
  _global_frame_type global_frame;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _map_name_type;
  _map_name_type map_name;





  typedef boost::shared_ptr< ::multimap_server_msgs::Environment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multimap_server_msgs::Environment_<ContainerAllocator> const> ConstPtr;

}; // struct Environment_

typedef ::multimap_server_msgs::Environment_<std::allocator<void> > Environment;

typedef boost::shared_ptr< ::multimap_server_msgs::Environment > EnvironmentPtr;
typedef boost::shared_ptr< ::multimap_server_msgs::Environment const> EnvironmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multimap_server_msgs::Environment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multimap_server_msgs::Environment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multimap_server_msgs::Environment_<ContainerAllocator1> & lhs, const ::multimap_server_msgs::Environment_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.global_frame == rhs.global_frame &&
    lhs.map_name == rhs.map_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multimap_server_msgs::Environment_<ContainerAllocator1> & lhs, const ::multimap_server_msgs::Environment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multimap_server_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::multimap_server_msgs::Environment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multimap_server_msgs::Environment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multimap_server_msgs::Environment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multimap_server_msgs::Environment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multimap_server_msgs::Environment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multimap_server_msgs::Environment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multimap_server_msgs::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa9611ef212559f86614fff37385ab6a";
  }

  static const char* value(const ::multimap_server_msgs::Environment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa9611ef212559f8ULL;
  static const uint64_t static_value2 = 0x6614fff37385ab6aULL;
};

template<class ContainerAllocator>
struct DataType< ::multimap_server_msgs::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multimap_server_msgs/Environment";
  }

  static const char* value(const ::multimap_server_msgs::Environment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multimap_server_msgs::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string global_frame\n"
"string[] map_name\n"
;
  }

  static const char* value(const ::multimap_server_msgs::Environment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multimap_server_msgs::Environment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.global_frame);
      stream.next(m.map_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Environment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multimap_server_msgs::Environment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multimap_server_msgs::Environment_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "global_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.global_frame);
    s << indent << "map_name[]" << std::endl;
    for (size_t i = 0; i < v.map_name.size(); ++i)
    {
      s << indent << "  map_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map_name[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTIMAP_SERVER_MSGS_MESSAGE_ENVIRONMENT_H
