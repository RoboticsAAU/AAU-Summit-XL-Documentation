// Generated by gencpp from file multimap_server_msgs/SaveMapRequest.msg
// DO NOT EDIT!


#ifndef MULTIMAP_SERVER_MSGS_MESSAGE_SAVEMAPREQUEST_H
#define MULTIMAP_SERVER_MSGS_MESSAGE_SAVEMAPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multimap_server_msgs
{
template <class ContainerAllocator>
struct SaveMapRequest_
{
  typedef SaveMapRequest_<ContainerAllocator> Type;

  SaveMapRequest_()
    : map_service()
    , map_filename()
    , use_default_thresholds(false)
    , threshold_occupied(0.0)
    , threshold_free(0.0)  {
    }
  SaveMapRequest_(const ContainerAllocator& _alloc)
    : map_service(_alloc)
    , map_filename(_alloc)
    , use_default_thresholds(false)
    , threshold_occupied(0.0)
    , threshold_free(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_service_type;
  _map_service_type map_service;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_filename_type;
  _map_filename_type map_filename;

   typedef uint8_t _use_default_thresholds_type;
  _use_default_thresholds_type use_default_thresholds;

   typedef float _threshold_occupied_type;
  _threshold_occupied_type threshold_occupied;

   typedef float _threshold_free_type;
  _threshold_free_type threshold_free;





  typedef boost::shared_ptr< ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SaveMapRequest_

typedef ::multimap_server_msgs::SaveMapRequest_<std::allocator<void> > SaveMapRequest;

typedef boost::shared_ptr< ::multimap_server_msgs::SaveMapRequest > SaveMapRequestPtr;
typedef boost::shared_ptr< ::multimap_server_msgs::SaveMapRequest const> SaveMapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator1> & lhs, const ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator2> & rhs)
{
  return lhs.map_service == rhs.map_service &&
    lhs.map_filename == rhs.map_filename &&
    lhs.use_default_thresholds == rhs.use_default_thresholds &&
    lhs.threshold_occupied == rhs.threshold_occupied &&
    lhs.threshold_free == rhs.threshold_free;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator1> & lhs, const ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multimap_server_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ebd6613153c831dbee1815192e8a95a4";
  }

  static const char* value(const ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xebd6613153c831dbULL;
  static const uint64_t static_value2 = 0xee1815192e8a95a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multimap_server_msgs/SaveMapRequest";
  }

  static const char* value(const ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string map_service\n"
"string map_filename\n"
"bool use_default_thresholds\n"
"float32 threshold_occupied\n"
"float32 threshold_free\n"
;
  }

  static const char* value(const ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map_service);
      stream.next(m.map_filename);
      stream.next(m.use_default_thresholds);
      stream.next(m.threshold_occupied);
      stream.next(m.threshold_free);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaveMapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multimap_server_msgs::SaveMapRequest_<ContainerAllocator>& v)
  {
    s << indent << "map_service: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map_service);
    s << indent << "map_filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map_filename);
    s << indent << "use_default_thresholds: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_default_thresholds);
    s << indent << "threshold_occupied: ";
    Printer<float>::stream(s, indent + "  ", v.threshold_occupied);
    s << indent << "threshold_free: ";
    Printer<float>::stream(s, indent + "  ", v.threshold_free);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTIMAP_SERVER_MSGS_MESSAGE_SAVEMAPREQUEST_H
