// Generated by gencpp from file multimap_server_msgs/Environments.msg
// DO NOT EDIT!


#ifndef MULTIMAP_SERVER_MSGS_MESSAGE_ENVIRONMENTS_H
#define MULTIMAP_SERVER_MSGS_MESSAGE_ENVIRONMENTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <multimap_server_msgs/Environment.h>

namespace multimap_server_msgs
{
template <class ContainerAllocator>
struct Environments_
{
  typedef Environments_<ContainerAllocator> Type;

  Environments_()
    : environments()  {
    }
  Environments_(const ContainerAllocator& _alloc)
    : environments(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::multimap_server_msgs::Environment_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::multimap_server_msgs::Environment_<ContainerAllocator> >::other >  _environments_type;
  _environments_type environments;





  typedef boost::shared_ptr< ::multimap_server_msgs::Environments_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multimap_server_msgs::Environments_<ContainerAllocator> const> ConstPtr;

}; // struct Environments_

typedef ::multimap_server_msgs::Environments_<std::allocator<void> > Environments;

typedef boost::shared_ptr< ::multimap_server_msgs::Environments > EnvironmentsPtr;
typedef boost::shared_ptr< ::multimap_server_msgs::Environments const> EnvironmentsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multimap_server_msgs::Environments_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multimap_server_msgs::Environments_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multimap_server_msgs::Environments_<ContainerAllocator1> & lhs, const ::multimap_server_msgs::Environments_<ContainerAllocator2> & rhs)
{
  return lhs.environments == rhs.environments;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multimap_server_msgs::Environments_<ContainerAllocator1> & lhs, const ::multimap_server_msgs::Environments_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multimap_server_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::multimap_server_msgs::Environments_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multimap_server_msgs::Environments_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multimap_server_msgs::Environments_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multimap_server_msgs::Environments_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multimap_server_msgs::Environments_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multimap_server_msgs::Environments_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multimap_server_msgs::Environments_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a38a933443cfbee1aab1953a7c63dd5d";
  }

  static const char* value(const ::multimap_server_msgs::Environments_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa38a933443cfbee1ULL;
  static const uint64_t static_value2 = 0xaab1953a7c63dd5dULL;
};

template<class ContainerAllocator>
struct DataType< ::multimap_server_msgs::Environments_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multimap_server_msgs/Environments";
  }

  static const char* value(const ::multimap_server_msgs::Environments_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multimap_server_msgs::Environments_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Environment[] environments\n"
"\n"
"================================================================================\n"
"MSG: multimap_server_msgs/Environment\n"
"string name\n"
"string global_frame\n"
"string[] map_name\n"
;
  }

  static const char* value(const ::multimap_server_msgs::Environments_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multimap_server_msgs::Environments_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.environments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Environments_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multimap_server_msgs::Environments_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multimap_server_msgs::Environments_<ContainerAllocator>& v)
  {
    s << indent << "environments[]" << std::endl;
    for (size_t i = 0; i < v.environments.size(); ++i)
    {
      s << indent << "  environments[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::multimap_server_msgs::Environment_<ContainerAllocator> >::stream(s, indent + "    ", v.environments[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTIMAP_SERVER_MSGS_MESSAGE_ENVIRONMENTS_H
