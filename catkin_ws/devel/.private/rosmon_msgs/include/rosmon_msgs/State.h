// Generated by gencpp from file rosmon_msgs/State.msg
// DO NOT EDIT!


#ifndef ROSMON_MSGS_MESSAGE_STATE_H
#define ROSMON_MSGS_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <rosmon_msgs/NodeState.h>

namespace rosmon_msgs
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : header()
    , nodes()  {
    }
  State_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , nodes(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::rosmon_msgs::NodeState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rosmon_msgs::NodeState_<ContainerAllocator> >::other >  _nodes_type;
  _nodes_type nodes;





  typedef boost::shared_ptr< ::rosmon_msgs::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosmon_msgs::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::rosmon_msgs::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::rosmon_msgs::State > StatePtr;
typedef boost::shared_ptr< ::rosmon_msgs::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosmon_msgs::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosmon_msgs::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosmon_msgs::State_<ContainerAllocator1> & lhs, const ::rosmon_msgs::State_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.nodes == rhs.nodes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosmon_msgs::State_<ContainerAllocator1> & lhs, const ::rosmon_msgs::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosmon_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosmon_msgs::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosmon_msgs::State_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosmon_msgs::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosmon_msgs::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosmon_msgs::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosmon_msgs::State_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosmon_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93fe347b2ffed78bbacee05fd2655b2e";
  }

  static const char* value(const ::rosmon_msgs::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93fe347b2ffed78bULL;
  static const uint64_t static_value2 = 0xbacee05fd2655b2eULL;
};

template<class ContainerAllocator>
struct DataType< ::rosmon_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosmon_msgs/State";
  }

  static const char* value(const ::rosmon_msgs::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosmon_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"NodeState[] nodes\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: rosmon_msgs/NodeState\n"
"uint8 IDLE = 0     # Node was manually stopped\n"
"uint8 RUNNING = 1  # Node is running\n"
"uint8 CRASHED = 2  # Node has crashed (i.e. exited with state != 0)\n"
"uint8 WAITING = 3  # Node is waiting for automatic restart\n"
"\n"
"# ROS node name\n"
"string name\n"
"\n"
"# ROS node namespace\n"
"string ns\n"
"\n"
"# Node state (see above)\n"
"uint8 state\n"
"\n"
"# How many times has this node been automatically restarted?\n"
"uint32 restart_count\n"
"\n"
"# Estimate of the CPU load in userspace of this node\n"
"# Note that this is relative to one CPU core. On an 8-core machine, this can\n"
"# be 8.0.\n"
"float32 user_load\n"
"\n"
"# Estime of the CPU load in kernelspace of this node\n"
"float32 system_load\n"
"\n"
"# How much physical memory is used by the process?\n"
"# Value is given in bytes.\n"
"uint64 memory\n"
;
  }

  static const char* value(const ::rosmon_msgs::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosmon_msgs::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.nodes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosmon_msgs::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosmon_msgs::State_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "nodes[]" << std::endl;
    for (size_t i = 0; i < v.nodes.size(); ++i)
    {
      s << indent << "  nodes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rosmon_msgs::NodeState_<ContainerAllocator> >::stream(s, indent + "    ", v.nodes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSMON_MSGS_MESSAGE_STATE_H
