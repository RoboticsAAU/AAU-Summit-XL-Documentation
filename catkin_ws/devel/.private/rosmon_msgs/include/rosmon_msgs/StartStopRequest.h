// Generated by gencpp from file rosmon_msgs/StartStopRequest.msg
// DO NOT EDIT!


#ifndef ROSMON_MSGS_MESSAGE_STARTSTOPREQUEST_H
#define ROSMON_MSGS_MESSAGE_STARTSTOPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosmon_msgs
{
template <class ContainerAllocator>
struct StartStopRequest_
{
  typedef StartStopRequest_<ContainerAllocator> Type;

  StartStopRequest_()
    : node()
    , ns()
    , action(0)  {
    }
  StartStopRequest_(const ContainerAllocator& _alloc)
    : node(_alloc)
    , ns(_alloc)
    , action(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_type;
  _node_type node;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ns_type;
  _ns_type ns;

   typedef uint8_t _action_type;
  _action_type action;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(RESTART)
  #undef RESTART
#endif

  enum {
    START = 1u,
    STOP = 2u,
    RESTART = 3u,
  };


  typedef boost::shared_ptr< ::rosmon_msgs::StartStopRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosmon_msgs::StartStopRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StartStopRequest_

typedef ::rosmon_msgs::StartStopRequest_<std::allocator<void> > StartStopRequest;

typedef boost::shared_ptr< ::rosmon_msgs::StartStopRequest > StartStopRequestPtr;
typedef boost::shared_ptr< ::rosmon_msgs::StartStopRequest const> StartStopRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosmon_msgs::StartStopRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosmon_msgs::StartStopRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosmon_msgs::StartStopRequest_<ContainerAllocator1> & lhs, const ::rosmon_msgs::StartStopRequest_<ContainerAllocator2> & rhs)
{
  return lhs.node == rhs.node &&
    lhs.ns == rhs.ns &&
    lhs.action == rhs.action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosmon_msgs::StartStopRequest_<ContainerAllocator1> & lhs, const ::rosmon_msgs::StartStopRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosmon_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosmon_msgs::StartStopRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosmon_msgs::StartStopRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosmon_msgs::StartStopRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosmon_msgs::StartStopRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosmon_msgs::StartStopRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosmon_msgs::StartStopRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosmon_msgs::StartStopRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a95e7883b3762847035c73ffc86de3ea";
  }

  static const char* value(const ::rosmon_msgs::StartStopRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa95e7883b3762847ULL;
  static const uint64_t static_value2 = 0x035c73ffc86de3eaULL;
};

template<class ContainerAllocator>
struct DataType< ::rosmon_msgs::StartStopRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosmon_msgs/StartStopRequest";
  }

  static const char* value(const ::rosmon_msgs::StartStopRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosmon_msgs::StartStopRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 START = 1\n"
"uint8 STOP = 2\n"
"uint8 RESTART = 3\n"
"\n"
"string node     # ROS node name\n"
"string ns       # ROS node namespace\n"
"uint8 action\n"
;
  }

  static const char* value(const ::rosmon_msgs::StartStopRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosmon_msgs::StartStopRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node);
      stream.next(m.ns);
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartStopRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosmon_msgs::StartStopRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosmon_msgs::StartStopRequest_<ContainerAllocator>& v)
  {
    s << indent << "node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node);
    s << indent << "ns: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ns);
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSMON_MSGS_MESSAGE_STARTSTOPREQUEST_H
