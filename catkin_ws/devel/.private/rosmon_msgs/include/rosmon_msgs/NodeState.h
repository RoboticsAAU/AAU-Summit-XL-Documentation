// Generated by gencpp from file rosmon_msgs/NodeState.msg
// DO NOT EDIT!


#ifndef ROSMON_MSGS_MESSAGE_NODESTATE_H
#define ROSMON_MSGS_MESSAGE_NODESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosmon_msgs
{
template <class ContainerAllocator>
struct NodeState_
{
  typedef NodeState_<ContainerAllocator> Type;

  NodeState_()
    : name()
    , ns()
    , state(0)
    , restart_count(0)
    , user_load(0.0)
    , system_load(0.0)
    , memory(0)  {
    }
  NodeState_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , ns(_alloc)
    , state(0)
    , restart_count(0)
    , user_load(0.0)
    , system_load(0.0)
    , memory(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ns_type;
  _ns_type ns;

   typedef uint8_t _state_type;
  _state_type state;

   typedef uint32_t _restart_count_type;
  _restart_count_type restart_count;

   typedef float _user_load_type;
  _user_load_type user_load;

   typedef float _system_load_type;
  _system_load_type system_load;

   typedef uint64_t _memory_type;
  _memory_type memory;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(IDLE)
  #undef IDLE
#endif
#if defined(_WIN32) && defined(RUNNING)
  #undef RUNNING
#endif
#if defined(_WIN32) && defined(CRASHED)
  #undef CRASHED
#endif
#if defined(_WIN32) && defined(WAITING)
  #undef WAITING
#endif

  enum {
    IDLE = 0u,
    RUNNING = 1u,
    CRASHED = 2u,
    WAITING = 3u,
  };


  typedef boost::shared_ptr< ::rosmon_msgs::NodeState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosmon_msgs::NodeState_<ContainerAllocator> const> ConstPtr;

}; // struct NodeState_

typedef ::rosmon_msgs::NodeState_<std::allocator<void> > NodeState;

typedef boost::shared_ptr< ::rosmon_msgs::NodeState > NodeStatePtr;
typedef boost::shared_ptr< ::rosmon_msgs::NodeState const> NodeStateConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosmon_msgs::NodeState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosmon_msgs::NodeState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosmon_msgs::NodeState_<ContainerAllocator1> & lhs, const ::rosmon_msgs::NodeState_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.ns == rhs.ns &&
    lhs.state == rhs.state &&
    lhs.restart_count == rhs.restart_count &&
    lhs.user_load == rhs.user_load &&
    lhs.system_load == rhs.system_load &&
    lhs.memory == rhs.memory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosmon_msgs::NodeState_<ContainerAllocator1> & lhs, const ::rosmon_msgs::NodeState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosmon_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosmon_msgs::NodeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosmon_msgs::NodeState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosmon_msgs::NodeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosmon_msgs::NodeState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosmon_msgs::NodeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosmon_msgs::NodeState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosmon_msgs::NodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87292cdbe5a500a95e32714adf10e6dd";
  }

  static const char* value(const ::rosmon_msgs::NodeState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87292cdbe5a500a9ULL;
  static const uint64_t static_value2 = 0x5e32714adf10e6ddULL;
};

template<class ContainerAllocator>
struct DataType< ::rosmon_msgs::NodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosmon_msgs/NodeState";
  }

  static const char* value(const ::rosmon_msgs::NodeState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosmon_msgs::NodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 IDLE = 0     # Node was manually stopped\n"
"uint8 RUNNING = 1  # Node is running\n"
"uint8 CRASHED = 2  # Node has crashed (i.e. exited with state != 0)\n"
"uint8 WAITING = 3  # Node is waiting for automatic restart\n"
"\n"
"# ROS node name\n"
"string name\n"
"\n"
"# ROS node namespace\n"
"string ns\n"
"\n"
"# Node state (see above)\n"
"uint8 state\n"
"\n"
"# How many times has this node been automatically restarted?\n"
"uint32 restart_count\n"
"\n"
"# Estimate of the CPU load in userspace of this node\n"
"# Note that this is relative to one CPU core. On an 8-core machine, this can\n"
"# be 8.0.\n"
"float32 user_load\n"
"\n"
"# Estime of the CPU load in kernelspace of this node\n"
"float32 system_load\n"
"\n"
"# How much physical memory is used by the process?\n"
"# Value is given in bytes.\n"
"uint64 memory\n"
;
  }

  static const char* value(const ::rosmon_msgs::NodeState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosmon_msgs::NodeState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.ns);
      stream.next(m.state);
      stream.next(m.restart_count);
      stream.next(m.user_load);
      stream.next(m.system_load);
      stream.next(m.memory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NodeState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosmon_msgs::NodeState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosmon_msgs::NodeState_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "ns: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ns);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "restart_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.restart_count);
    s << indent << "user_load: ";
    Printer<float>::stream(s, indent + "  ", v.user_load);
    s << indent << "system_load: ";
    Printer<float>::stream(s, indent + "  ", v.system_load);
    s << indent << "memory: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.memory);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSMON_MSGS_MESSAGE_NODESTATE_H
