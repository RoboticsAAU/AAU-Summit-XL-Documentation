// Generated by gencpp from file robotnik_base_hw_sim/PickStates.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_BASE_HW_SIM_MESSAGE_PICKSTATES_H
#define ROBOTNIK_BASE_HW_SIM_MESSAGE_PICKSTATES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_base_hw_sim/PickState.h>

namespace robotnik_base_hw_sim
{
template <class ContainerAllocator>
struct PickStates_
{
  typedef PickStates_<ContainerAllocator> Type;

  PickStates_()
    : picks()  {
    }
  PickStates_(const ContainerAllocator& _alloc)
    : picks(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::robotnik_base_hw_sim::PickState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robotnik_base_hw_sim::PickState_<ContainerAllocator> >::other >  _picks_type;
  _picks_type picks;





  typedef boost::shared_ptr< ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> const> ConstPtr;

}; // struct PickStates_

typedef ::robotnik_base_hw_sim::PickStates_<std::allocator<void> > PickStates;

typedef boost::shared_ptr< ::robotnik_base_hw_sim::PickStates > PickStatesPtr;
typedef boost::shared_ptr< ::robotnik_base_hw_sim::PickStates const> PickStatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_base_hw_sim::PickStates_<ContainerAllocator1> & lhs, const ::robotnik_base_hw_sim::PickStates_<ContainerAllocator2> & rhs)
{
  return lhs.picks == rhs.picks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_base_hw_sim::PickStates_<ContainerAllocator1> & lhs, const ::robotnik_base_hw_sim::PickStates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_base_hw_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5959bc2f0ba4465d7d86c50b3f3f894";
  }

  static const char* value(const ::robotnik_base_hw_sim::PickStates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5959bc2f0ba4465ULL;
  static const uint64_t static_value2 = 0xd7d86c50b3f3f894ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_base_hw_sim/PickStates";
  }

  static const char* value(const ::robotnik_base_hw_sim::PickStates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# List of current picks\n"
"PickState[] picks\n"
"================================================================================\n"
"MSG: robotnik_base_hw_sim/PickState\n"
"string id\n"
"string robot_link\n"
"string object_link\n"
;
  }

  static const char* value(const ::robotnik_base_hw_sim::PickStates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.picks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PickStates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_base_hw_sim::PickStates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_base_hw_sim::PickStates_<ContainerAllocator>& v)
  {
    s << indent << "picks[]" << std::endl;
    for (size_t i = 0; i < v.picks.size(); ++i)
    {
      s << indent << "  picks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robotnik_base_hw_sim::PickState_<ContainerAllocator> >::stream(s, indent + "    ", v.picks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_BASE_HW_SIM_MESSAGE_PICKSTATES_H
