// Generated by gencpp from file robotnik_base_hw_sim/SimplePickRequest.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_BASE_HW_SIM_MESSAGE_SIMPLEPICKREQUEST_H
#define ROBOTNIK_BASE_HW_SIM_MESSAGE_SIMPLEPICKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_base_hw_sim
{
template <class ContainerAllocator>
struct SimplePickRequest_
{
  typedef SimplePickRequest_<ContainerAllocator> Type;

  SimplePickRequest_()
    : robot_model()  {
    }
  SimplePickRequest_(const ContainerAllocator& _alloc)
    : robot_model(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_model_type;
  _robot_model_type robot_model;





  typedef boost::shared_ptr< ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SimplePickRequest_

typedef ::robotnik_base_hw_sim::SimplePickRequest_<std::allocator<void> > SimplePickRequest;

typedef boost::shared_ptr< ::robotnik_base_hw_sim::SimplePickRequest > SimplePickRequestPtr;
typedef boost::shared_ptr< ::robotnik_base_hw_sim::SimplePickRequest const> SimplePickRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator1> & lhs, const ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator2> & rhs)
{
  return lhs.robot_model == rhs.robot_model;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator1> & lhs, const ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_base_hw_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc26dc9732c3c9b50ff2fc8e348c7543";
  }

  static const char* value(const ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc26dc9732c3c9b5ULL;
  static const uint64_t static_value2 = 0x0ff2fc8e348c7543ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_base_hw_sim/SimplePickRequest";
  }

  static const char* value(const ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Picks closes object\n"
"string robot_model\n"
;
  }

  static const char* value(const ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_model);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimplePickRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_base_hw_sim::SimplePickRequest_<ContainerAllocator>& v)
  {
    s << indent << "robot_model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_model);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_BASE_HW_SIM_MESSAGE_SIMPLEPICKREQUEST_H
