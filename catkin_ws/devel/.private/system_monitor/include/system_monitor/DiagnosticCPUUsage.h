// Generated by gencpp from file system_monitor/DiagnosticCPUUsage.msg
// DO NOT EDIT!


#ifndef SYSTEM_MONITOR_MESSAGE_DIAGNOSTICCPUUSAGE_H
#define SYSTEM_MONITOR_MESSAGE_DIAGNOSTICCPUUSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <system_monitor/CPUUsageStatus.h>

namespace system_monitor
{
template <class ContainerAllocator>
struct DiagnosticCPUUsage_
{
  typedef DiagnosticCPUUsage_<ContainerAllocator> Type;

  DiagnosticCPUUsage_()
    : name()
    , message()
    , hardware_id()
    , status()  {
    }
  DiagnosticCPUUsage_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , message(_alloc)
    , hardware_id(_alloc)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hardware_id_type;
  _hardware_id_type hardware_id;

   typedef  ::system_monitor::CPUUsageStatus_<ContainerAllocator>  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> const> ConstPtr;

}; // struct DiagnosticCPUUsage_

typedef ::system_monitor::DiagnosticCPUUsage_<std::allocator<void> > DiagnosticCPUUsage;

typedef boost::shared_ptr< ::system_monitor::DiagnosticCPUUsage > DiagnosticCPUUsagePtr;
typedef boost::shared_ptr< ::system_monitor::DiagnosticCPUUsage const> DiagnosticCPUUsageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator1> & lhs, const ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.message == rhs.message &&
    lhs.hardware_id == rhs.hardware_id &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator1> & lhs, const ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace system_monitor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "612aee1cee68c976c5b1d1ecf7006c25";
  }

  static const char* value(const ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x612aee1cee68c976ULL;
  static const uint64_t static_value2 = 0xc5b1d1ecf7006c25ULL;
};

template<class ContainerAllocator>
struct DataType< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "system_monitor/DiagnosticCPUUsage";
  }

  static const char* value(const ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"# Possible values for message: 'OK', 'Warning','Error'\n"
"string message\n"
"string hardware_id\n"
"system_monitor/CPUUsageStatus status\n"
"\n"
"================================================================================\n"
"MSG: system_monitor/CPUUsageStatus\n"
"string status\n"
"float32 time\n"
"string load_status\n"
"#Load average in %\n"
"float32 load_avg1\n"
"float32 load_avg5\n"
"float32 load_avg15\n"
"system_monitor/CoreUsage[] cores\n"
"\n"
"================================================================================\n"
"MSG: system_monitor/CoreUsage\n"
"int8 id\n"
"string status\n"
"#Speed of the core in MHz\n"
"float32 speed\n"
"# % of the core used by user/system/...\n"
"float32 user\n"
"float32 nice\n"
"float32 system\n"
"float32 idle\n"
;
  }

  static const char* value(const ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.message);
      stream.next(m.hardware_id);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DiagnosticCPUUsage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "hardware_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hardware_id);
    s << indent << "status: ";
    s << std::endl;
    Printer< ::system_monitor::CPUUsageStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYSTEM_MONITOR_MESSAGE_DIAGNOSTICCPUUSAGE_H
