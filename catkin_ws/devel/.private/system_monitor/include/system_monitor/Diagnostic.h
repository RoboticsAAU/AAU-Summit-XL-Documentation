// Generated by gencpp from file system_monitor/Diagnostic.msg
// DO NOT EDIT!


#ifndef SYSTEM_MONITOR_MESSAGE_DIAGNOSTIC_H
#define SYSTEM_MONITOR_MESSAGE_DIAGNOSTIC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <system_monitor/DiagnosticCPUUsage.h>
#include <system_monitor/DiagnosticCPUTemperature.h>
#include <system_monitor/DiagnosticMEM.h>
#include <system_monitor/DiagnosticNET.h>
#include <system_monitor/DiagnosticHDD.h>

namespace system_monitor
{
template <class ContainerAllocator>
struct Diagnostic_
{
  typedef Diagnostic_<ContainerAllocator> Type;

  Diagnostic_()
    : diagCpuUsage()
    , diagCpuTemp()
    , diagMem()
    , diagNet()
    , diagHdd()  {
    }
  Diagnostic_(const ContainerAllocator& _alloc)
    : diagCpuUsage(_alloc)
    , diagCpuTemp(_alloc)
    , diagMem(_alloc)
    , diagNet(_alloc)
    , diagHdd(_alloc)  {
  (void)_alloc;
    }



   typedef  ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator>  _diagCpuUsage_type;
  _diagCpuUsage_type diagCpuUsage;

   typedef  ::system_monitor::DiagnosticCPUTemperature_<ContainerAllocator>  _diagCpuTemp_type;
  _diagCpuTemp_type diagCpuTemp;

   typedef  ::system_monitor::DiagnosticMEM_<ContainerAllocator>  _diagMem_type;
  _diagMem_type diagMem;

   typedef  ::system_monitor::DiagnosticNET_<ContainerAllocator>  _diagNet_type;
  _diagNet_type diagNet;

   typedef  ::system_monitor::DiagnosticHDD_<ContainerAllocator>  _diagHdd_type;
  _diagHdd_type diagHdd;





  typedef boost::shared_ptr< ::system_monitor::Diagnostic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::system_monitor::Diagnostic_<ContainerAllocator> const> ConstPtr;

}; // struct Diagnostic_

typedef ::system_monitor::Diagnostic_<std::allocator<void> > Diagnostic;

typedef boost::shared_ptr< ::system_monitor::Diagnostic > DiagnosticPtr;
typedef boost::shared_ptr< ::system_monitor::Diagnostic const> DiagnosticConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::system_monitor::Diagnostic_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::system_monitor::Diagnostic_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::system_monitor::Diagnostic_<ContainerAllocator1> & lhs, const ::system_monitor::Diagnostic_<ContainerAllocator2> & rhs)
{
  return lhs.diagCpuUsage == rhs.diagCpuUsage &&
    lhs.diagCpuTemp == rhs.diagCpuTemp &&
    lhs.diagMem == rhs.diagMem &&
    lhs.diagNet == rhs.diagNet &&
    lhs.diagHdd == rhs.diagHdd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::system_monitor::Diagnostic_<ContainerAllocator1> & lhs, const ::system_monitor::Diagnostic_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace system_monitor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::system_monitor::Diagnostic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::system_monitor::Diagnostic_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_monitor::Diagnostic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_monitor::Diagnostic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_monitor::Diagnostic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_monitor::Diagnostic_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::system_monitor::Diagnostic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "588f02ed6122974a83abb40dde682102";
  }

  static const char* value(const ::system_monitor::Diagnostic_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x588f02ed6122974aULL;
  static const uint64_t static_value2 = 0x83abb40dde682102ULL;
};

template<class ContainerAllocator>
struct DataType< ::system_monitor::Diagnostic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "system_monitor/Diagnostic";
  }

  static const char* value(const ::system_monitor::Diagnostic_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::system_monitor::Diagnostic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "system_monitor/DiagnosticCPUUsage diagCpuUsage\n"
"system_monitor/DiagnosticCPUTemperature diagCpuTemp\n"
"system_monitor/DiagnosticMEM diagMem\n"
"system_monitor/DiagnosticNET diagNet\n"
"system_monitor/DiagnosticHDD diagHdd\n"
"\n"
"================================================================================\n"
"MSG: system_monitor/DiagnosticCPUUsage\n"
"string name\n"
"# Possible values for message: 'OK', 'Warning','Error'\n"
"string message\n"
"string hardware_id\n"
"system_monitor/CPUUsageStatus status\n"
"\n"
"================================================================================\n"
"MSG: system_monitor/CPUUsageStatus\n"
"string status\n"
"float32 time\n"
"string load_status\n"
"#Load average in %\n"
"float32 load_avg1\n"
"float32 load_avg5\n"
"float32 load_avg15\n"
"system_monitor/CoreUsage[] cores\n"
"\n"
"================================================================================\n"
"MSG: system_monitor/CoreUsage\n"
"int8 id\n"
"string status\n"
"#Speed of the core in MHz\n"
"float32 speed\n"
"# % of the core used by user/system/...\n"
"float32 user\n"
"float32 nice\n"
"float32 system\n"
"float32 idle\n"
"================================================================================\n"
"MSG: system_monitor/DiagnosticCPUTemperature\n"
"string name\n"
"# Possible values for message: 'OK', 'Warning','Error'\n"
"string message\n"
"string hardware_id\n"
"system_monitor/CPUTemperatureStatus status\n"
"\n"
"================================================================================\n"
"MSG: system_monitor/CPUTemperatureStatus\n"
"string status\n"
"float32 time\n"
"system_monitor/CoreTemp[] cores\n"
"\n"
"================================================================================\n"
"MSG: system_monitor/CoreTemp\n"
"int8 id\n"
"#Temperature of the core in DegC\n"
"float32 temp\n"
"================================================================================\n"
"MSG: system_monitor/DiagnosticMEM\n"
"string name\n"
"# Possible values for message: 'OK', 'Warning','Error'\n"
"string message\n"
"string hardware_id\n"
"system_monitor/MEMStatus status\n"
"================================================================================\n"
"MSG: system_monitor/MEMStatus\n"
"float32 time\n"
"system_monitor/Memory[] memories\n"
"#Memory space in M\n"
"int32 totalM\n"
"int32 usedM\n"
"int32 freeM\n"
"================================================================================\n"
"MSG: system_monitor/Memory\n"
"string name\n"
"#Memory space in M\n"
"#Physical w/o buffers total is zero\n"
"int32 total\n"
"int32 used\n"
"int32 free\n"
"================================================================================\n"
"MSG: system_monitor/DiagnosticNET\n"
"string name\n"
"string message\n"
"string hardware_id\n"
"system_monitor/NetStatus status\n"
"\n"
"================================================================================\n"
"MSG: system_monitor/NetStatus\n"
"string status\n"
"float32 time\n"
"system_monitor/Interface[] interfaces\n"
"================================================================================\n"
"MSG: system_monitor/Interface\n"
"string name\n"
"string state\n"
"#input/output speed in MB/s\n"
"float32 input\n"
"float32 output\n"
"int32 mtu\n"
"#Data received/transmitted in MB\n"
"float32 received\n"
"float32 transmitted\n"
"int32 collisions\n"
"int32 rxError\n"
"int32 txError\n"
"\n"
"================================================================================\n"
"MSG: system_monitor/DiagnosticHDD\n"
"string name\n"
"# Possible values for message: 'OK', 'Warning','Error'\n"
"string message\n"
"string hardware_id\n"
"system_monitor/HDDStatus status\n"
"\n"
"================================================================================\n"
"MSG: system_monitor/HDDStatus\n"
"string status\n"
"float32 time\n"
"string space_reading\n"
"system_monitor/Disk[] disks\n"
"\n"
"================================================================================\n"
"MSG: system_monitor/Disk\n"
"int8 id\n"
"string name\n"
"string status\n"
"string mount_point\n"
"#Size of the disk in G\n"
"float32 size\n"
"float32 available\n"
"#% of total size used\n"
"float32 use\n"
;
  }

  static const char* value(const ::system_monitor::Diagnostic_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::system_monitor::Diagnostic_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.diagCpuUsage);
      stream.next(m.diagCpuTemp);
      stream.next(m.diagMem);
      stream.next(m.diagNet);
      stream.next(m.diagHdd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Diagnostic_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::system_monitor::Diagnostic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::system_monitor::Diagnostic_<ContainerAllocator>& v)
  {
    s << indent << "diagCpuUsage: ";
    s << std::endl;
    Printer< ::system_monitor::DiagnosticCPUUsage_<ContainerAllocator> >::stream(s, indent + "  ", v.diagCpuUsage);
    s << indent << "diagCpuTemp: ";
    s << std::endl;
    Printer< ::system_monitor::DiagnosticCPUTemperature_<ContainerAllocator> >::stream(s, indent + "  ", v.diagCpuTemp);
    s << indent << "diagMem: ";
    s << std::endl;
    Printer< ::system_monitor::DiagnosticMEM_<ContainerAllocator> >::stream(s, indent + "  ", v.diagMem);
    s << indent << "diagNet: ";
    s << std::endl;
    Printer< ::system_monitor::DiagnosticNET_<ContainerAllocator> >::stream(s, indent + "  ", v.diagNet);
    s << indent << "diagHdd: ";
    s << std::endl;
    Printer< ::system_monitor::DiagnosticHDD_<ContainerAllocator> >::stream(s, indent + "  ", v.diagHdd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYSTEM_MONITOR_MESSAGE_DIAGNOSTIC_H
