// Generated by gencpp from file system_monitor/Interface.msg
// DO NOT EDIT!


#ifndef SYSTEM_MONITOR_MESSAGE_INTERFACE_H
#define SYSTEM_MONITOR_MESSAGE_INTERFACE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace system_monitor
{
template <class ContainerAllocator>
struct Interface_
{
  typedef Interface_<ContainerAllocator> Type;

  Interface_()
    : name()
    , state()
    , input(0.0)
    , output(0.0)
    , mtu(0)
    , received(0.0)
    , transmitted(0.0)
    , collisions(0)
    , rxError(0)
    , txError(0)  {
    }
  Interface_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , state(_alloc)
    , input(0.0)
    , output(0.0)
    , mtu(0)
    , received(0.0)
    , transmitted(0.0)
    , collisions(0)
    , rxError(0)
    , txError(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef float _input_type;
  _input_type input;

   typedef float _output_type;
  _output_type output;

   typedef int32_t _mtu_type;
  _mtu_type mtu;

   typedef float _received_type;
  _received_type received;

   typedef float _transmitted_type;
  _transmitted_type transmitted;

   typedef int32_t _collisions_type;
  _collisions_type collisions;

   typedef int32_t _rxError_type;
  _rxError_type rxError;

   typedef int32_t _txError_type;
  _txError_type txError;





  typedef boost::shared_ptr< ::system_monitor::Interface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::system_monitor::Interface_<ContainerAllocator> const> ConstPtr;

}; // struct Interface_

typedef ::system_monitor::Interface_<std::allocator<void> > Interface;

typedef boost::shared_ptr< ::system_monitor::Interface > InterfacePtr;
typedef boost::shared_ptr< ::system_monitor::Interface const> InterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::system_monitor::Interface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::system_monitor::Interface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::system_monitor::Interface_<ContainerAllocator1> & lhs, const ::system_monitor::Interface_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.state == rhs.state &&
    lhs.input == rhs.input &&
    lhs.output == rhs.output &&
    lhs.mtu == rhs.mtu &&
    lhs.received == rhs.received &&
    lhs.transmitted == rhs.transmitted &&
    lhs.collisions == rhs.collisions &&
    lhs.rxError == rhs.rxError &&
    lhs.txError == rhs.txError;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::system_monitor::Interface_<ContainerAllocator1> & lhs, const ::system_monitor::Interface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace system_monitor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::system_monitor::Interface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::system_monitor::Interface_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_monitor::Interface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_monitor::Interface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_monitor::Interface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_monitor::Interface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::system_monitor::Interface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b547a89cc3995f4c9d69adede1755a6";
  }

  static const char* value(const ::system_monitor::Interface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b547a89cc3995f4ULL;
  static const uint64_t static_value2 = 0xc9d69adede1755a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::system_monitor::Interface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "system_monitor/Interface";
  }

  static const char* value(const ::system_monitor::Interface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::system_monitor::Interface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string state\n"
"#input/output speed in MB/s\n"
"float32 input\n"
"float32 output\n"
"int32 mtu\n"
"#Data received/transmitted in MB\n"
"float32 received\n"
"float32 transmitted\n"
"int32 collisions\n"
"int32 rxError\n"
"int32 txError\n"
;
  }

  static const char* value(const ::system_monitor::Interface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::system_monitor::Interface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.state);
      stream.next(m.input);
      stream.next(m.output);
      stream.next(m.mtu);
      stream.next(m.received);
      stream.next(m.transmitted);
      stream.next(m.collisions);
      stream.next(m.rxError);
      stream.next(m.txError);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Interface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::system_monitor::Interface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::system_monitor::Interface_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "input: ";
    Printer<float>::stream(s, indent + "  ", v.input);
    s << indent << "output: ";
    Printer<float>::stream(s, indent + "  ", v.output);
    s << indent << "mtu: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mtu);
    s << indent << "received: ";
    Printer<float>::stream(s, indent + "  ", v.received);
    s << indent << "transmitted: ";
    Printer<float>::stream(s, indent + "  ", v.transmitted);
    s << indent << "collisions: ";
    Printer<int32_t>::stream(s, indent + "  ", v.collisions);
    s << indent << "rxError: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rxError);
    s << indent << "txError: ";
    Printer<int32_t>::stream(s, indent + "  ", v.txError);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYSTEM_MONITOR_MESSAGE_INTERFACE_H
