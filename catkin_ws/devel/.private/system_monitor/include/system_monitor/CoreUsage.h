// Generated by gencpp from file system_monitor/CoreUsage.msg
// DO NOT EDIT!


#ifndef SYSTEM_MONITOR_MESSAGE_COREUSAGE_H
#define SYSTEM_MONITOR_MESSAGE_COREUSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace system_monitor
{
template <class ContainerAllocator>
struct CoreUsage_
{
  typedef CoreUsage_<ContainerAllocator> Type;

  CoreUsage_()
    : id(0)
    , status()
    , speed(0.0)
    , user(0.0)
    , nice(0.0)
    , system(0.0)
    , idle(0.0)  {
    }
  CoreUsage_(const ContainerAllocator& _alloc)
    : id(0)
    , status(_alloc)
    , speed(0.0)
    , user(0.0)
    , nice(0.0)
    , system(0.0)
    , idle(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _user_type;
  _user_type user;

   typedef float _nice_type;
  _nice_type nice;

   typedef float _system_type;
  _system_type system;

   typedef float _idle_type;
  _idle_type idle;





  typedef boost::shared_ptr< ::system_monitor::CoreUsage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::system_monitor::CoreUsage_<ContainerAllocator> const> ConstPtr;

}; // struct CoreUsage_

typedef ::system_monitor::CoreUsage_<std::allocator<void> > CoreUsage;

typedef boost::shared_ptr< ::system_monitor::CoreUsage > CoreUsagePtr;
typedef boost::shared_ptr< ::system_monitor::CoreUsage const> CoreUsageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::system_monitor::CoreUsage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::system_monitor::CoreUsage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::system_monitor::CoreUsage_<ContainerAllocator1> & lhs, const ::system_monitor::CoreUsage_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.status == rhs.status &&
    lhs.speed == rhs.speed &&
    lhs.user == rhs.user &&
    lhs.nice == rhs.nice &&
    lhs.system == rhs.system &&
    lhs.idle == rhs.idle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::system_monitor::CoreUsage_<ContainerAllocator1> & lhs, const ::system_monitor::CoreUsage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace system_monitor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::system_monitor::CoreUsage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::system_monitor::CoreUsage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_monitor::CoreUsage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_monitor::CoreUsage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_monitor::CoreUsage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_monitor::CoreUsage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::system_monitor::CoreUsage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d2b3978c7b592446e308ddd6c7d1cba";
  }

  static const char* value(const ::system_monitor::CoreUsage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d2b3978c7b59244ULL;
  static const uint64_t static_value2 = 0x6e308ddd6c7d1cbaULL;
};

template<class ContainerAllocator>
struct DataType< ::system_monitor::CoreUsage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "system_monitor/CoreUsage";
  }

  static const char* value(const ::system_monitor::CoreUsage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::system_monitor::CoreUsage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 id\n"
"string status\n"
"#Speed of the core in MHz\n"
"float32 speed\n"
"# % of the core used by user/system/...\n"
"float32 user\n"
"float32 nice\n"
"float32 system\n"
"float32 idle\n"
;
  }

  static const char* value(const ::system_monitor::CoreUsage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::system_monitor::CoreUsage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.status);
      stream.next(m.speed);
      stream.next(m.user);
      stream.next(m.nice);
      stream.next(m.system);
      stream.next(m.idle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CoreUsage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::system_monitor::CoreUsage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::system_monitor::CoreUsage_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "user: ";
    Printer<float>::stream(s, indent + "  ", v.user);
    s << indent << "nice: ";
    Printer<float>::stream(s, indent + "  ", v.nice);
    s << indent << "system: ";
    Printer<float>::stream(s, indent + "  ", v.system);
    s << indent << "idle: ";
    Printer<float>::stream(s, indent + "  ", v.idle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYSTEM_MONITOR_MESSAGE_COREUSAGE_H
