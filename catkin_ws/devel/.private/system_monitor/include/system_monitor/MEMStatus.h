// Generated by gencpp from file system_monitor/MEMStatus.msg
// DO NOT EDIT!


#ifndef SYSTEM_MONITOR_MESSAGE_MEMSTATUS_H
#define SYSTEM_MONITOR_MESSAGE_MEMSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <system_monitor/Memory.h>

namespace system_monitor
{
template <class ContainerAllocator>
struct MEMStatus_
{
  typedef MEMStatus_<ContainerAllocator> Type;

  MEMStatus_()
    : time(0.0)
    , memories()
    , totalM(0)
    , usedM(0)
    , freeM(0)  {
    }
  MEMStatus_(const ContainerAllocator& _alloc)
    : time(0.0)
    , memories(_alloc)
    , totalM(0)
    , usedM(0)
    , freeM(0)  {
  (void)_alloc;
    }



   typedef float _time_type;
  _time_type time;

   typedef std::vector< ::system_monitor::Memory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::system_monitor::Memory_<ContainerAllocator> >::other >  _memories_type;
  _memories_type memories;

   typedef int32_t _totalM_type;
  _totalM_type totalM;

   typedef int32_t _usedM_type;
  _usedM_type usedM;

   typedef int32_t _freeM_type;
  _freeM_type freeM;





  typedef boost::shared_ptr< ::system_monitor::MEMStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::system_monitor::MEMStatus_<ContainerAllocator> const> ConstPtr;

}; // struct MEMStatus_

typedef ::system_monitor::MEMStatus_<std::allocator<void> > MEMStatus;

typedef boost::shared_ptr< ::system_monitor::MEMStatus > MEMStatusPtr;
typedef boost::shared_ptr< ::system_monitor::MEMStatus const> MEMStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::system_monitor::MEMStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::system_monitor::MEMStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::system_monitor::MEMStatus_<ContainerAllocator1> & lhs, const ::system_monitor::MEMStatus_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.memories == rhs.memories &&
    lhs.totalM == rhs.totalM &&
    lhs.usedM == rhs.usedM &&
    lhs.freeM == rhs.freeM;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::system_monitor::MEMStatus_<ContainerAllocator1> & lhs, const ::system_monitor::MEMStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace system_monitor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::system_monitor::MEMStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::system_monitor::MEMStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_monitor::MEMStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_monitor::MEMStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_monitor::MEMStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_monitor::MEMStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::system_monitor::MEMStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87aa3708fd29c92a6112f09fa739ebe9";
  }

  static const char* value(const ::system_monitor::MEMStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87aa3708fd29c92aULL;
  static const uint64_t static_value2 = 0x6112f09fa739ebe9ULL;
};

template<class ContainerAllocator>
struct DataType< ::system_monitor::MEMStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "system_monitor/MEMStatus";
  }

  static const char* value(const ::system_monitor::MEMStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::system_monitor::MEMStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 time\n"
"system_monitor/Memory[] memories\n"
"#Memory space in M\n"
"int32 totalM\n"
"int32 usedM\n"
"int32 freeM\n"
"================================================================================\n"
"MSG: system_monitor/Memory\n"
"string name\n"
"#Memory space in M\n"
"#Physical w/o buffers total is zero\n"
"int32 total\n"
"int32 used\n"
"int32 free\n"
;
  }

  static const char* value(const ::system_monitor::MEMStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::system_monitor::MEMStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.memories);
      stream.next(m.totalM);
      stream.next(m.usedM);
      stream.next(m.freeM);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MEMStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::system_monitor::MEMStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::system_monitor::MEMStatus_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "memories[]" << std::endl;
    for (size_t i = 0; i < v.memories.size(); ++i)
    {
      s << indent << "  memories[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::system_monitor::Memory_<ContainerAllocator> >::stream(s, indent + "    ", v.memories[i]);
    }
    s << indent << "totalM: ";
    Printer<int32_t>::stream(s, indent + "  ", v.totalM);
    s << indent << "usedM: ";
    Printer<int32_t>::stream(s, indent + "  ", v.usedM);
    s << indent << "freeM: ";
    Printer<int32_t>::stream(s, indent + "  ", v.freeM);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYSTEM_MONITOR_MESSAGE_MEMSTATUS_H
