// Generated by gencpp from file system_monitor/CPUUsageStatus.msg
// DO NOT EDIT!


#ifndef SYSTEM_MONITOR_MESSAGE_CPUUSAGESTATUS_H
#define SYSTEM_MONITOR_MESSAGE_CPUUSAGESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <system_monitor/CoreUsage.h>

namespace system_monitor
{
template <class ContainerAllocator>
struct CPUUsageStatus_
{
  typedef CPUUsageStatus_<ContainerAllocator> Type;

  CPUUsageStatus_()
    : status()
    , time(0.0)
    , load_status()
    , load_avg1(0.0)
    , load_avg5(0.0)
    , load_avg15(0.0)
    , cores()  {
    }
  CPUUsageStatus_(const ContainerAllocator& _alloc)
    : status(_alloc)
    , time(0.0)
    , load_status(_alloc)
    , load_avg1(0.0)
    , load_avg5(0.0)
    , load_avg15(0.0)
    , cores(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef float _time_type;
  _time_type time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _load_status_type;
  _load_status_type load_status;

   typedef float _load_avg1_type;
  _load_avg1_type load_avg1;

   typedef float _load_avg5_type;
  _load_avg5_type load_avg5;

   typedef float _load_avg15_type;
  _load_avg15_type load_avg15;

   typedef std::vector< ::system_monitor::CoreUsage_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::system_monitor::CoreUsage_<ContainerAllocator> >::other >  _cores_type;
  _cores_type cores;





  typedef boost::shared_ptr< ::system_monitor::CPUUsageStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::system_monitor::CPUUsageStatus_<ContainerAllocator> const> ConstPtr;

}; // struct CPUUsageStatus_

typedef ::system_monitor::CPUUsageStatus_<std::allocator<void> > CPUUsageStatus;

typedef boost::shared_ptr< ::system_monitor::CPUUsageStatus > CPUUsageStatusPtr;
typedef boost::shared_ptr< ::system_monitor::CPUUsageStatus const> CPUUsageStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::system_monitor::CPUUsageStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::system_monitor::CPUUsageStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::system_monitor::CPUUsageStatus_<ContainerAllocator1> & lhs, const ::system_monitor::CPUUsageStatus_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.time == rhs.time &&
    lhs.load_status == rhs.load_status &&
    lhs.load_avg1 == rhs.load_avg1 &&
    lhs.load_avg5 == rhs.load_avg5 &&
    lhs.load_avg15 == rhs.load_avg15 &&
    lhs.cores == rhs.cores;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::system_monitor::CPUUsageStatus_<ContainerAllocator1> & lhs, const ::system_monitor::CPUUsageStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace system_monitor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::system_monitor::CPUUsageStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::system_monitor::CPUUsageStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_monitor::CPUUsageStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_monitor::CPUUsageStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_monitor::CPUUsageStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_monitor::CPUUsageStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::system_monitor::CPUUsageStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3d0188421c1391749e86c170c349143";
  }

  static const char* value(const ::system_monitor::CPUUsageStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3d0188421c13917ULL;
  static const uint64_t static_value2 = 0x49e86c170c349143ULL;
};

template<class ContainerAllocator>
struct DataType< ::system_monitor::CPUUsageStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "system_monitor/CPUUsageStatus";
  }

  static const char* value(const ::system_monitor::CPUUsageStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::system_monitor::CPUUsageStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string status\n"
"float32 time\n"
"string load_status\n"
"#Load average in %\n"
"float32 load_avg1\n"
"float32 load_avg5\n"
"float32 load_avg15\n"
"system_monitor/CoreUsage[] cores\n"
"\n"
"================================================================================\n"
"MSG: system_monitor/CoreUsage\n"
"int8 id\n"
"string status\n"
"#Speed of the core in MHz\n"
"float32 speed\n"
"# % of the core used by user/system/...\n"
"float32 user\n"
"float32 nice\n"
"float32 system\n"
"float32 idle\n"
;
  }

  static const char* value(const ::system_monitor::CPUUsageStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::system_monitor::CPUUsageStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.time);
      stream.next(m.load_status);
      stream.next(m.load_avg1);
      stream.next(m.load_avg5);
      stream.next(m.load_avg15);
      stream.next(m.cores);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CPUUsageStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::system_monitor::CPUUsageStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::system_monitor::CPUUsageStatus_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "load_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.load_status);
    s << indent << "load_avg1: ";
    Printer<float>::stream(s, indent + "  ", v.load_avg1);
    s << indent << "load_avg5: ";
    Printer<float>::stream(s, indent + "  ", v.load_avg5);
    s << indent << "load_avg15: ";
    Printer<float>::stream(s, indent + "  ", v.load_avg15);
    s << indent << "cores[]" << std::endl;
    for (size_t i = 0; i < v.cores.size(); ++i)
    {
      s << indent << "  cores[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::system_monitor::CoreUsage_<ContainerAllocator> >::stream(s, indent + "    ", v.cores[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYSTEM_MONITOR_MESSAGE_CPUUSAGESTATUS_H
