// Generated by gencpp from file robot_local_control_msgs/NavigationStatus.msg
// DO NOT EDIT!


#ifndef ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_NAVIGATIONSTATUS_H
#define ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_NAVIGATIONSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_local_control_msgs
{
template <class ContainerAllocator>
struct NavigationStatus_
{
  typedef NavigationStatus_<ContainerAllocator> Type;

  NavigationStatus_()
    : type()
    , state()  {
    }
  NavigationStatus_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , state(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NAVIGATION_TYPE_NONE)
  #undef NAVIGATION_TYPE_NONE
#endif
#if defined(_WIN32) && defined(NAVIGATION_TYPE_1)
  #undef NAVIGATION_TYPE_1
#endif
#if defined(_WIN32) && defined(NAVIGATION_TYPE_2)
  #undef NAVIGATION_TYPE_2
#endif
#if defined(_WIN32) && defined(NAVIGATION_TYPE_3)
  #undef NAVIGATION_TYPE_3
#endif
#if defined(_WIN32) && defined(NAVIGATION_STATE_INIT)
  #undef NAVIGATION_STATE_INIT
#endif
#if defined(_WIN32) && defined(NAVIGATION_STATE_STANDBY)
  #undef NAVIGATION_STATE_STANDBY
#endif
#if defined(_WIN32) && defined(NAVIGATION_STATE_READY)
  #undef NAVIGATION_STATE_READY
#endif
#if defined(_WIN32) && defined(NAVIGATION_STATE_EMERGENCY)
  #undef NAVIGATION_STATE_EMERGENCY
#endif
#if defined(_WIN32) && defined(NAVIGATION_STATE_FAILURE)
  #undef NAVIGATION_STATE_FAILURE
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NAVIGATION_TYPE_NONE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NAVIGATION_TYPE_1;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NAVIGATION_TYPE_2;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NAVIGATION_TYPE_3;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NAVIGATION_STATE_INIT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NAVIGATION_STATE_STANDBY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NAVIGATION_STATE_READY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NAVIGATION_STATE_EMERGENCY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NAVIGATION_STATE_FAILURE;

  typedef boost::shared_ptr< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationStatus_

typedef ::robot_local_control_msgs::NavigationStatus_<std::allocator<void> > NavigationStatus;

typedef boost::shared_ptr< ::robot_local_control_msgs::NavigationStatus > NavigationStatusPtr;
typedef boost::shared_ptr< ::robot_local_control_msgs::NavigationStatus const> NavigationStatusConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      NavigationStatus_<ContainerAllocator>::NAVIGATION_TYPE_NONE =
        
          "none"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      NavigationStatus_<ContainerAllocator>::NAVIGATION_TYPE_1 =
        
          "1"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      NavigationStatus_<ContainerAllocator>::NAVIGATION_TYPE_2 =
        
          "2"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      NavigationStatus_<ContainerAllocator>::NAVIGATION_TYPE_3 =
        
          "3"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      NavigationStatus_<ContainerAllocator>::NAVIGATION_STATE_INIT =
        
          "init"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      NavigationStatus_<ContainerAllocator>::NAVIGATION_STATE_STANDBY =
        
          "standby"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      NavigationStatus_<ContainerAllocator>::NAVIGATION_STATE_READY =
        
          "ready"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      NavigationStatus_<ContainerAllocator>::NAVIGATION_STATE_EMERGENCY =
        
          "emergency"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      NavigationStatus_<ContainerAllocator>::NAVIGATION_STATE_FAILURE =
        
          "failure"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_local_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5c9b34f80bcdaf33edc1d8103d13065";
  }

  static const char* value(const ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5c9b34f80bcdaf3ULL;
  static const uint64_t static_value2 = 0x3edc1d8103d13065ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_local_control_msgs/NavigationStatus";
  }

  static const char* value(const ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# type of navigation package/algorithm currently used\n"
"string NAVIGATION_TYPE_NONE=none\n"
"# move_base\n"
"string NAVIGATION_TYPE_1=1\n"
"# purepursuit\n"
"string NAVIGATION_TYPE_2=2\n"
"# Dock\n"
"string NAVIGATION_TYPE_3=3 \n"
"\n"
"# state of the navigation node running\n"
"string NAVIGATION_STATE_INIT=init\n"
"string NAVIGATION_STATE_STANDBY=standby\n"
"string NAVIGATION_STATE_READY=ready\n"
"string NAVIGATION_STATE_EMERGENCY=emergency\n"
"string NAVIGATION_STATE_FAILURE=failure\n"
"\n"
"# Navigation algorithm being used\n"
"string type\n"
"\n"
"# INIT, READY, EMERGENCY, FAILURE\n"
"string state\n"
;
  }

  static const char* value(const ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_NAVIGATIONSTATUS_H
