// Generated by gencpp from file robot_local_control_msgs/Status.msg
// DO NOT EDIT!


#ifndef ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_STATUS_H
#define ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_local_control_msgs/LocalizationStatus.h>
#include <robot_local_control_msgs/NavigationStatus.h>
#include <robot_local_control_msgs/RobotStatus.h>
#include <robot_local_control_msgs/SignalManager.h>

namespace robot_local_control_msgs
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : robot_id()
    , robot_state()
    , control_state()
    , operation_state()
    , localization_status()
    , navigation_status()
    , robot_status()
    , signal_manager()  {
    }
  Status_(const ContainerAllocator& _alloc)
    : robot_id(_alloc)
    , robot_state(_alloc)
    , control_state(_alloc)
    , operation_state(_alloc)
    , localization_status(_alloc)
    , navigation_status(_alloc)
    , robot_status(_alloc)
    , signal_manager(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_id_type;
  _robot_id_type robot_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_state_type;
  _robot_state_type robot_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _control_state_type;
  _control_state_type control_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _operation_state_type;
  _operation_state_type operation_state;

   typedef  ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator>  _localization_status_type;
  _localization_status_type localization_status;

   typedef  ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator>  _navigation_status_type;
  _navigation_status_type navigation_status;

   typedef  ::robot_local_control_msgs::RobotStatus_<ContainerAllocator>  _robot_status_type;
  _robot_status_type robot_status;

   typedef  ::robot_local_control_msgs::SignalManager_<ContainerAllocator>  _signal_manager_type;
  _signal_manager_type signal_manager;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ROBOT_STATE_INIT)
  #undef ROBOT_STATE_INIT
#endif
#if defined(_WIN32) && defined(ROBOT_STATE_STANDBY)
  #undef ROBOT_STATE_STANDBY
#endif
#if defined(_WIN32) && defined(ROBOT_STATE_READY)
  #undef ROBOT_STATE_READY
#endif
#if defined(_WIN32) && defined(ROBOT_STATE_EMERGENCY)
  #undef ROBOT_STATE_EMERGENCY
#endif
#if defined(_WIN32) && defined(ROBOT_STATE_FAILURE)
  #undef ROBOT_STATE_FAILURE
#endif
#if defined(_WIN32) && defined(CONTROL_STATE_UNKNOWN)
  #undef CONTROL_STATE_UNKNOWN
#endif
#if defined(_WIN32) && defined(CONTROL_STATE_AUTO)
  #undef CONTROL_STATE_AUTO
#endif
#if defined(_WIN32) && defined(CONTROL_STATE_MANUAL)
  #undef CONTROL_STATE_MANUAL
#endif
#if defined(_WIN32) && defined(CONTROL_STATE_FOLLOW)
  #undef CONTROL_STATE_FOLLOW
#endif
#if defined(_WIN32) && defined(OPERATION_STATE_IDLE)
  #undef OPERATION_STATE_IDLE
#endif
#if defined(_WIN32) && defined(OPERATION_STATE_CALIBRATION)
  #undef OPERATION_STATE_CALIBRATION
#endif
#if defined(_WIN32) && defined(OPERATION_STATE_MOVING)
  #undef OPERATION_STATE_MOVING
#endif
#if defined(_WIN32) && defined(OPERATION_STATE_ELEVATION_RAISE)
  #undef OPERATION_STATE_ELEVATION_RAISE
#endif
#if defined(_WIN32) && defined(OPERATION_STATE_ELEVATION_LOWER)
  #undef OPERATION_STATE_ELEVATION_LOWER
#endif
#if defined(_WIN32) && defined(OPERATION_STATE_BATTERY_CHARGE)
  #undef OPERATION_STATE_BATTERY_CHARGE
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ROBOT_STATE_INIT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ROBOT_STATE_STANDBY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ROBOT_STATE_READY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ROBOT_STATE_EMERGENCY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ROBOT_STATE_FAILURE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CONTROL_STATE_UNKNOWN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CONTROL_STATE_AUTO;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CONTROL_STATE_MANUAL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CONTROL_STATE_FOLLOW;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OPERATION_STATE_IDLE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OPERATION_STATE_CALIBRATION;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OPERATION_STATE_MOVING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OPERATION_STATE_ELEVATION_RAISE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OPERATION_STATE_ELEVATION_LOWER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OPERATION_STATE_BATTERY_CHARGE;

  typedef boost::shared_ptr< ::robot_local_control_msgs::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_local_control_msgs::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::robot_local_control_msgs::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::robot_local_control_msgs::Status > StatusPtr;
typedef boost::shared_ptr< ::robot_local_control_msgs::Status const> StatusConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::ROBOT_STATE_INIT =
        
          "init"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::ROBOT_STATE_STANDBY =
        
          "standby"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::ROBOT_STATE_READY =
        
          "ready"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::ROBOT_STATE_EMERGENCY =
        
          "emergency"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::ROBOT_STATE_FAILURE =
        
          "failure"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::CONTROL_STATE_UNKNOWN =
        
          "unknown"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::CONTROL_STATE_AUTO =
        
          "auto"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::CONTROL_STATE_MANUAL =
        
          "manual"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::CONTROL_STATE_FOLLOW =
        
          "follow"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::OPERATION_STATE_IDLE =
        
          "idle"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::OPERATION_STATE_CALIBRATION =
        
          "calibrating"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::OPERATION_STATE_MOVING =
        
          "moving"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::OPERATION_STATE_ELEVATION_RAISE =
        
          "raising_elevator"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::OPERATION_STATE_ELEVATION_LOWER =
        
          "lowering_elevator"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::OPERATION_STATE_BATTERY_CHARGE =
        
          "charging"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_local_control_msgs::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_local_control_msgs::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_local_control_msgs::Status_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::Status_<ContainerAllocator2> & rhs)
{
  return lhs.robot_id == rhs.robot_id &&
    lhs.robot_state == rhs.robot_state &&
    lhs.control_state == rhs.control_state &&
    lhs.operation_state == rhs.operation_state &&
    lhs.localization_status == rhs.localization_status &&
    lhs.navigation_status == rhs.navigation_status &&
    lhs.robot_status == rhs.robot_status &&
    lhs.signal_manager == rhs.signal_manager;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_local_control_msgs::Status_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_local_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::Status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_local_control_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9bca84f741e3aaa1c4bf0c982726b9dd";
  }

  static const char* value(const ::robot_local_control_msgs::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9bca84f741e3aaa1ULL;
  static const uint64_t static_value2 = 0xc4bf0c982726b9ddULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_local_control_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_local_control_msgs/Status";
  }

  static const char* value(const ::robot_local_control_msgs::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_local_control_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# GLOBAL ROBOT STATE\n"
"# init: the robot is initializing\n"
"# standby: the robot is ready to receive orders. Power saving behaviours can be applied\n"
"# ready: the robot is ready to work or working\n"
"# emergency: the robot cannot work/operate correctly temporary. It can imply a recovery procedure or an external action from the operator\n"
"# failure: the robot is not working. It needs the operator intervention and probably restart/reboot the robot\n"
"string ROBOT_STATE_INIT=init\n"
"string ROBOT_STATE_STANDBY=standby\n"
"string ROBOT_STATE_READY=ready\n"
"string ROBOT_STATE_EMERGENCY=emergency\n"
"string ROBOT_STATE_FAILURE=failure\n"
"\n"
"\n"
"# CONTROL STATES OF THE ROBOT\n"
"# auto: the robot is moving autonomously\n"
"# manual: the robot is being tele-operated by an operator\n"
"# follow: the robot is following a person\n"
"string CONTROL_STATE_UNKNOWN=unknown\n"
"string CONTROL_STATE_AUTO=auto\n"
"string CONTROL_STATE_MANUAL=manual\n"
"string CONTROL_STATE_FOLLOW=follow\n"
"\n"
"\n"
"# OPERATIONAL STATES\n"
"# Defines what's doing the robot\n"
"# idle: the robot is doing nothing\n"
"# calibrating: the robot is calibrating\n"
"# moving: the robot is moving\n"
"# raising: the elevator is raising\n"
"# lowering: the elevator is lowering\n"
"# charging: the robot is charging the battery\n"
"string OPERATION_STATE_IDLE=idle\n"
"string OPERATION_STATE_CALIBRATION=calibrating\n"
"string OPERATION_STATE_MOVING=moving\n"
"string OPERATION_STATE_ELEVATION_RAISE=raising_elevator\n"
"string OPERATION_STATE_ELEVATION_LOWER=lowering_elevator\n"
"string OPERATION_STATE_BATTERY_CHARGE=charging\n"
"\n"
"\n"
"###############################################################################################\n"
"\n"
"# Human readable ID\n"
"string robot_id\n"
"\n"
"# GLOBAL/Overall state of the component or robot\n"
"# INIT, STANDBY, READY, EMERGENCY, FAILURE\n"
"string robot_state\n"
"\n"
"# ROBOT OPERATION MODE\n"
"# AUTO, MANUAL, FOLLOW\n"
"string control_state\n"
"\n"
"# idle, calibrating, moving, raising_elevator,...\n"
"string operation_state\n"
"\n"
"# Robot position (Define custom pose type)\n"
"# RobotPose pose\n"
"# type: gps, amcl, gmapping\n"
"LocalizationStatus localization_status\n"
"\n"
"# Navigation Status\n"
"# move_base, purepursuit, docking\n"
"NavigationStatus navigation_status\n"
"\n"
"# Robot status: batt, lights, acoustic signal\n"
"# odometry\n"
"RobotStatus robot_status\n"
"\n"
"# Signal manager: array with the signal of each sensor\n"
"SignalManager signal_manager\n"
"\n"
"\n"
"\n"
"# clasificarlo por tipos (action, localization, sensors,controllers...)\n"
"# string[] state_procedures\n"
"\n"
"================================================================================\n"
"MSG: robot_local_control_msgs/LocalizationStatus\n"
"# Type of localization systems used\n"
"string LOCALIZATION_TYPE_NONE=none\n"
"# amcl\n"
"string LOCALIZATION_TYPE_1=1\n"
"# gps\n"
"string LOCALIZATION_TYPE_2=2\n"
"# cartogphr\n"
"string LOCALIZATION_TYPE_3=3\n"
"# gmapping\n"
"string LOCALIZATION_TYPE_4=4\n"
"\n"
"# state of the navigation node running\n"
"string LOCALIZATION_STATE_INIT=init\n"
"string LOCALIZATION_STATE_READY=ready\n"
"string LOCALIZATION_STATE_EMERGENCY=emergency\n"
"string LOCALIZATION_STATE_FAILURE=failure\n"
"string LOCALIZATION_STATE_UNKNOWN=unknown\n"
"\n"
"# Pose of the robot based on the current localization algorithm\n"
"Pose2DStamped pose\n"
"\n"
"# reliability\n"
"bool reliable\n"
"\n"
"# Localization environment \n"
"string environment\n"
"\n"
"# Type of localization technology\n"
"string type\n"
"\n"
"# INIT, READY, EMERGENCY, FAILURE\n"
"string state\n"
"\n"
"================================================================================\n"
"MSG: robot_local_control_msgs/Pose2DStamped\n"
"Header header\n"
"geometry_msgs/Pose2D pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"\n"
"================================================================================\n"
"MSG: robot_local_control_msgs/NavigationStatus\n"
"# type of navigation package/algorithm currently used\n"
"string NAVIGATION_TYPE_NONE=none\n"
"# move_base\n"
"string NAVIGATION_TYPE_1=1\n"
"# purepursuit\n"
"string NAVIGATION_TYPE_2=2\n"
"# Dock\n"
"string NAVIGATION_TYPE_3=3 \n"
"\n"
"# state of the navigation node running\n"
"string NAVIGATION_STATE_INIT=init\n"
"string NAVIGATION_STATE_STANDBY=standby\n"
"string NAVIGATION_STATE_READY=ready\n"
"string NAVIGATION_STATE_EMERGENCY=emergency\n"
"string NAVIGATION_STATE_FAILURE=failure\n"
"\n"
"# Navigation algorithm being used\n"
"string type\n"
"\n"
"# INIT, READY, EMERGENCY, FAILURE\n"
"string state\n"
"\n"
"================================================================================\n"
"MSG: robot_local_control_msgs/RobotStatus\n"
"# robot battery\n"
"robotnik_msgs/BatteryStatus battery\n"
"\n"
"# Robot emergency stop\n"
"bool emergency_stop\n"
"\n"
"# lights\n"
"# acoustic signal\n"
"# bool acoustic_signal\n"
"\n"
"# Robot internal odometry\n"
"Pose2DStamped pose\n"
"Twist2D velocity\n"
"\n"
"# Safety status\n"
"robotnik_msgs/SafetyModuleStatus safety_status\n"
"\n"
"# Battery Docking status\n"
"robotnik_msgs/BatteryDockingStatus battery_docking_status\n"
"\n"
"ControllerStatus[] controllers\n"
"\n"
"SensorStatus[] sensors\n"
"robotnik_msgs/ElevatorStatus elevator\n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/BatteryStatus\n"
"float32 voltage			# in volts\n"
"float32 current			# in amperes\n"
"float32 level			# in %\n"
"uint32 time_remaining		# in minutes\n"
"uint32 time_charging            # in minutes \n"
"bool is_charging                # true when connected\n"
"\n"
"================================================================================\n"
"MSG: robot_local_control_msgs/Twist2D\n"
"float64 linear_x\n"
"float64 linear_y\n"
"float64 angular_z\n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/SafetyModuleStatus\n"
"# robot safety mode\n"
"string SAFE=safe\n"
"string OVERRIDABLE=overridable\n"
"string EMERGENCY=emergency\n"
"string LASER_MUTE=laser_mute\n"
"\n"
"string safety_mode\n"
"bool charging\n"
"bool emergency_stop        # if e-stop is pressed\n"
"bool safety_stop           # if system is stopped due to safety system\n"
"bool safety_overrided      # if safety system is overrided\n"
"bool lasers_on_standby     # if lasers don't have power\n"
"float64 current_speed       # current speed measured by safety system\n"
"float64 speed_at_safety_stop  # speed measured at last safety stop by safety system\n"
"\n"
"robotnik_msgs/LaserMode lasers_mode\n"
"robotnik_msgs/LaserStatus[] lasers_status\n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/LaserMode\n"
"string STANDARD=standard\n"
"string DOCKING_STATION=docking_station\n"
"string CART=cart\n"
"string CART_DOCKING_CART=cart_docking_cart\n"
"string DOCKING_CART=docking_cart\n"
"string REDUCED=reduced\n"
"string INVALID=invalid\n"
"\n"
"string name\n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/LaserStatus\n"
"string name\n"
"bool detecting_obstacles\n"
"bool contaminated\n"
"bool free_warning\n"
"# one input per each warning zone.\n"
"# first areas are closer to the robot (i.e. more restrictive)\n"
"bool[] warning_zones \n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/BatteryDockingStatus\n"
"# Modes of operation:\n"
"# no docking station contacts\n"
"string MODE_DISABLED=disabled\n"
"# Unattended relay detection & activation with no inputs/outputs feedback. Done by the hw\n"
"string MODE_AUTO_HW=automatic_hw\n"
"# Unattended relay detection & activation with inputs/outputs feedback. Done by the sw\n"
"string MODE_AUTO_SW=automatic_sw\n"
"# Unattended relay detection & and manual activation of the charging relay\n"
"string MODE_MANUAL_SW=manual_sw\n"
"\n"
"string operation_mode\n"
"	\n"
"bool contact_relay_status	# shows if there's contact with the charger\n"
"bool charger_relay_status   # shows if the relay for the charge is active or not\n"
"\n"
"================================================================================\n"
"MSG: robot_local_control_msgs/ControllerStatus\n"
"# Human readable name\n"
"string name\n"
"\n"
"# Type of controller\n"
"string type\n"
"\n"
"# INIT, READY, EMERGENCY, FAILURE\n"
"string state\n"
"\n"
"================================================================================\n"
"MSG: robot_local_control_msgs/SensorStatus\n"
"# Human readable name\n"
"string name\n"
"\n"
"# Type of sensor\n"
"string type\n"
"\n"
"# INIT, READY, EMERGENCY, FAILURE\n"
"string state\n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/ElevatorStatus\n"
"# state\n"
"string RAISING=raising\n"
"string LOWERING=lowering\n"
"string IDLE=idle\n"
"string ERROR_G_IO=error_getting_io\n"
"string ERROR_S_IO=error_setting_io\n"
"string ERROR_TIMEOUT=error_timeout_in_action\n"
"# position\n"
"string UP=up\n"
"string DOWN=down\n"
"string UNKNOWN=unknown\n"
"# IDLE, RAISING, LOWERING\n"
"string state\n"
"# UP, DOWN, UNKNOWN\n"
"string position\n"
"float32 height\n"
"\n"
"================================================================================\n"
"MSG: robot_local_control_msgs/SignalManager\n"
"# INIT, READY, EMERGENCY, FAILURE\n"
"string state\n"
"# The state of the global signal\n"
"string signal_state\n"
"# The state of each signal_manager node\n"
"robotnik_signal_msgs/SignalStatus[] signals_status\n"
"================================================================================\n"
"MSG: robotnik_signal_msgs/SignalStatus\n"
"# signal_names\n"
"string SIGNAL_CHARGING=charging\n"
"string SIGNAL_SAFETY_STANDBY=safety_standby\n"
"string SIGNAL_EMERGENCY_STOP=emergency_stop\n"
"string SIGNAL_SAFETY_OBSTACLE_DETECTED=safety_obstacle_detected\n"
"string SIGNAL_LOW_BATTERY=low_battery\n"
"string SIGNAL_BASE_CONTROLLER_ERROR=base_controller_error\n"
"string SIGNAL_ARM_CONTROLLER_ERROR=arm_controller_error\n"
"string SIGNAL_SENSOR_ERROR=sensor_error\n"
"string SIGNAL_ROBOT_IDLE=robot_idle\n"
"string SIGNAL_ROBOT_MOVING=robot_moving\n"
"string SIGNAL_RAISING_ELEVATOR=raising_elevator\n"
"string SIGNAL_LOWERING_ELEVATOR=lowering_elevator\n"
"\n"
"string node_name\n"
"string[] active_signals\n"
;
  }

  static const char* value(const ::robot_local_control_msgs::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_local_control_msgs::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.robot_state);
      stream.next(m.control_state);
      stream.next(m.operation_state);
      stream.next(m.localization_status);
      stream.next(m.navigation_status);
      stream.next(m.robot_status);
      stream.next(m.signal_manager);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_local_control_msgs::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_local_control_msgs::Status_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_id);
    s << indent << "robot_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_state);
    s << indent << "control_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.control_state);
    s << indent << "operation_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.operation_state);
    s << indent << "localization_status: ";
    s << std::endl;
    Printer< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.localization_status);
    s << indent << "navigation_status: ";
    s << std::endl;
    Printer< ::robot_local_control_msgs::NavigationStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.navigation_status);
    s << indent << "robot_status: ";
    s << std::endl;
    Printer< ::robot_local_control_msgs::RobotStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_status);
    s << indent << "signal_manager: ";
    s << std::endl;
    Printer< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> >::stream(s, indent + "  ", v.signal_manager);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_STATUS_H
