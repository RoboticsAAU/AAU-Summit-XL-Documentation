// Generated by gencpp from file robot_local_control_msgs/GoToPetitionRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_GOTOPETITIONREQUEST_H
#define ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_GOTOPETITIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_local_control_msgs/GoTo.h>

namespace robot_local_control_msgs
{
template <class ContainerAllocator>
struct GoToPetitionRequest_
{
  typedef GoToPetitionRequest_<ContainerAllocator> Type;

  GoToPetitionRequest_()
    : procedure()  {
    }
  GoToPetitionRequest_(const ContainerAllocator& _alloc)
    : procedure(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robot_local_control_msgs::GoTo_<ContainerAllocator>  _procedure_type;
  _procedure_type procedure;





  typedef boost::shared_ptr< ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GoToPetitionRequest_

typedef ::robot_local_control_msgs::GoToPetitionRequest_<std::allocator<void> > GoToPetitionRequest;

typedef boost::shared_ptr< ::robot_local_control_msgs::GoToPetitionRequest > GoToPetitionRequestPtr;
typedef boost::shared_ptr< ::robot_local_control_msgs::GoToPetitionRequest const> GoToPetitionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.procedure == rhs.procedure;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_local_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a17acc08cfa207c629487d760bf9e5b8";
  }

  static const char* value(const ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa17acc08cfa207c6ULL;
  static const uint64_t static_value2 = 0x29487d760bf9e5b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_local_control_msgs/GoToPetitionRequest";
  }

  static const char* value(const ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "GoTo procedure \n"
"\n"
"================================================================================\n"
"MSG: robot_local_control_msgs/GoTo\n"
"# goals is a set of 2D poses that will be reached by the robot\n"
"Pose2DStamped[] goals\n"
"# twist can be either empty, in that case no maximum velocity is\n"
"# specified, or a set of the same size as goals, in which each goal\n"
"# will be reached with its maximum velocity\n"
"Twist2D[] max_velocities\n"
"\n"
"================================================================================\n"
"MSG: robot_local_control_msgs/Pose2DStamped\n"
"Header header\n"
"geometry_msgs/Pose2D pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"\n"
"================================================================================\n"
"MSG: robot_local_control_msgs/Twist2D\n"
"float64 linear_x\n"
"float64 linear_y\n"
"float64 angular_z\n"
;
  }

  static const char* value(const ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.procedure);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoToPetitionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_local_control_msgs::GoToPetitionRequest_<ContainerAllocator>& v)
  {
    s << indent << "procedure: ";
    s << std::endl;
    Printer< ::robot_local_control_msgs::GoTo_<ContainerAllocator> >::stream(s, indent + "  ", v.procedure);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_GOTOPETITIONREQUEST_H
