// Generated by gencpp from file robot_local_control_msgs/SignalManager.msg
// DO NOT EDIT!


#ifndef ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_SIGNALMANAGER_H
#define ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_SIGNALMANAGER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_signal_msgs/SignalStatus.h>

namespace robot_local_control_msgs
{
template <class ContainerAllocator>
struct SignalManager_
{
  typedef SignalManager_<ContainerAllocator> Type;

  SignalManager_()
    : state()
    , signal_state()
    , signals_status()  {
    }
  SignalManager_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , signal_state(_alloc)
    , signals_status(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _signal_state_type;
  _signal_state_type signal_state;

   typedef std::vector< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> >::other >  _signals_status_type;
  _signals_status_type signals_status;





  typedef boost::shared_ptr< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> const> ConstPtr;

}; // struct SignalManager_

typedef ::robot_local_control_msgs::SignalManager_<std::allocator<void> > SignalManager;

typedef boost::shared_ptr< ::robot_local_control_msgs::SignalManager > SignalManagerPtr;
typedef boost::shared_ptr< ::robot_local_control_msgs::SignalManager const> SignalManagerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_local_control_msgs::SignalManager_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_local_control_msgs::SignalManager_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::SignalManager_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.signal_state == rhs.signal_state &&
    lhs.signals_status == rhs.signals_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_local_control_msgs::SignalManager_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::SignalManager_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_local_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d72476a1dfab8768093789a2dcd679e";
  }

  static const char* value(const ::robot_local_control_msgs::SignalManager_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d72476a1dfab876ULL;
  static const uint64_t static_value2 = 0x8093789a2dcd679eULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_local_control_msgs/SignalManager";
  }

  static const char* value(const ::robot_local_control_msgs::SignalManager_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# INIT, READY, EMERGENCY, FAILURE\n"
"string state\n"
"# The state of the global signal\n"
"string signal_state\n"
"# The state of each signal_manager node\n"
"robotnik_signal_msgs/SignalStatus[] signals_status\n"
"================================================================================\n"
"MSG: robotnik_signal_msgs/SignalStatus\n"
"# signal_names\n"
"string SIGNAL_CHARGING=charging\n"
"string SIGNAL_SAFETY_STANDBY=safety_standby\n"
"string SIGNAL_EMERGENCY_STOP=emergency_stop\n"
"string SIGNAL_SAFETY_OBSTACLE_DETECTED=safety_obstacle_detected\n"
"string SIGNAL_LOW_BATTERY=low_battery\n"
"string SIGNAL_BASE_CONTROLLER_ERROR=base_controller_error\n"
"string SIGNAL_ARM_CONTROLLER_ERROR=arm_controller_error\n"
"string SIGNAL_SENSOR_ERROR=sensor_error\n"
"string SIGNAL_ROBOT_IDLE=robot_idle\n"
"string SIGNAL_ROBOT_MOVING=robot_moving\n"
"string SIGNAL_RAISING_ELEVATOR=raising_elevator\n"
"string SIGNAL_LOWERING_ELEVATOR=lowering_elevator\n"
"\n"
"string node_name\n"
"string[] active_signals\n"
;
  }

  static const char* value(const ::robot_local_control_msgs::SignalManager_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.signal_state);
      stream.next(m.signals_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SignalManager_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_local_control_msgs::SignalManager_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_local_control_msgs::SignalManager_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "signal_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.signal_state);
    s << indent << "signals_status[]" << std::endl;
    for (size_t i = 0; i < v.signals_status.size(); ++i)
    {
      s << indent << "  signals_status[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.signals_status[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_SIGNALMANAGER_H
