// Generated by gencpp from file robot_local_control_msgs/SwitchMap.msg
// DO NOT EDIT!


#ifndef ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_SWITCHMAP_H
#define ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_SWITCHMAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace robot_local_control_msgs
{
template <class ContainerAllocator>
struct SwitchMap_
{
  typedef SwitchMap_<ContainerAllocator> Type;

  SwitchMap_()
    : map()
    , x()
    , y()
    , theta()  {
    }
  SwitchMap_(const ContainerAllocator& _alloc)
    : map(_alloc)
    , x(_alloc)
    , y(_alloc)
    , theta(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_type;
  _map_type map;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _x_type;
  _x_type x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _y_type;
  _y_type y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> const> ConstPtr;

}; // struct SwitchMap_

typedef ::robot_local_control_msgs::SwitchMap_<std::allocator<void> > SwitchMap;

typedef boost::shared_ptr< ::robot_local_control_msgs::SwitchMap > SwitchMapPtr;
typedef boost::shared_ptr< ::robot_local_control_msgs::SwitchMap const> SwitchMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_local_control_msgs::SwitchMap_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::SwitchMap_<ContainerAllocator2> & rhs)
{
  return lhs.map == rhs.map &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_local_control_msgs::SwitchMap_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::SwitchMap_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_local_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a2fabb463b583973fe1c29042f0add80";
  }

  static const char* value(const ::robot_local_control_msgs::SwitchMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa2fabb463b583973ULL;
  static const uint64_t static_value2 = 0xfe1c29042f0add80ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_local_control_msgs/SwitchMap";
  }

  static const char* value(const ::robot_local_control_msgs::SwitchMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# sample values: floor_0, floor_1\n"
"string map\n"
"\n"
"# position and orentation on the new floor\n"
"std_msgs/Float32 x \n"
"std_msgs/Float32 y\n"
"std_msgs/Float32 theta\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::robot_local_control_msgs::SwitchMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SwitchMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_local_control_msgs::SwitchMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_local_control_msgs::SwitchMap_<ContainerAllocator>& v)
  {
    s << indent << "map: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map);
    s << indent << "x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_SWITCHMAP_H
