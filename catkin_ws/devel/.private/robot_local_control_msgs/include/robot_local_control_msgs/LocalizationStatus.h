// Generated by gencpp from file robot_local_control_msgs/LocalizationStatus.msg
// DO NOT EDIT!


#ifndef ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_LOCALIZATIONSTATUS_H
#define ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_LOCALIZATIONSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_local_control_msgs/Pose2DStamped.h>

namespace robot_local_control_msgs
{
template <class ContainerAllocator>
struct LocalizationStatus_
{
  typedef LocalizationStatus_<ContainerAllocator> Type;

  LocalizationStatus_()
    : pose()
    , reliable(false)
    , environment()
    , type()
    , state()  {
    }
  LocalizationStatus_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , reliable(false)
    , environment(_alloc)
    , type(_alloc)
    , state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robot_local_control_msgs::Pose2DStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef uint8_t _reliable_type;
  _reliable_type reliable;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _environment_type;
  _environment_type environment;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LOCALIZATION_TYPE_NONE)
  #undef LOCALIZATION_TYPE_NONE
#endif
#if defined(_WIN32) && defined(LOCALIZATION_TYPE_1)
  #undef LOCALIZATION_TYPE_1
#endif
#if defined(_WIN32) && defined(LOCALIZATION_TYPE_2)
  #undef LOCALIZATION_TYPE_2
#endif
#if defined(_WIN32) && defined(LOCALIZATION_TYPE_3)
  #undef LOCALIZATION_TYPE_3
#endif
#if defined(_WIN32) && defined(LOCALIZATION_TYPE_4)
  #undef LOCALIZATION_TYPE_4
#endif
#if defined(_WIN32) && defined(LOCALIZATION_STATE_INIT)
  #undef LOCALIZATION_STATE_INIT
#endif
#if defined(_WIN32) && defined(LOCALIZATION_STATE_READY)
  #undef LOCALIZATION_STATE_READY
#endif
#if defined(_WIN32) && defined(LOCALIZATION_STATE_EMERGENCY)
  #undef LOCALIZATION_STATE_EMERGENCY
#endif
#if defined(_WIN32) && defined(LOCALIZATION_STATE_FAILURE)
  #undef LOCALIZATION_STATE_FAILURE
#endif
#if defined(_WIN32) && defined(LOCALIZATION_STATE_UNKNOWN)
  #undef LOCALIZATION_STATE_UNKNOWN
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LOCALIZATION_TYPE_NONE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LOCALIZATION_TYPE_1;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LOCALIZATION_TYPE_2;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LOCALIZATION_TYPE_3;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LOCALIZATION_TYPE_4;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LOCALIZATION_STATE_INIT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LOCALIZATION_STATE_READY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LOCALIZATION_STATE_EMERGENCY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LOCALIZATION_STATE_FAILURE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LOCALIZATION_STATE_UNKNOWN;

  typedef boost::shared_ptr< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> const> ConstPtr;

}; // struct LocalizationStatus_

typedef ::robot_local_control_msgs::LocalizationStatus_<std::allocator<void> > LocalizationStatus;

typedef boost::shared_ptr< ::robot_local_control_msgs::LocalizationStatus > LocalizationStatusPtr;
typedef boost::shared_ptr< ::robot_local_control_msgs::LocalizationStatus const> LocalizationStatusConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      LocalizationStatus_<ContainerAllocator>::LOCALIZATION_TYPE_NONE =
        
          "none"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      LocalizationStatus_<ContainerAllocator>::LOCALIZATION_TYPE_1 =
        
          "1"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      LocalizationStatus_<ContainerAllocator>::LOCALIZATION_TYPE_2 =
        
          "2"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      LocalizationStatus_<ContainerAllocator>::LOCALIZATION_TYPE_3 =
        
          "3"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      LocalizationStatus_<ContainerAllocator>::LOCALIZATION_TYPE_4 =
        
          "4"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      LocalizationStatus_<ContainerAllocator>::LOCALIZATION_STATE_INIT =
        
          "init"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      LocalizationStatus_<ContainerAllocator>::LOCALIZATION_STATE_READY =
        
          "ready"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      LocalizationStatus_<ContainerAllocator>::LOCALIZATION_STATE_EMERGENCY =
        
          "emergency"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      LocalizationStatus_<ContainerAllocator>::LOCALIZATION_STATE_FAILURE =
        
          "failure"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      LocalizationStatus_<ContainerAllocator>::LOCALIZATION_STATE_UNKNOWN =
        
          "unknown"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.reliable == rhs.reliable &&
    lhs.environment == rhs.environment &&
    lhs.type == rhs.type &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_local_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "070ab2c758290f3163c0493c24c6a324";
  }

  static const char* value(const ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x070ab2c758290f31ULL;
  static const uint64_t static_value2 = 0x63c0493c24c6a324ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_local_control_msgs/LocalizationStatus";
  }

  static const char* value(const ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Type of localization systems used\n"
"string LOCALIZATION_TYPE_NONE=none\n"
"# amcl\n"
"string LOCALIZATION_TYPE_1=1\n"
"# gps\n"
"string LOCALIZATION_TYPE_2=2\n"
"# cartogphr\n"
"string LOCALIZATION_TYPE_3=3\n"
"# gmapping\n"
"string LOCALIZATION_TYPE_4=4\n"
"\n"
"# state of the navigation node running\n"
"string LOCALIZATION_STATE_INIT=init\n"
"string LOCALIZATION_STATE_READY=ready\n"
"string LOCALIZATION_STATE_EMERGENCY=emergency\n"
"string LOCALIZATION_STATE_FAILURE=failure\n"
"string LOCALIZATION_STATE_UNKNOWN=unknown\n"
"\n"
"# Pose of the robot based on the current localization algorithm\n"
"Pose2DStamped pose\n"
"\n"
"# reliability\n"
"bool reliable\n"
"\n"
"# Localization environment \n"
"string environment\n"
"\n"
"# Type of localization technology\n"
"string type\n"
"\n"
"# INIT, READY, EMERGENCY, FAILURE\n"
"string state\n"
"\n"
"================================================================================\n"
"MSG: robot_local_control_msgs/Pose2DStamped\n"
"Header header\n"
"geometry_msgs/Pose2D pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
;
  }

  static const char* value(const ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.reliable);
      stream.next(m.environment);
      stream.next(m.type);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalizationStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_local_control_msgs::LocalizationStatus_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::robot_local_control_msgs::Pose2DStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "reliable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reliable);
    s << indent << "environment: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.environment);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_LOCALIZATIONSTATUS_H
