// Generated by gencpp from file robot_local_control_msgs/GoToNode.msg
// DO NOT EDIT!


#ifndef ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_GOTONODE_H
#define ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_GOTONODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_local_control_msgs
{
template <class ContainerAllocator>
struct GoToNode_
{
  typedef GoToNode_<ContainerAllocator> Type;

  GoToNode_()
    : node(0)
    , orientation_offset(0.0)
    , position_offset(0.0)  {
    }
  GoToNode_(const ContainerAllocator& _alloc)
    : node(0)
    , orientation_offset(0.0)
    , position_offset(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _node_type;
  _node_type node;

   typedef float _orientation_offset_type;
  _orientation_offset_type orientation_offset;

   typedef float _position_offset_type;
  _position_offset_type position_offset;





  typedef boost::shared_ptr< ::robot_local_control_msgs::GoToNode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_local_control_msgs::GoToNode_<ContainerAllocator> const> ConstPtr;

}; // struct GoToNode_

typedef ::robot_local_control_msgs::GoToNode_<std::allocator<void> > GoToNode;

typedef boost::shared_ptr< ::robot_local_control_msgs::GoToNode > GoToNodePtr;
typedef boost::shared_ptr< ::robot_local_control_msgs::GoToNode const> GoToNodeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_local_control_msgs::GoToNode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_local_control_msgs::GoToNode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_local_control_msgs::GoToNode_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::GoToNode_<ContainerAllocator2> & rhs)
{
  return lhs.node == rhs.node &&
    lhs.orientation_offset == rhs.orientation_offset &&
    lhs.position_offset == rhs.position_offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_local_control_msgs::GoToNode_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::GoToNode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_local_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::GoToNode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::GoToNode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::GoToNode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::GoToNode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::GoToNode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::GoToNode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_local_control_msgs::GoToNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "509df8f1262ef6d589b41c15ff4e1f1c";
  }

  static const char* value(const ::robot_local_control_msgs::GoToNode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x509df8f1262ef6d5ULL;
  static const uint64_t static_value2 = 0x89b41c15ff4e1f1cULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_local_control_msgs::GoToNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_local_control_msgs/GoToNode";
  }

  static const char* value(const ::robot_local_control_msgs::GoToNode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_local_control_msgs::GoToNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 node\n"
"float32 orientation_offset\n"
"float32 position_offset\n"
;
  }

  static const char* value(const ::robot_local_control_msgs::GoToNode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_local_control_msgs::GoToNode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node);
      stream.next(m.orientation_offset);
      stream.next(m.position_offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoToNode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_local_control_msgs::GoToNode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_local_control_msgs::GoToNode_<ContainerAllocator>& v)
  {
    s << indent << "node: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.node);
    s << indent << "orientation_offset: ";
    Printer<float>::stream(s, indent + "  ", v.orientation_offset);
    s << indent << "position_offset: ";
    Printer<float>::stream(s, indent + "  ", v.position_offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_GOTONODE_H
