// Generated by gencpp from file robot_local_control_msgs/MissionStatus.msg
// DO NOT EDIT!


#ifndef ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_MISSIONSTATUS_H
#define ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_MISSIONSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_local_control_msgs
{
template <class ContainerAllocator>
struct MissionStatus_
{
  typedef MissionStatus_<ContainerAllocator> Type;

  MissionStatus_()
    : id(0)
    , description()
    , state()  {
    }
  MissionStatus_(const ContainerAllocator& _alloc)
    : id(0)
    , description(_alloc)
    , state(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(RUNNING)
  #undef RUNNING
#endif
#if defined(_WIN32) && defined(PAUSED)
  #undef PAUSED
#endif
#if defined(_WIN32) && defined(FINISHED)
  #undef FINISHED
#endif
#if defined(_WIN32) && defined(CANCELLED)
  #undef CANCELLED
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif
#if defined(_WIN32) && defined(QUEUED)
  #undef QUEUED
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  UNKNOWN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  RUNNING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PAUSED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  FINISHED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CANCELLED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ERROR;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  QUEUED;

  typedef boost::shared_ptr< ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> const> ConstPtr;

}; // struct MissionStatus_

typedef ::robot_local_control_msgs::MissionStatus_<std::allocator<void> > MissionStatus;

typedef boost::shared_ptr< ::robot_local_control_msgs::MissionStatus > MissionStatusPtr;
typedef boost::shared_ptr< ::robot_local_control_msgs::MissionStatus const> MissionStatusConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      MissionStatus_<ContainerAllocator>::UNKNOWN =
        
          "unknown"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      MissionStatus_<ContainerAllocator>::RUNNING =
        
          "running"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      MissionStatus_<ContainerAllocator>::PAUSED =
        
          "paused"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      MissionStatus_<ContainerAllocator>::FINISHED =
        
          "finished"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      MissionStatus_<ContainerAllocator>::CANCELLED =
        
          "cancelled"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      MissionStatus_<ContainerAllocator>::ERROR =
        
          "error"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      MissionStatus_<ContainerAllocator>::QUEUED =
        
          "queued"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_local_control_msgs::MissionStatus_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::MissionStatus_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.description == rhs.description &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_local_control_msgs::MissionStatus_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::MissionStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_local_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13930350bc85ee5ad0913d85d697f1b5";
  }

  static const char* value(const ::robot_local_control_msgs::MissionStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13930350bc85ee5aULL;
  static const uint64_t static_value2 = 0xd0913d85d697f1b5ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_local_control_msgs/MissionStatus";
  }

  static const char* value(const ::robot_local_control_msgs::MissionStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MISSION STATES\n"
"# States inside a mission\n"
"string UNKNOWN=unknown\n"
"string RUNNING=running\n"
"string PAUSED=paused\n"
"string FINISHED=finished\n"
"string CANCELLED=cancelled\n"
"string ERROR=error\n"
"string QUEUED=queued\n"
"# running: mission is running\n"
"# paused: mission is paused\n"
"# finished: mission finished\n"
"# canceled: mission has been canceled\n"
"# error: an error occurred during the execution of the mission\n"
"# queued: the mission is queued\n"
"\n"
"\n"
"#\n"
"int32 id\n"
"\n"
"# ID of the mision based on string format: GOTO [4,5,6]\n"
"string description\n"
"\n"
"# running, paused, finished,...\n"
"string state\n"
"\n"
"\n"
;
  }

  static const char* value(const ::robot_local_control_msgs::MissionStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.description);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_local_control_msgs::MissionStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_local_control_msgs::MissionStatus_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_MISSIONSTATUS_H
