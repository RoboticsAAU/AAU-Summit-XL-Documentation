// Generated by gencpp from file robot_local_control_msgs/GoToGPS.msg
// DO NOT EDIT!


#ifndef ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_GOTOGPS_H
#define ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_GOTOGPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_local_control_msgs/PointGPS.h>

namespace robot_local_control_msgs
{
template <class ContainerAllocator>
struct GoToGPS_
{
  typedef GoToGPS_<ContainerAllocator> Type;

  GoToGPS_()
    : frame_id()
    , goals()
    , max_velocity(0.0)  {
    }
  GoToGPS_(const ContainerAllocator& _alloc)
    : frame_id(_alloc)
    , goals(_alloc)
    , max_velocity(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef std::vector< ::robot_local_control_msgs::PointGPS_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robot_local_control_msgs::PointGPS_<ContainerAllocator> >::other >  _goals_type;
  _goals_type goals;

   typedef float _max_velocity_type;
  _max_velocity_type max_velocity;





  typedef boost::shared_ptr< ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> const> ConstPtr;

}; // struct GoToGPS_

typedef ::robot_local_control_msgs::GoToGPS_<std::allocator<void> > GoToGPS;

typedef boost::shared_ptr< ::robot_local_control_msgs::GoToGPS > GoToGPSPtr;
typedef boost::shared_ptr< ::robot_local_control_msgs::GoToGPS const> GoToGPSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_local_control_msgs::GoToGPS_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::GoToGPS_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.goals == rhs.goals &&
    lhs.max_velocity == rhs.max_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_local_control_msgs::GoToGPS_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::GoToGPS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_local_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d4fbf4472de3812fca8b47adb405a90";
  }

  static const char* value(const ::robot_local_control_msgs::GoToGPS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d4fbf4472de3812ULL;
  static const uint64_t static_value2 = 0xfca8b47adb405a90ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_local_control_msgs/GoToGPS";
  }

  static const char* value(const ::robot_local_control_msgs::GoToGPS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string frame_id\n"
"\n"
"PointGPS[] goals\n"
"\n"
"# Sets the max velocity through the path\n"
"float32 max_velocity\n"
"\n"
"================================================================================\n"
"MSG: robot_local_control_msgs/PointGPS\n"
"float64 latitude\n"
"float64 longitude\n"
;
  }

  static const char* value(const ::robot_local_control_msgs::GoToGPS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.goals);
      stream.next(m.max_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoToGPS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_local_control_msgs::GoToGPS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_local_control_msgs::GoToGPS_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "goals[]" << std::endl;
    for (size_t i = 0; i < v.goals.size(); ++i)
    {
      s << indent << "  goals[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robot_local_control_msgs::PointGPS_<ContainerAllocator> >::stream(s, indent + "    ", v.goals[i]);
    }
    s << indent << "max_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.max_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_GOTOGPS_H
