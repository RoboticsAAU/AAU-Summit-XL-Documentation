// Generated by gencpp from file robot_local_control_msgs/MagneticPick.msg
// DO NOT EDIT!


#ifndef ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_MAGNETICPICK_H
#define ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_MAGNETICPICK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_local_control_msgs
{
template <class ContainerAllocator>
struct MagneticPick_
{
  typedef MagneticPick_<ContainerAllocator> Type;

  MagneticPick_()
    : lane(0)
    , cart_position(0)
    , turn_direction()
    , allow_markers(false)
    , cart_id()  {
    }
  MagneticPick_(const ContainerAllocator& _alloc)
    : lane(0)
    , cart_position(0)
    , turn_direction(_alloc)
    , allow_markers(false)
    , cart_id(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _lane_type;
  _lane_type lane;

   typedef uint32_t _cart_position_type;
  _cart_position_type cart_position;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _turn_direction_type;
  _turn_direction_type turn_direction;

   typedef uint8_t _allow_markers_type;
  _allow_markers_type allow_markers;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cart_id_type;
  _cart_id_type cart_id;





  typedef boost::shared_ptr< ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> const> ConstPtr;

}; // struct MagneticPick_

typedef ::robot_local_control_msgs::MagneticPick_<std::allocator<void> > MagneticPick;

typedef boost::shared_ptr< ::robot_local_control_msgs::MagneticPick > MagneticPickPtr;
typedef boost::shared_ptr< ::robot_local_control_msgs::MagneticPick const> MagneticPickConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_local_control_msgs::MagneticPick_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::MagneticPick_<ContainerAllocator2> & rhs)
{
  return lhs.lane == rhs.lane &&
    lhs.cart_position == rhs.cart_position &&
    lhs.turn_direction == rhs.turn_direction &&
    lhs.allow_markers == rhs.allow_markers &&
    lhs.cart_id == rhs.cart_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_local_control_msgs::MagneticPick_<ContainerAllocator1> & lhs, const ::robot_local_control_msgs::MagneticPick_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_local_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbbbfba3c2d148076e68cb0bb8f8902d";
  }

  static const char* value(const ::robot_local_control_msgs::MagneticPick_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdbbbfba3c2d14807ULL;
  static const uint64_t static_value2 = 0x6e68cb0bb8f8902dULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_local_control_msgs/MagneticPick";
  }

  static const char* value(const ::robot_local_control_msgs::MagneticPick_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 lane\n"
"uint32 cart_position\n"
"string turn_direction\n"
"bool allow_markers\n"
"string cart_id\n"
;
  }

  static const char* value(const ::robot_local_control_msgs::MagneticPick_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane);
      stream.next(m.cart_position);
      stream.next(m.turn_direction);
      stream.next(m.allow_markers);
      stream.next(m.cart_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MagneticPick_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_local_control_msgs::MagneticPick_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_local_control_msgs::MagneticPick_<ContainerAllocator>& v)
  {
    s << indent << "lane: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.lane);
    s << indent << "cart_position: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cart_position);
    s << indent << "turn_direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.turn_direction);
    s << indent << "allow_markers: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.allow_markers);
    s << indent << "cart_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cart_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_LOCAL_CONTROL_MSGS_MESSAGE_MAGNETICPICK_H
