// Generated by gencpp from file rosbag_manager_msgs/RecordRequest.msg
// DO NOT EDIT!


#ifndef ROSBAG_MANAGER_MSGS_MESSAGE_RECORDREQUEST_H
#define ROSBAG_MANAGER_MSGS_MESSAGE_RECORDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosbag_manager_msgs
{
template <class ContainerAllocator>
struct RecordRequest_
{
  typedef RecordRequest_<ContainerAllocator> Type;

  RecordRequest_()
    : action()
    , name()
    , path()  {
    }
  RecordRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , name(_alloc)
    , path(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _path_type;
  _path_type path;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(DISCARD)
  #undef DISCARD
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STOP;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  START;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  DISCARD;

  typedef boost::shared_ptr< ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RecordRequest_

typedef ::rosbag_manager_msgs::RecordRequest_<std::allocator<void> > RecordRequest;

typedef boost::shared_ptr< ::rosbag_manager_msgs::RecordRequest > RecordRequestPtr;
typedef boost::shared_ptr< ::rosbag_manager_msgs::RecordRequest const> RecordRequestConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RecordRequest_<ContainerAllocator>::STOP =
        
          "stop"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RecordRequest_<ContainerAllocator>::START =
        
          "start"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RecordRequest_<ContainerAllocator>::DISCARD =
        
          "discard"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator1> & lhs, const ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.name == rhs.name &&
    lhs.path == rhs.path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator1> & lhs, const ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosbag_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61088fc1635f9d1787b0c8352d2ee3c0";
  }

  static const char* value(const ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61088fc1635f9d17ULL;
  static const uint64_t static_value2 = 0x87b0c8352d2ee3c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosbag_manager_msgs/RecordRequest";
  }

  static const char* value(const ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# START: start recording\n"
"# STOP: stop recording\n"
"# DISCARD: stop and discard recording\n"
"string STOP=stop\n"
"string START=start\n"
"string DISCARD=discard\n"
"string action\n"
"\n"
"# Name of the bag file. If empty string, bag file will be named with date and time\n"
"string name\n"
"# Absolute path location folder to save the camera recordings\n"
"string path\n"
;
  }

  static const char* value(const ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.name);
      stream.next(m.path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RecordRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosbag_manager_msgs::RecordRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSBAG_MANAGER_MSGS_MESSAGE_RECORDREQUEST_H
