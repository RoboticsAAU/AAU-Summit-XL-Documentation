// Generated by gencpp from file rosbag_manager_msgs/RosbagManagerStatus.msg
// DO NOT EDIT!


#ifndef ROSBAG_MANAGER_MSGS_MESSAGE_ROSBAGMANAGERSTATUS_H
#define ROSBAG_MANAGER_MSGS_MESSAGE_ROSBAGMANAGERSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <robotnik_msgs/State.h>

namespace rosbag_manager_msgs
{
template <class ContainerAllocator>
struct RosbagManagerStatus_
{
  typedef RosbagManagerStatus_<ContainerAllocator> Type;

  RosbagManagerStatus_()
    : header()
    , state()
    , recording(false)
    , time_recording(0)
    , path()
    , bag_name()
    , compression(false)
    , regex(false)
    , stored_size(0.0)  {
    }
  RosbagManagerStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(_alloc)
    , recording(false)
    , time_recording(0)
    , path(_alloc)
    , bag_name(_alloc)
    , compression(false)
    , regex(false)
    , stored_size(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::robotnik_msgs::State_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef uint8_t _recording_type;
  _recording_type recording;

   typedef int32_t _time_recording_type;
  _time_recording_type time_recording;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _path_type;
  _path_type path;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bag_name_type;
  _bag_name_type bag_name;

   typedef uint8_t _compression_type;
  _compression_type compression;

   typedef uint8_t _regex_type;
  _regex_type regex;

   typedef double _stored_size_type;
  _stored_size_type stored_size;





  typedef boost::shared_ptr< ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> const> ConstPtr;

}; // struct RosbagManagerStatus_

typedef ::rosbag_manager_msgs::RosbagManagerStatus_<std::allocator<void> > RosbagManagerStatus;

typedef boost::shared_ptr< ::rosbag_manager_msgs::RosbagManagerStatus > RosbagManagerStatusPtr;
typedef boost::shared_ptr< ::rosbag_manager_msgs::RosbagManagerStatus const> RosbagManagerStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator1> & lhs, const ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state == rhs.state &&
    lhs.recording == rhs.recording &&
    lhs.time_recording == rhs.time_recording &&
    lhs.path == rhs.path &&
    lhs.bag_name == rhs.bag_name &&
    lhs.compression == rhs.compression &&
    lhs.regex == rhs.regex &&
    lhs.stored_size == rhs.stored_size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator1> & lhs, const ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosbag_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "76b1de38e2d3f907b4177eba5f86930e";
  }

  static const char* value(const ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x76b1de38e2d3f907ULL;
  static const uint64_t static_value2 = 0xb4177eba5f86930eULL;
};

template<class ContainerAllocator>
struct DataType< ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosbag_manager_msgs/RosbagManagerStatus";
  }

  static const char* value(const ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Component's state\n"
"robotnik_msgs/State state\n"
"\n"
"bool recording\n"
"int32 time_recording\n"
"\n"
"# path to save the rosbag\n"
"string path\n"
"# Bag name\n"
"string bag_name\n"
"# Is the bag being compressed\n"
"bool compression\n"
"# Topics are subscribed using regular expresions\n"
"bool regex\n"
"# Disk space used in the recording (in MB)\n"
"float64 stored_size\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/State\n"
"# constants\n"
"int32 INIT_STATE = 100\n"
"int32 STANDBY_STATE = 200\n"
"int32 READY_STATE = 300\n"
"int32 EMERGENCY_STATE = 400\n"
"int32 FAILURE_STATE = 500\n"
"int32 SHUTDOWN_STATE = 600\n"
"int32 UNKOWN_STATE = 700\n"
"\n"
"# state of the component\n"
"int32 state\n"
"# desired control loop frecuency\n"
"float32 desired_freq\n"
"# real frecuency \n"
"float32 real_freq\n"
"# Description of the state\n"
"string state_description\n"
;
  }

  static const char* value(const ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
      stream.next(m.recording);
      stream.next(m.time_recording);
      stream.next(m.path);
      stream.next(m.bag_name);
      stream.next(m.compression);
      stream.next(m.regex);
      stream.next(m.stored_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RosbagManagerStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosbag_manager_msgs::RosbagManagerStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    s << std::endl;
    Printer< ::robotnik_msgs::State_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "recording: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recording);
    s << indent << "time_recording: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time_recording);
    s << indent << "path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.path);
    s << indent << "bag_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bag_name);
    s << indent << "compression: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compression);
    s << indent << "regex: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.regex);
    s << indent << "stored_size: ";
    Printer<double>::stream(s, indent + "  ", v.stored_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSBAG_MANAGER_MSGS_MESSAGE_ROSBAGMANAGERSTATUS_H
