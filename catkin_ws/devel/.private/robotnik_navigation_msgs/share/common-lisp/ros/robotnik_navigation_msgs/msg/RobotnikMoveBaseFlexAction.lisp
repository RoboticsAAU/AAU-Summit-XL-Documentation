; Auto-generated. Do not edit!


(cl:in-package robotnik_navigation_msgs-msg)


;//! \htmlinclude RobotnikMoveBaseFlexAction.msg.html

(cl:defclass <RobotnikMoveBaseFlexAction> (roslisp-msg-protocol:ros-message)
  ((action_goal
    :reader action_goal
    :initarg :action_goal
    :type robotnik_navigation_msgs-msg:RobotnikMoveBaseFlexActionGoal
    :initform (cl:make-instance 'robotnik_navigation_msgs-msg:RobotnikMoveBaseFlexActionGoal))
   (action_result
    :reader action_result
    :initarg :action_result
    :type robotnik_navigation_msgs-msg:RobotnikMoveBaseFlexActionResult
    :initform (cl:make-instance 'robotnik_navigation_msgs-msg:RobotnikMoveBaseFlexActionResult))
   (action_feedback
    :reader action_feedback
    :initarg :action_feedback
    :type robotnik_navigation_msgs-msg:RobotnikMoveBaseFlexActionFeedback
    :initform (cl:make-instance 'robotnik_navigation_msgs-msg:RobotnikMoveBaseFlexActionFeedback)))
)

(cl:defclass RobotnikMoveBaseFlexAction (<RobotnikMoveBaseFlexAction>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <RobotnikMoveBaseFlexAction>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'RobotnikMoveBaseFlexAction)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name robotnik_navigation_msgs-msg:<RobotnikMoveBaseFlexAction> is deprecated: use robotnik_navigation_msgs-msg:RobotnikMoveBaseFlexAction instead.")))

(cl:ensure-generic-function 'action_goal-val :lambda-list '(m))
(cl:defmethod action_goal-val ((m <RobotnikMoveBaseFlexAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader robotnik_navigation_msgs-msg:action_goal-val is deprecated.  Use robotnik_navigation_msgs-msg:action_goal instead.")
  (action_goal m))

(cl:ensure-generic-function 'action_result-val :lambda-list '(m))
(cl:defmethod action_result-val ((m <RobotnikMoveBaseFlexAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader robotnik_navigation_msgs-msg:action_result-val is deprecated.  Use robotnik_navigation_msgs-msg:action_result instead.")
  (action_result m))

(cl:ensure-generic-function 'action_feedback-val :lambda-list '(m))
(cl:defmethod action_feedback-val ((m <RobotnikMoveBaseFlexAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader robotnik_navigation_msgs-msg:action_feedback-val is deprecated.  Use robotnik_navigation_msgs-msg:action_feedback instead.")
  (action_feedback m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <RobotnikMoveBaseFlexAction>) ostream)
  "Serializes a message object of type '<RobotnikMoveBaseFlexAction>"
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_goal) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_result) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_feedback) ostream)
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <RobotnikMoveBaseFlexAction>) istream)
  "Deserializes a message object of type '<RobotnikMoveBaseFlexAction>"
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_goal) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_result) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_feedback) istream)
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<RobotnikMoveBaseFlexAction>)))
  "Returns string type for a message object of type '<RobotnikMoveBaseFlexAction>"
  "robotnik_navigation_msgs/RobotnikMoveBaseFlexAction")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'RobotnikMoveBaseFlexAction)))
  "Returns string type for a message object of type 'RobotnikMoveBaseFlexAction"
  "robotnik_navigation_msgs/RobotnikMoveBaseFlexAction")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<RobotnikMoveBaseFlexAction>)))
  "Returns md5sum for a message object of type '<RobotnikMoveBaseFlexAction>"
  "ee347dc57416b9f26a9defa3a226ec11")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'RobotnikMoveBaseFlexAction)))
  "Returns md5sum for a message object of type 'RobotnikMoveBaseFlexAction"
  "ee347dc57416b9f26a9defa3a226ec11")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<RobotnikMoveBaseFlexAction>)))
  "Returns full string definition for message of type '<RobotnikMoveBaseFlexAction>"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%RobotnikMoveBaseFlexActionGoal action_goal~%RobotnikMoveBaseFlexActionResult action_result~%RobotnikMoveBaseFlexActionFeedback action_feedback~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexActionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%RobotnikMoveBaseFlexGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%robotnik_navigation_msgs/RobotnikMoveBaseFlexGoalAction goal~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexGoalAction~%string NAVIGATION_TYPE_POINT_TO_POINT = POINT_TO_POINT~%string NAVIGATION_TYPE_END_POINT= END_POINT~%~%string GOAL_TARGET_TYPE_GPS = GPS~%string GOAL_TARGET_TYPE_CARTESIAN = CARTESIAN~%~%geometry_msgs/PoseStamped[] goal_target_pose~%string[] controller~%string[] planner~%string[] recovery_behaviors~%geometry_msgs/Pose[] goal_tolerance~%string navigation_type~%string goal_target_type~%float32 max_vel~%~%================================================================================~%MSG: geometry_msgs/PoseStamped~%# A Pose with reference coordinate frame and timestamp~%Header header~%Pose pose~%~%================================================================================~%MSG: geometry_msgs/Pose~%# A representation of pose in free space, composed of position and orientation. ~%Point position~%Quaternion orientation~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: geometry_msgs/Quaternion~%# This represents an orientation in free space in quaternion form.~%~%float64 x~%float64 y~%float64 z~%float64 w~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexActionResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%RobotnikMoveBaseFlexResult result~%~%================================================================================~%MSG: actionlib_msgs/GoalStatus~%GoalID goal_id~%uint8 status~%uint8 PENDING         = 0   # The goal has yet to be processed by the action server~%uint8 ACTIVE          = 1   # The goal is currently being processed by the action server~%uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing~%                            #   and has since completed its execution (Terminal State)~%uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)~%uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due~%                            #    to some failure (Terminal State)~%uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,~%                            #    because the goal was unattainable or invalid (Terminal State)~%uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing~%                            #    and has not yet completed execution~%uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,~%                            #    but the action server has not yet confirmed that the goal is canceled~%uint8 RECALLED        = 8   # The goal received a cancel request before it started executing~%                            #    and was successfully cancelled (Terminal State)~%uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be~%                            #    sent over the wire by an action server~%~%#Allow for the user to associate a string with GoalStatus for debugging~%string text~%~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%robotnik_navigation_msgs/RobotnikMoveBaseFlexResultAction result~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexResultAction~%~%# Outcome of most recent controller cycle. Same values as in MoveBase or ExePath result.~%uint32 outcome~%string message~%~%float32 dist_to_goal~%float32 angle_to_goal~%geometry_msgs/PoseStamped current_pose~%bool success~%geometry_msgs/TwistStamped last_cmd_vel  # last command calculated by the controller~%~%================================================================================~%MSG: geometry_msgs/TwistStamped~%# A twist with reference coordinate frame and timestamp~%Header header~%Twist twist~%~%================================================================================~%MSG: geometry_msgs/Twist~%# This expresses velocity in free space broken into its linear and angular parts.~%Vector3  linear~%Vector3  angular~%~%================================================================================~%MSG: geometry_msgs/Vector3~%# This represents a vector in free space. ~%# It is only meant to represent a direction. Therefore, it does not~%# make sense to apply a translation to it (e.g., when applying a ~%# generic rigid transformation to a Vector3, tf2 will only apply the~%# rotation). If you want your data to be translatable too, use the~%# geometry_msgs/Point message instead.~%~%float64 x~%float64 y~%float64 z~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexActionFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%RobotnikMoveBaseFlexFeedback feedback~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%robotnik_navigation_msgs/RobotnikMoveBaseFlexFeedbackAction feedback~%~%~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexFeedbackAction~%~%# Predefined success codes:~%uint8 SUCCESS        = 0~%~%# Predefined general error codes:~%uint8 FAILURE        = 10~%uint8 CANCELED       = 11~%uint8 COLLISION      = 12~%uint8 OSCILLATION    = 13~%uint8 START_BLOCKED  = 14~%uint8 GOAL_BLOCKED   = 15~%uint8 TF_ERROR       = 16~%uint8 INTERNAL_ERROR = 17~%# 21..49 are reserved for future general error codes~%~%# Planning/controlling failures:~%uint8 PLAN_FAILURE   = 50~%# 51..99 are reserved as global planner specific errors~%~%uint8 CTRL_FAILURE   = 100~%# 101..149 are reserved as local planner specific errors~%~%uint32 outcome~%string message~%~%# Configuration upon action completion~%float32 dist_to_goal~%float32 angle_to_goal~%geometry_msgs/PoseStamped final_pose~%geometry_msgs/PoseStamped current_pose_executing~%geometry_msgs/Pose2D dist_current_target~%~%# Index of the current goal executing~%uint32 current_goal~%~%================================================================================~%MSG: geometry_msgs/Pose2D~%# Deprecated~%# Please use the full 3D pose.~%~%# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.~%~%# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.~%~%~%# This expresses a position and orientation on a 2D manifold.~%~%float64 x~%float64 y~%float64 theta~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'RobotnikMoveBaseFlexAction)))
  "Returns full string definition for message of type 'RobotnikMoveBaseFlexAction"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%RobotnikMoveBaseFlexActionGoal action_goal~%RobotnikMoveBaseFlexActionResult action_result~%RobotnikMoveBaseFlexActionFeedback action_feedback~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexActionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%RobotnikMoveBaseFlexGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%robotnik_navigation_msgs/RobotnikMoveBaseFlexGoalAction goal~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexGoalAction~%string NAVIGATION_TYPE_POINT_TO_POINT = POINT_TO_POINT~%string NAVIGATION_TYPE_END_POINT= END_POINT~%~%string GOAL_TARGET_TYPE_GPS = GPS~%string GOAL_TARGET_TYPE_CARTESIAN = CARTESIAN~%~%geometry_msgs/PoseStamped[] goal_target_pose~%string[] controller~%string[] planner~%string[] recovery_behaviors~%geometry_msgs/Pose[] goal_tolerance~%string navigation_type~%string goal_target_type~%float32 max_vel~%~%================================================================================~%MSG: geometry_msgs/PoseStamped~%# A Pose with reference coordinate frame and timestamp~%Header header~%Pose pose~%~%================================================================================~%MSG: geometry_msgs/Pose~%# A representation of pose in free space, composed of position and orientation. ~%Point position~%Quaternion orientation~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: geometry_msgs/Quaternion~%# This represents an orientation in free space in quaternion form.~%~%float64 x~%float64 y~%float64 z~%float64 w~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexActionResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%RobotnikMoveBaseFlexResult result~%~%================================================================================~%MSG: actionlib_msgs/GoalStatus~%GoalID goal_id~%uint8 status~%uint8 PENDING         = 0   # The goal has yet to be processed by the action server~%uint8 ACTIVE          = 1   # The goal is currently being processed by the action server~%uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing~%                            #   and has since completed its execution (Terminal State)~%uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)~%uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due~%                            #    to some failure (Terminal State)~%uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,~%                            #    because the goal was unattainable or invalid (Terminal State)~%uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing~%                            #    and has not yet completed execution~%uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,~%                            #    but the action server has not yet confirmed that the goal is canceled~%uint8 RECALLED        = 8   # The goal received a cancel request before it started executing~%                            #    and was successfully cancelled (Terminal State)~%uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be~%                            #    sent over the wire by an action server~%~%#Allow for the user to associate a string with GoalStatus for debugging~%string text~%~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%robotnik_navigation_msgs/RobotnikMoveBaseFlexResultAction result~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexResultAction~%~%# Outcome of most recent controller cycle. Same values as in MoveBase or ExePath result.~%uint32 outcome~%string message~%~%float32 dist_to_goal~%float32 angle_to_goal~%geometry_msgs/PoseStamped current_pose~%bool success~%geometry_msgs/TwistStamped last_cmd_vel  # last command calculated by the controller~%~%================================================================================~%MSG: geometry_msgs/TwistStamped~%# A twist with reference coordinate frame and timestamp~%Header header~%Twist twist~%~%================================================================================~%MSG: geometry_msgs/Twist~%# This expresses velocity in free space broken into its linear and angular parts.~%Vector3  linear~%Vector3  angular~%~%================================================================================~%MSG: geometry_msgs/Vector3~%# This represents a vector in free space. ~%# It is only meant to represent a direction. Therefore, it does not~%# make sense to apply a translation to it (e.g., when applying a ~%# generic rigid transformation to a Vector3, tf2 will only apply the~%# rotation). If you want your data to be translatable too, use the~%# geometry_msgs/Point message instead.~%~%float64 x~%float64 y~%float64 z~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexActionFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%RobotnikMoveBaseFlexFeedback feedback~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%robotnik_navigation_msgs/RobotnikMoveBaseFlexFeedbackAction feedback~%~%~%~%================================================================================~%MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexFeedbackAction~%~%# Predefined success codes:~%uint8 SUCCESS        = 0~%~%# Predefined general error codes:~%uint8 FAILURE        = 10~%uint8 CANCELED       = 11~%uint8 COLLISION      = 12~%uint8 OSCILLATION    = 13~%uint8 START_BLOCKED  = 14~%uint8 GOAL_BLOCKED   = 15~%uint8 TF_ERROR       = 16~%uint8 INTERNAL_ERROR = 17~%# 21..49 are reserved for future general error codes~%~%# Planning/controlling failures:~%uint8 PLAN_FAILURE   = 50~%# 51..99 are reserved as global planner specific errors~%~%uint8 CTRL_FAILURE   = 100~%# 101..149 are reserved as local planner specific errors~%~%uint32 outcome~%string message~%~%# Configuration upon action completion~%float32 dist_to_goal~%float32 angle_to_goal~%geometry_msgs/PoseStamped final_pose~%geometry_msgs/PoseStamped current_pose_executing~%geometry_msgs/Pose2D dist_current_target~%~%# Index of the current goal executing~%uint32 current_goal~%~%================================================================================~%MSG: geometry_msgs/Pose2D~%# Deprecated~%# Please use the full 3D pose.~%~%# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.~%~%# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.~%~%~%# This expresses a position and orientation on a 2D manifold.~%~%float64 x~%float64 y~%float64 theta~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <RobotnikMoveBaseFlexAction>))
  (cl:+ 0
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_goal))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_result))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_feedback))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <RobotnikMoveBaseFlexAction>))
  "Converts a ROS message object to a list"
  (cl:list 'RobotnikMoveBaseFlexAction
    (cl:cons ':action_goal (action_goal msg))
    (cl:cons ':action_result (action_result msg))
    (cl:cons ':action_feedback (action_feedback msg))
))
