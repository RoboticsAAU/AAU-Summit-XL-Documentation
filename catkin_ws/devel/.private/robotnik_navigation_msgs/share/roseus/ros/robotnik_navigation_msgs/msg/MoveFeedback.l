;; Auto-generated. Do not edit!


(when (boundp 'robotnik_navigation_msgs::MoveFeedback)
  (if (not (find-package "ROBOTNIK_NAVIGATION_MSGS"))
    (make-package "ROBOTNIK_NAVIGATION_MSGS"))
  (shadow 'MoveFeedback (find-package "ROBOTNIK_NAVIGATION_MSGS")))
(unless (find-package "ROBOTNIK_NAVIGATION_MSGS::MOVEFEEDBACK")
  (make-package "ROBOTNIK_NAVIGATION_MSGS::MOVEFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude MoveFeedback.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass robotnik_navigation_msgs::MoveFeedback
  :super ros::object
  :slots (_remaining _current_velocity ))

(defmethod robotnik_navigation_msgs::MoveFeedback
  (:init
   (&key
    ((:remaining __remaining) (instance geometry_msgs::Pose2D :init))
    ((:current_velocity __current_velocity) (instance geometry_msgs::Twist :init))
    )
   (send-super :init)
   (setq _remaining __remaining)
   (setq _current_velocity __current_velocity)
   self)
  (:remaining
   (&rest __remaining)
   (if (keywordp (car __remaining))
       (send* _remaining __remaining)
     (progn
       (if __remaining (setq _remaining (car __remaining)))
       _remaining)))
  (:current_velocity
   (&rest __current_velocity)
   (if (keywordp (car __current_velocity))
       (send* _current_velocity __current_velocity)
     (progn
       (if __current_velocity (setq _current_velocity (car __current_velocity)))
       _current_velocity)))
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/Pose2D _remaining
    (send _remaining :serialization-length)
    ;; geometry_msgs/Twist _current_velocity
    (send _current_velocity :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/Pose2D _remaining
       (send _remaining :serialize s)
     ;; geometry_msgs/Twist _current_velocity
       (send _current_velocity :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/Pose2D _remaining
     (send _remaining :deserialize buf ptr-) (incf ptr- (send _remaining :serialization-length))
   ;; geometry_msgs/Twist _current_velocity
     (send _current_velocity :deserialize buf ptr-) (incf ptr- (send _current_velocity :serialization-length))
   ;;
   self)
  )

(setf (get robotnik_navigation_msgs::MoveFeedback :md5sum-) "41cf076ddb6051f5e19207ef6bdcc8c2")
(setf (get robotnik_navigation_msgs::MoveFeedback :datatype-) "robotnik_navigation_msgs/MoveFeedback")
(setf (get robotnik_navigation_msgs::MoveFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# feedback
geometry_msgs/Pose2D remaining
geometry_msgs/Twist current_velocity



================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :robotnik_navigation_msgs/MoveFeedback "41cf076ddb6051f5e19207ef6bdcc8c2")


