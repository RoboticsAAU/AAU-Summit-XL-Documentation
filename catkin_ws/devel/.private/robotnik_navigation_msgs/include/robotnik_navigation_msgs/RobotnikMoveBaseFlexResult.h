// Generated by gencpp from file robotnik_navigation_msgs/RobotnikMoveBaseFlexResult.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_NAVIGATION_MSGS_MESSAGE_ROBOTNIKMOVEBASEFLEXRESULT_H
#define ROBOTNIK_NAVIGATION_MSGS_MESSAGE_ROBOTNIKMOVEBASEFLEXRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_navigation_msgs/RobotnikMoveBaseFlexResultAction.h>

namespace robotnik_navigation_msgs
{
template <class ContainerAllocator>
struct RobotnikMoveBaseFlexResult_
{
  typedef RobotnikMoveBaseFlexResult_<ContainerAllocator> Type;

  RobotnikMoveBaseFlexResult_()
    : result()  {
    }
  RobotnikMoveBaseFlexResult_(const ContainerAllocator& _alloc)
    : result(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResultAction_<ContainerAllocator>  _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> const> ConstPtr;

}; // struct RobotnikMoveBaseFlexResult_

typedef ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<std::allocator<void> > RobotnikMoveBaseFlexResult;

typedef boost::shared_ptr< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult > RobotnikMoveBaseFlexResultPtr;
typedef boost::shared_ptr< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult const> RobotnikMoveBaseFlexResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator1> & lhs, const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator1> & lhs, const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "784f766feb197537da015662e8bdd3c8";
  }

  static const char* value(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x784f766feb197537ULL;
  static const uint64_t static_value2 = 0xda015662e8bdd3c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_navigation_msgs/RobotnikMoveBaseFlexResult";
  }

  static const char* value(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"robotnik_navigation_msgs/RobotnikMoveBaseFlexResultAction result\n"
"\n"
"================================================================================\n"
"MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexResultAction\n"
"\n"
"# Outcome of most recent controller cycle. Same values as in MoveBase or ExePath result.\n"
"uint32 outcome\n"
"string message\n"
"\n"
"float32 dist_to_goal\n"
"float32 angle_to_goal\n"
"geometry_msgs/PoseStamped current_pose\n"
"bool success\n"
"geometry_msgs/TwistStamped last_cmd_vel  # last command calculated by the controller\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistStamped\n"
"# A twist with reference coordinate frame and timestamp\n"
"Header header\n"
"Twist twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotnikMoveBaseFlexResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResult_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    s << std::endl;
    Printer< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexResultAction_<ContainerAllocator> >::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_NAVIGATION_MSGS_MESSAGE_ROBOTNIKMOVEBASEFLEXRESULT_H
