// Generated by gencpp from file robotnik_navigation_msgs/RobotnikMoveBaseFlexGoalAction.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_NAVIGATION_MSGS_MESSAGE_ROBOTNIKMOVEBASEFLEXGOALACTION_H
#define ROBOTNIK_NAVIGATION_MSGS_MESSAGE_ROBOTNIKMOVEBASEFLEXGOALACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Pose.h>

namespace robotnik_navigation_msgs
{
template <class ContainerAllocator>
struct RobotnikMoveBaseFlexGoalAction_
{
  typedef RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> Type;

  RobotnikMoveBaseFlexGoalAction_()
    : goal_target_pose()
    , controller()
    , planner()
    , recovery_behaviors()
    , goal_tolerance()
    , navigation_type()
    , goal_target_type()
    , max_vel(0.0)  {
    }
  RobotnikMoveBaseFlexGoalAction_(const ContainerAllocator& _alloc)
    : goal_target_pose(_alloc)
    , controller(_alloc)
    , planner(_alloc)
    , recovery_behaviors(_alloc)
    , goal_tolerance(_alloc)
    , navigation_type(_alloc)
    , goal_target_type(_alloc)
    , max_vel(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  _goal_target_pose_type;
  _goal_target_pose_type goal_target_pose;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _controller_type;
  _controller_type controller;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _planner_type;
  _planner_type planner;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _recovery_behaviors_type;
  _recovery_behaviors_type recovery_behaviors;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _goal_tolerance_type;
  _goal_tolerance_type goal_tolerance;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _navigation_type_type;
  _navigation_type_type navigation_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _goal_target_type_type;
  _goal_target_type_type goal_target_type;

   typedef float _max_vel_type;
  _max_vel_type max_vel;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NAVIGATION_TYPE_POINT_TO_POINT)
  #undef NAVIGATION_TYPE_POINT_TO_POINT
#endif
#if defined(_WIN32) && defined(NAVIGATION_TYPE_END_POINT)
  #undef NAVIGATION_TYPE_END_POINT
#endif
#if defined(_WIN32) && defined(GOAL_TARGET_TYPE_GPS)
  #undef GOAL_TARGET_TYPE_GPS
#endif
#if defined(_WIN32) && defined(GOAL_TARGET_TYPE_CARTESIAN)
  #undef GOAL_TARGET_TYPE_CARTESIAN
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NAVIGATION_TYPE_POINT_TO_POINT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NAVIGATION_TYPE_END_POINT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  GOAL_TARGET_TYPE_GPS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  GOAL_TARGET_TYPE_CARTESIAN;

  typedef boost::shared_ptr< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> const> ConstPtr;

}; // struct RobotnikMoveBaseFlexGoalAction_

typedef ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<std::allocator<void> > RobotnikMoveBaseFlexGoalAction;

typedef boost::shared_ptr< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction > RobotnikMoveBaseFlexGoalActionPtr;
typedef boost::shared_ptr< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction const> RobotnikMoveBaseFlexGoalActionConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RobotnikMoveBaseFlexGoalAction_<ContainerAllocator>::NAVIGATION_TYPE_POINT_TO_POINT =
        
          "POINT_TO_POINT"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RobotnikMoveBaseFlexGoalAction_<ContainerAllocator>::NAVIGATION_TYPE_END_POINT =
        
          "END_POINT"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RobotnikMoveBaseFlexGoalAction_<ContainerAllocator>::GOAL_TARGET_TYPE_GPS =
        
          "GPS"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RobotnikMoveBaseFlexGoalAction_<ContainerAllocator>::GOAL_TARGET_TYPE_CARTESIAN =
        
          "CARTESIAN"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator1> & lhs, const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator2> & rhs)
{
  return lhs.goal_target_pose == rhs.goal_target_pose &&
    lhs.controller == rhs.controller &&
    lhs.planner == rhs.planner &&
    lhs.recovery_behaviors == rhs.recovery_behaviors &&
    lhs.goal_tolerance == rhs.goal_tolerance &&
    lhs.navigation_type == rhs.navigation_type &&
    lhs.goal_target_type == rhs.goal_target_type &&
    lhs.max_vel == rhs.max_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator1> & lhs, const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca45ca2f4b0324a8e695c151e7aace54";
  }

  static const char* value(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca45ca2f4b0324a8ULL;
  static const uint64_t static_value2 = 0xe695c151e7aace54ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_navigation_msgs/RobotnikMoveBaseFlexGoalAction";
  }

  static const char* value(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string NAVIGATION_TYPE_POINT_TO_POINT = POINT_TO_POINT\n"
"string NAVIGATION_TYPE_END_POINT= END_POINT\n"
"\n"
"string GOAL_TARGET_TYPE_GPS = GPS\n"
"string GOAL_TARGET_TYPE_CARTESIAN = CARTESIAN\n"
"\n"
"geometry_msgs/PoseStamped[] goal_target_pose\n"
"string[] controller\n"
"string[] planner\n"
"string[] recovery_behaviors\n"
"geometry_msgs/Pose[] goal_tolerance\n"
"string navigation_type\n"
"string goal_target_type\n"
"float32 max_vel\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_target_pose);
      stream.next(m.controller);
      stream.next(m.planner);
      stream.next(m.recovery_behaviors);
      stream.next(m.goal_tolerance);
      stream.next(m.navigation_type);
      stream.next(m.goal_target_type);
      stream.next(m.max_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotnikMoveBaseFlexGoalAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexGoalAction_<ContainerAllocator>& v)
  {
    s << indent << "goal_target_pose[]" << std::endl;
    for (size_t i = 0; i < v.goal_target_pose.size(); ++i)
    {
      s << indent << "  goal_target_pose[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.goal_target_pose[i]);
    }
    s << indent << "controller[]" << std::endl;
    for (size_t i = 0; i < v.controller.size(); ++i)
    {
      s << indent << "  controller[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.controller[i]);
    }
    s << indent << "planner[]" << std::endl;
    for (size_t i = 0; i < v.planner.size(); ++i)
    {
      s << indent << "  planner[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.planner[i]);
    }
    s << indent << "recovery_behaviors[]" << std::endl;
    for (size_t i = 0; i < v.recovery_behaviors.size(); ++i)
    {
      s << indent << "  recovery_behaviors[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.recovery_behaviors[i]);
    }
    s << indent << "goal_tolerance[]" << std::endl;
    for (size_t i = 0; i < v.goal_tolerance.size(); ++i)
    {
      s << indent << "  goal_tolerance[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.goal_tolerance[i]);
    }
    s << indent << "navigation_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.navigation_type);
    s << indent << "goal_target_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.goal_target_type);
    s << indent << "max_vel: ";
    Printer<float>::stream(s, indent + "  ", v.max_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_NAVIGATION_MSGS_MESSAGE_ROBOTNIKMOVEBASEFLEXGOALACTION_H
