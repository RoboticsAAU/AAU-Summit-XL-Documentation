// Generated by gencpp from file robotnik_navigation_msgs/RobotnikMoveBaseFlexFeedback.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_NAVIGATION_MSGS_MESSAGE_ROBOTNIKMOVEBASEFLEXFEEDBACK_H
#define ROBOTNIK_NAVIGATION_MSGS_MESSAGE_ROBOTNIKMOVEBASEFLEXFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_navigation_msgs/RobotnikMoveBaseFlexFeedbackAction.h>

namespace robotnik_navigation_msgs
{
template <class ContainerAllocator>
struct RobotnikMoveBaseFlexFeedback_
{
  typedef RobotnikMoveBaseFlexFeedback_<ContainerAllocator> Type;

  RobotnikMoveBaseFlexFeedback_()
    : feedback()  {
    }
  RobotnikMoveBaseFlexFeedback_(const ContainerAllocator& _alloc)
    : feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedbackAction_<ContainerAllocator>  _feedback_type;
  _feedback_type feedback;





  typedef boost::shared_ptr< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct RobotnikMoveBaseFlexFeedback_

typedef ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<std::allocator<void> > RobotnikMoveBaseFlexFeedback;

typedef boost::shared_ptr< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback > RobotnikMoveBaseFlexFeedbackPtr;
typedef boost::shared_ptr< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback const> RobotnikMoveBaseFlexFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator1> & lhs, const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.feedback == rhs.feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator1> & lhs, const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06ec395e39cce0050fb1f625545c856a";
  }

  static const char* value(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06ec395e39cce005ULL;
  static const uint64_t static_value2 = 0x0fb1f625545c856aULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_navigation_msgs/RobotnikMoveBaseFlexFeedback";
  }

  static const char* value(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"robotnik_navigation_msgs/RobotnikMoveBaseFlexFeedbackAction feedback\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: robotnik_navigation_msgs/RobotnikMoveBaseFlexFeedbackAction\n"
"\n"
"# Predefined success codes:\n"
"uint8 SUCCESS        = 0\n"
"\n"
"# Predefined general error codes:\n"
"uint8 FAILURE        = 10\n"
"uint8 CANCELED       = 11\n"
"uint8 COLLISION      = 12\n"
"uint8 OSCILLATION    = 13\n"
"uint8 START_BLOCKED  = 14\n"
"uint8 GOAL_BLOCKED   = 15\n"
"uint8 TF_ERROR       = 16\n"
"uint8 INTERNAL_ERROR = 17\n"
"# 21..49 are reserved for future general error codes\n"
"\n"
"# Planning/controlling failures:\n"
"uint8 PLAN_FAILURE   = 50\n"
"# 51..99 are reserved as global planner specific errors\n"
"\n"
"uint8 CTRL_FAILURE   = 100\n"
"# 101..149 are reserved as local planner specific errors\n"
"\n"
"uint32 outcome\n"
"string message\n"
"\n"
"# Configuration upon action completion\n"
"float32 dist_to_goal\n"
"float32 angle_to_goal\n"
"geometry_msgs/PoseStamped final_pose\n"
"geometry_msgs/PoseStamped current_pose_executing\n"
"geometry_msgs/Pose2D dist_current_target\n"
"\n"
"# Index of the current goal executing\n"
"uint32 current_goal\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
;
  }

  static const char* value(const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotnikMoveBaseFlexFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedback_<ContainerAllocator>& v)
  {
    s << indent << "feedback: ";
    s << std::endl;
    Printer< ::robotnik_navigation_msgs::RobotnikMoveBaseFlexFeedbackAction_<ContainerAllocator> >::stream(s, indent + "  ", v.feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_NAVIGATION_MSGS_MESSAGE_ROBOTNIKMOVEBASEFLEXFEEDBACK_H
