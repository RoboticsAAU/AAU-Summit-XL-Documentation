// Generated by gencpp from file costmap_prohibition_layer/AddProhibitedPointsRequest.msg
// DO NOT EDIT!


#ifndef COSTMAP_PROHIBITION_LAYER_MESSAGE_ADDPROHIBITEDPOINTSREQUEST_H
#define COSTMAP_PROHIBITION_LAYER_MESSAGE_ADDPROHIBITEDPOINTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>

namespace costmap_prohibition_layer
{
template <class ContainerAllocator>
struct AddProhibitedPointsRequest_
{
  typedef AddProhibitedPointsRequest_<ContainerAllocator> Type;

  AddProhibitedPointsRequest_()
    : polygons()  {
    }
  AddProhibitedPointsRequest_(const ContainerAllocator& _alloc)
    : polygons(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _polygons_type;
  _polygons_type polygons;





  typedef boost::shared_ptr< ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddProhibitedPointsRequest_

typedef ::costmap_prohibition_layer::AddProhibitedPointsRequest_<std::allocator<void> > AddProhibitedPointsRequest;

typedef boost::shared_ptr< ::costmap_prohibition_layer::AddProhibitedPointsRequest > AddProhibitedPointsRequestPtr;
typedef boost::shared_ptr< ::costmap_prohibition_layer::AddProhibitedPointsRequest const> AddProhibitedPointsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator1> & lhs, const ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.polygons == rhs.polygons;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator1> & lhs, const ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace costmap_prohibition_layer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e85019b57cf217e7d529d6333370e839";
  }

  static const char* value(const ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe85019b57cf217e7ULL;
  static const uint64_t static_value2 = 0xd529d6333370e839ULL;
};

template<class ContainerAllocator>
struct DataType< ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "costmap_prohibition_layer/AddProhibitedPointsRequest";
  }

  static const char* value(const ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Polygon polygons\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.polygons);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddProhibitedPointsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::costmap_prohibition_layer::AddProhibitedPointsRequest_<ContainerAllocator>& v)
  {
    s << indent << "polygons: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.polygons);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COSTMAP_PROHIBITION_LAYER_MESSAGE_ADDPROHIBITEDPOINTSREQUEST_H
