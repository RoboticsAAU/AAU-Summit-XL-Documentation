// Generated by gencpp from file costmap_prohibition_layer/ClearProhibitedPoints.msg
// DO NOT EDIT!


#ifndef COSTMAP_PROHIBITION_LAYER_MESSAGE_CLEARPROHIBITEDPOINTS_H
#define COSTMAP_PROHIBITION_LAYER_MESSAGE_CLEARPROHIBITEDPOINTS_H

#include <ros/service_traits.h>


#include <costmap_prohibition_layer/ClearProhibitedPointsRequest.h>
#include <costmap_prohibition_layer/ClearProhibitedPointsResponse.h>


namespace costmap_prohibition_layer
{

struct ClearProhibitedPoints
{

typedef ClearProhibitedPointsRequest Request;
typedef ClearProhibitedPointsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct ClearProhibitedPoints
} // namespace costmap_prohibition_layer


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::costmap_prohibition_layer::ClearProhibitedPoints > {
  static const char* value()
  {
    return "7d96ed730776804754140b85e64c862e";
  }

  static const char* value(const ::costmap_prohibition_layer::ClearProhibitedPoints&) { return value(); }
};

template<>
struct DataType< ::costmap_prohibition_layer::ClearProhibitedPoints > {
  static const char* value()
  {
    return "costmap_prohibition_layer/ClearProhibitedPoints";
  }

  static const char* value(const ::costmap_prohibition_layer::ClearProhibitedPoints&) { return value(); }
};


// service_traits::MD5Sum< ::costmap_prohibition_layer::ClearProhibitedPointsRequest> should match
// service_traits::MD5Sum< ::costmap_prohibition_layer::ClearProhibitedPoints >
template<>
struct MD5Sum< ::costmap_prohibition_layer::ClearProhibitedPointsRequest>
{
  static const char* value()
  {
    return MD5Sum< ::costmap_prohibition_layer::ClearProhibitedPoints >::value();
  }
  static const char* value(const ::costmap_prohibition_layer::ClearProhibitedPointsRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::costmap_prohibition_layer::ClearProhibitedPointsRequest> should match
// service_traits::DataType< ::costmap_prohibition_layer::ClearProhibitedPoints >
template<>
struct DataType< ::costmap_prohibition_layer::ClearProhibitedPointsRequest>
{
  static const char* value()
  {
    return DataType< ::costmap_prohibition_layer::ClearProhibitedPoints >::value();
  }
  static const char* value(const ::costmap_prohibition_layer::ClearProhibitedPointsRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::costmap_prohibition_layer::ClearProhibitedPointsResponse> should match
// service_traits::MD5Sum< ::costmap_prohibition_layer::ClearProhibitedPoints >
template<>
struct MD5Sum< ::costmap_prohibition_layer::ClearProhibitedPointsResponse>
{
  static const char* value()
  {
    return MD5Sum< ::costmap_prohibition_layer::ClearProhibitedPoints >::value();
  }
  static const char* value(const ::costmap_prohibition_layer::ClearProhibitedPointsResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::costmap_prohibition_layer::ClearProhibitedPointsResponse> should match
// service_traits::DataType< ::costmap_prohibition_layer::ClearProhibitedPoints >
template<>
struct DataType< ::costmap_prohibition_layer::ClearProhibitedPointsResponse>
{
  static const char* value()
  {
    return DataType< ::costmap_prohibition_layer::ClearProhibitedPoints >::value();
  }
  static const char* value(const ::costmap_prohibition_layer::ClearProhibitedPointsResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // COSTMAP_PROHIBITION_LAYER_MESSAGE_CLEARPROHIBITEDPOINTS_H
