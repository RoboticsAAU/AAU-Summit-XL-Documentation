// Generated by gencpp from file robotnik_signal_msgs/SignalStatusArray.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_SIGNAL_MSGS_MESSAGE_SIGNALSTATUSARRAY_H
#define ROBOTNIK_SIGNAL_MSGS_MESSAGE_SIGNALSTATUSARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_signal_msgs/SignalStatus.h>

namespace robotnik_signal_msgs
{
template <class ContainerAllocator>
struct SignalStatusArray_
{
  typedef SignalStatusArray_<ContainerAllocator> Type;

  SignalStatusArray_()
    : signals_status()  {
    }
  SignalStatusArray_(const ContainerAllocator& _alloc)
    : signals_status(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> >::other >  _signals_status_type;
  _signals_status_type signals_status;





  typedef boost::shared_ptr< ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> const> ConstPtr;

}; // struct SignalStatusArray_

typedef ::robotnik_signal_msgs::SignalStatusArray_<std::allocator<void> > SignalStatusArray;

typedef boost::shared_ptr< ::robotnik_signal_msgs::SignalStatusArray > SignalStatusArrayPtr;
typedef boost::shared_ptr< ::robotnik_signal_msgs::SignalStatusArray const> SignalStatusArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator1> & lhs, const ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator2> & rhs)
{
  return lhs.signals_status == rhs.signals_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator1> & lhs, const ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_signal_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81ce5948f89ed4887bfc312100eeff57";
  }

  static const char* value(const ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81ce5948f89ed488ULL;
  static const uint64_t static_value2 = 0x7bfc312100eeff57ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_signal_msgs/SignalStatusArray";
  }

  static const char* value(const ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"SignalStatus[] signals_status\n"
"================================================================================\n"
"MSG: robotnik_signal_msgs/SignalStatus\n"
"# signal_names\n"
"string SIGNAL_CHARGING=charging\n"
"string SIGNAL_SAFETY_STANDBY=safety_standby\n"
"string SIGNAL_EMERGENCY_STOP=emergency_stop\n"
"string SIGNAL_SAFETY_OBSTACLE_DETECTED=safety_obstacle_detected\n"
"string SIGNAL_LOW_BATTERY=low_battery\n"
"string SIGNAL_BASE_CONTROLLER_ERROR=base_controller_error\n"
"string SIGNAL_ARM_CONTROLLER_ERROR=arm_controller_error\n"
"string SIGNAL_SENSOR_ERROR=sensor_error\n"
"string SIGNAL_ROBOT_IDLE=robot_idle\n"
"string SIGNAL_ROBOT_MOVING=robot_moving\n"
"string SIGNAL_RAISING_ELEVATOR=raising_elevator\n"
"string SIGNAL_LOWERING_ELEVATOR=lowering_elevator\n"
"\n"
"string node_name\n"
"string[] active_signals\n"
;
  }

  static const char* value(const ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.signals_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SignalStatusArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_signal_msgs::SignalStatusArray_<ContainerAllocator>& v)
  {
    s << indent << "signals_status[]" << std::endl;
    for (size_t i = 0; i < v.signals_status.size(); ++i)
    {
      s << indent << "  signals_status[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.signals_status[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_SIGNAL_MSGS_MESSAGE_SIGNALSTATUSARRAY_H
