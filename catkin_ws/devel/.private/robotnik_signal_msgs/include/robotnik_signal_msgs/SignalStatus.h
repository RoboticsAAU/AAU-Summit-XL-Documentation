// Generated by gencpp from file robotnik_signal_msgs/SignalStatus.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_SIGNAL_MSGS_MESSAGE_SIGNALSTATUS_H
#define ROBOTNIK_SIGNAL_MSGS_MESSAGE_SIGNALSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_signal_msgs
{
template <class ContainerAllocator>
struct SignalStatus_
{
  typedef SignalStatus_<ContainerAllocator> Type;

  SignalStatus_()
    : node_name()
    , active_signals()  {
    }
  SignalStatus_(const ContainerAllocator& _alloc)
    : node_name(_alloc)
    , active_signals(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_name_type;
  _node_name_type node_name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _active_signals_type;
  _active_signals_type active_signals;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SIGNAL_CHARGING)
  #undef SIGNAL_CHARGING
#endif
#if defined(_WIN32) && defined(SIGNAL_SAFETY_STANDBY)
  #undef SIGNAL_SAFETY_STANDBY
#endif
#if defined(_WIN32) && defined(SIGNAL_EMERGENCY_STOP)
  #undef SIGNAL_EMERGENCY_STOP
#endif
#if defined(_WIN32) && defined(SIGNAL_SAFETY_OBSTACLE_DETECTED)
  #undef SIGNAL_SAFETY_OBSTACLE_DETECTED
#endif
#if defined(_WIN32) && defined(SIGNAL_LOW_BATTERY)
  #undef SIGNAL_LOW_BATTERY
#endif
#if defined(_WIN32) && defined(SIGNAL_BASE_CONTROLLER_ERROR)
  #undef SIGNAL_BASE_CONTROLLER_ERROR
#endif
#if defined(_WIN32) && defined(SIGNAL_ARM_CONTROLLER_ERROR)
  #undef SIGNAL_ARM_CONTROLLER_ERROR
#endif
#if defined(_WIN32) && defined(SIGNAL_SENSOR_ERROR)
  #undef SIGNAL_SENSOR_ERROR
#endif
#if defined(_WIN32) && defined(SIGNAL_ROBOT_IDLE)
  #undef SIGNAL_ROBOT_IDLE
#endif
#if defined(_WIN32) && defined(SIGNAL_ROBOT_MOVING)
  #undef SIGNAL_ROBOT_MOVING
#endif
#if defined(_WIN32) && defined(SIGNAL_RAISING_ELEVATOR)
  #undef SIGNAL_RAISING_ELEVATOR
#endif
#if defined(_WIN32) && defined(SIGNAL_LOWERING_ELEVATOR)
  #undef SIGNAL_LOWERING_ELEVATOR
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SIGNAL_CHARGING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SIGNAL_SAFETY_STANDBY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SIGNAL_EMERGENCY_STOP;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SIGNAL_SAFETY_OBSTACLE_DETECTED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SIGNAL_LOW_BATTERY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SIGNAL_BASE_CONTROLLER_ERROR;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SIGNAL_ARM_CONTROLLER_ERROR;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SIGNAL_SENSOR_ERROR;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SIGNAL_ROBOT_IDLE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SIGNAL_ROBOT_MOVING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SIGNAL_RAISING_ELEVATOR;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SIGNAL_LOWERING_ELEVATOR;

  typedef boost::shared_ptr< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SignalStatus_

typedef ::robotnik_signal_msgs::SignalStatus_<std::allocator<void> > SignalStatus;

typedef boost::shared_ptr< ::robotnik_signal_msgs::SignalStatus > SignalStatusPtr;
typedef boost::shared_ptr< ::robotnik_signal_msgs::SignalStatus const> SignalStatusConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SignalStatus_<ContainerAllocator>::SIGNAL_CHARGING =
        
          "charging"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SignalStatus_<ContainerAllocator>::SIGNAL_SAFETY_STANDBY =
        
          "safety_standby"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SignalStatus_<ContainerAllocator>::SIGNAL_EMERGENCY_STOP =
        
          "emergency_stop"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SignalStatus_<ContainerAllocator>::SIGNAL_SAFETY_OBSTACLE_DETECTED =
        
          "safety_obstacle_detected"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SignalStatus_<ContainerAllocator>::SIGNAL_LOW_BATTERY =
        
          "low_battery"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SignalStatus_<ContainerAllocator>::SIGNAL_BASE_CONTROLLER_ERROR =
        
          "base_controller_error"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SignalStatus_<ContainerAllocator>::SIGNAL_ARM_CONTROLLER_ERROR =
        
          "arm_controller_error"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SignalStatus_<ContainerAllocator>::SIGNAL_SENSOR_ERROR =
        
          "sensor_error"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SignalStatus_<ContainerAllocator>::SIGNAL_ROBOT_IDLE =
        
          "robot_idle"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SignalStatus_<ContainerAllocator>::SIGNAL_ROBOT_MOVING =
        
          "robot_moving"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SignalStatus_<ContainerAllocator>::SIGNAL_RAISING_ELEVATOR =
        
          "raising_elevator"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SignalStatus_<ContainerAllocator>::SIGNAL_LOWERING_ELEVATOR =
        
          "lowering_elevator"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator1> & lhs, const ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator2> & rhs)
{
  return lhs.node_name == rhs.node_name &&
    lhs.active_signals == rhs.active_signals;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator1> & lhs, const ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_signal_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2253a41510a77ba43532efb9d5ddd8ef";
  }

  static const char* value(const ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2253a41510a77ba4ULL;
  static const uint64_t static_value2 = 0x3532efb9d5ddd8efULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_signal_msgs/SignalStatus";
  }

  static const char* value(const ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# signal_names\n"
"string SIGNAL_CHARGING=charging\n"
"string SIGNAL_SAFETY_STANDBY=safety_standby\n"
"string SIGNAL_EMERGENCY_STOP=emergency_stop\n"
"string SIGNAL_SAFETY_OBSTACLE_DETECTED=safety_obstacle_detected\n"
"string SIGNAL_LOW_BATTERY=low_battery\n"
"string SIGNAL_BASE_CONTROLLER_ERROR=base_controller_error\n"
"string SIGNAL_ARM_CONTROLLER_ERROR=arm_controller_error\n"
"string SIGNAL_SENSOR_ERROR=sensor_error\n"
"string SIGNAL_ROBOT_IDLE=robot_idle\n"
"string SIGNAL_ROBOT_MOVING=robot_moving\n"
"string SIGNAL_RAISING_ELEVATOR=raising_elevator\n"
"string SIGNAL_LOWERING_ELEVATOR=lowering_elevator\n"
"\n"
"string node_name\n"
"string[] active_signals\n"
;
  }

  static const char* value(const ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node_name);
      stream.next(m.active_signals);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SignalStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_signal_msgs::SignalStatus_<ContainerAllocator>& v)
  {
    s << indent << "node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node_name);
    s << indent << "active_signals[]" << std::endl;
    for (size_t i = 0; i < v.active_signals.size(); ++i)
    {
      s << indent << "  active_signals[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.active_signals[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_SIGNAL_MSGS_MESSAGE_SIGNALSTATUS_H
