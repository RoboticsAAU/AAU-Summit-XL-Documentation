// Generated by gencpp from file robotnik_rms_msgs/missionManagerRequest.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_RMS_MSGS_MESSAGE_MISSIONMANAGERREQUEST_H
#define ROBOTNIK_RMS_MSGS_MESSAGE_MISSIONMANAGERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_rms_msgs/mission.h>

namespace robotnik_rms_msgs
{
template <class ContainerAllocator>
struct missionManagerRequest_
{
  typedef missionManagerRequest_<ContainerAllocator> Type;

  missionManagerRequest_()
    : mission()  {
    }
  missionManagerRequest_(const ContainerAllocator& _alloc)
    : mission(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robotnik_rms_msgs::mission_<ContainerAllocator>  _mission_type;
  _mission_type mission;





  typedef boost::shared_ptr< ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct missionManagerRequest_

typedef ::robotnik_rms_msgs::missionManagerRequest_<std::allocator<void> > missionManagerRequest;

typedef boost::shared_ptr< ::robotnik_rms_msgs::missionManagerRequest > missionManagerRequestPtr;
typedef boost::shared_ptr< ::robotnik_rms_msgs::missionManagerRequest const> missionManagerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator1> & lhs, const ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mission == rhs.mission;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator1> & lhs, const ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_rms_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "633c22ceb2678fe5f5b80bfd64bfc6cf";
  }

  static const char* value(const ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x633c22ceb2678fe5ULL;
  static const uint64_t static_value2 = 0xf5b80bfd64bfc6cfULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_rms_msgs/missionManagerRequest";
  }

  static const char* value(const ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_rms_msgs/mission mission\n"
"\n"
"================================================================================\n"
"MSG: robotnik_rms_msgs/mission\n"
"string name_mission\n"
"int32 id_mission\n"
"string description\n"
"robotnik_rms_msgs/action[] actions\n"
"\n"
"================================================================================\n"
"MSG: robotnik_rms_msgs/action\n"
"\n"
"int32 type_action\n"
"string id_action\n"
"string name_action\n"
"string description\n"
;
  }

  static const char* value(const ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mission);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct missionManagerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_rms_msgs::missionManagerRequest_<ContainerAllocator>& v)
  {
    s << indent << "mission: ";
    s << std::endl;
    Printer< ::robotnik_rms_msgs::mission_<ContainerAllocator> >::stream(s, indent + "  ", v.mission);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_RMS_MSGS_MESSAGE_MISSIONMANAGERREQUEST_H
