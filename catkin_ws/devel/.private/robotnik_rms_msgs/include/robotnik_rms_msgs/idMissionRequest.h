// Generated by gencpp from file robotnik_rms_msgs/idMissionRequest.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_RMS_MSGS_MESSAGE_IDMISSIONREQUEST_H
#define ROBOTNIK_RMS_MSGS_MESSAGE_IDMISSIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_rms_msgs
{
template <class ContainerAllocator>
struct idMissionRequest_
{
  typedef idMissionRequest_<ContainerAllocator> Type;

  idMissionRequest_()
    : id_mission(0)  {
    }
  idMissionRequest_(const ContainerAllocator& _alloc)
    : id_mission(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_mission_type;
  _id_mission_type id_mission;





  typedef boost::shared_ptr< ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct idMissionRequest_

typedef ::robotnik_rms_msgs::idMissionRequest_<std::allocator<void> > idMissionRequest;

typedef boost::shared_ptr< ::robotnik_rms_msgs::idMissionRequest > idMissionRequestPtr;
typedef boost::shared_ptr< ::robotnik_rms_msgs::idMissionRequest const> idMissionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator1> & lhs, const ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id_mission == rhs.id_mission;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator1> & lhs, const ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_rms_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d577f3d45674c6b3fb707f79c8027fba";
  }

  static const char* value(const ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd577f3d45674c6b3ULL;
  static const uint64_t static_value2 = 0xfb707f79c8027fbaULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_rms_msgs/idMissionRequest";
  }

  static const char* value(const ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id_mission\n"
;
  }

  static const char* value(const ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id_mission);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct idMissionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_rms_msgs::idMissionRequest_<ContainerAllocator>& v)
  {
    s << indent << "id_mission: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id_mission);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_RMS_MSGS_MESSAGE_IDMISSIONREQUEST_H
