// Generated by gencpp from file robotnik_rms_msgs/action.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_RMS_MSGS_MESSAGE_ACTION_H
#define ROBOTNIK_RMS_MSGS_MESSAGE_ACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_rms_msgs
{
template <class ContainerAllocator>
struct action_
{
  typedef action_<ContainerAllocator> Type;

  action_()
    : type_action(0)
    , id_action()
    , name_action()
    , description()  {
    }
  action_(const ContainerAllocator& _alloc)
    : type_action(0)
    , id_action(_alloc)
    , name_action(_alloc)
    , description(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _type_action_type;
  _type_action_type type_action;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_action_type;
  _id_action_type id_action;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_action_type;
  _name_action_type name_action;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;





  typedef boost::shared_ptr< ::robotnik_rms_msgs::action_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_rms_msgs::action_<ContainerAllocator> const> ConstPtr;

}; // struct action_

typedef ::robotnik_rms_msgs::action_<std::allocator<void> > action;

typedef boost::shared_ptr< ::robotnik_rms_msgs::action > actionPtr;
typedef boost::shared_ptr< ::robotnik_rms_msgs::action const> actionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_rms_msgs::action_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_rms_msgs::action_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_rms_msgs::action_<ContainerAllocator1> & lhs, const ::robotnik_rms_msgs::action_<ContainerAllocator2> & rhs)
{
  return lhs.type_action == rhs.type_action &&
    lhs.id_action == rhs.id_action &&
    lhs.name_action == rhs.name_action &&
    lhs.description == rhs.description;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_rms_msgs::action_<ContainerAllocator1> & lhs, const ::robotnik_rms_msgs::action_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_rms_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_rms_msgs::action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_rms_msgs::action_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_rms_msgs::action_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_rms_msgs::action_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_rms_msgs::action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_rms_msgs::action_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_rms_msgs::action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f34f90c37eb15fa05a08b918922af021";
  }

  static const char* value(const ::robotnik_rms_msgs::action_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf34f90c37eb15fa0ULL;
  static const uint64_t static_value2 = 0x5a08b918922af021ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_rms_msgs::action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_rms_msgs/action";
  }

  static const char* value(const ::robotnik_rms_msgs::action_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_rms_msgs::action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int32 type_action\n"
"string id_action\n"
"string name_action\n"
"string description\n"
;
  }

  static const char* value(const ::robotnik_rms_msgs::action_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_rms_msgs::action_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type_action);
      stream.next(m.id_action);
      stream.next(m.name_action);
      stream.next(m.description);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct action_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_rms_msgs::action_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_rms_msgs::action_<ContainerAllocator>& v)
  {
    s << indent << "type_action: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type_action);
    s << indent << "id_action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id_action);
    s << indent << "name_action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name_action);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_RMS_MSGS_MESSAGE_ACTION_H
