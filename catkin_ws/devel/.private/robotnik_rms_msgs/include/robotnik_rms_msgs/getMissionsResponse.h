// Generated by gencpp from file robotnik_rms_msgs/getMissionsResponse.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_RMS_MSGS_MESSAGE_GETMISSIONSRESPONSE_H
#define ROBOTNIK_RMS_MSGS_MESSAGE_GETMISSIONSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_rms_msgs/mission.h>

namespace robotnik_rms_msgs
{
template <class ContainerAllocator>
struct getMissionsResponse_
{
  typedef getMissionsResponse_<ContainerAllocator> Type;

  getMissionsResponse_()
    : missions()
    , success(false)
    , message()  {
    }
  getMissionsResponse_(const ContainerAllocator& _alloc)
    : missions(_alloc)
    , success(false)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::robotnik_rms_msgs::mission_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robotnik_rms_msgs::mission_<ContainerAllocator> >::other >  _missions_type;
  _missions_type missions;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct getMissionsResponse_

typedef ::robotnik_rms_msgs::getMissionsResponse_<std::allocator<void> > getMissionsResponse;

typedef boost::shared_ptr< ::robotnik_rms_msgs::getMissionsResponse > getMissionsResponsePtr;
typedef boost::shared_ptr< ::robotnik_rms_msgs::getMissionsResponse const> getMissionsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator1> & lhs, const ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.missions == rhs.missions &&
    lhs.success == rhs.success &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator1> & lhs, const ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_rms_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b76c60d5e61505e4ed284f030715b867";
  }

  static const char* value(const ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb76c60d5e61505e4ULL;
  static const uint64_t static_value2 = 0xed284f030715b867ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_rms_msgs/getMissionsResponse";
  }

  static const char* value(const ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_rms_msgs/mission[] missions\n"
"bool success\n"
"string message\n"
"\n"
"================================================================================\n"
"MSG: robotnik_rms_msgs/mission\n"
"string name_mission\n"
"int32 id_mission\n"
"string description\n"
"robotnik_rms_msgs/action[] actions\n"
"\n"
"================================================================================\n"
"MSG: robotnik_rms_msgs/action\n"
"\n"
"int32 type_action\n"
"string id_action\n"
"string name_action\n"
"string description\n"
;
  }

  static const char* value(const ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.missions);
      stream.next(m.success);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct getMissionsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_rms_msgs::getMissionsResponse_<ContainerAllocator>& v)
  {
    s << indent << "missions[]" << std::endl;
    for (size_t i = 0; i < v.missions.size(); ++i)
    {
      s << indent << "  missions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robotnik_rms_msgs::mission_<ContainerAllocator> >::stream(s, indent + "    ", v.missions[i]);
    }
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_RMS_MSGS_MESSAGE_GETMISSIONSRESPONSE_H
