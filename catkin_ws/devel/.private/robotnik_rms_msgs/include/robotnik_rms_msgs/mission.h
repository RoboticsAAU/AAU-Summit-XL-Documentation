// Generated by gencpp from file robotnik_rms_msgs/mission.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_RMS_MSGS_MESSAGE_MISSION_H
#define ROBOTNIK_RMS_MSGS_MESSAGE_MISSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_rms_msgs/action.h>

namespace robotnik_rms_msgs
{
template <class ContainerAllocator>
struct mission_
{
  typedef mission_<ContainerAllocator> Type;

  mission_()
    : name_mission()
    , id_mission(0)
    , description()
    , actions()  {
    }
  mission_(const ContainerAllocator& _alloc)
    : name_mission(_alloc)
    , id_mission(0)
    , description(_alloc)
    , actions(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_mission_type;
  _name_mission_type name_mission;

   typedef int32_t _id_mission_type;
  _id_mission_type id_mission;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef std::vector< ::robotnik_rms_msgs::action_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robotnik_rms_msgs::action_<ContainerAllocator> >::other >  _actions_type;
  _actions_type actions;





  typedef boost::shared_ptr< ::robotnik_rms_msgs::mission_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_rms_msgs::mission_<ContainerAllocator> const> ConstPtr;

}; // struct mission_

typedef ::robotnik_rms_msgs::mission_<std::allocator<void> > mission;

typedef boost::shared_ptr< ::robotnik_rms_msgs::mission > missionPtr;
typedef boost::shared_ptr< ::robotnik_rms_msgs::mission const> missionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_rms_msgs::mission_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_rms_msgs::mission_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_rms_msgs::mission_<ContainerAllocator1> & lhs, const ::robotnik_rms_msgs::mission_<ContainerAllocator2> & rhs)
{
  return lhs.name_mission == rhs.name_mission &&
    lhs.id_mission == rhs.id_mission &&
    lhs.description == rhs.description &&
    lhs.actions == rhs.actions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_rms_msgs::mission_<ContainerAllocator1> & lhs, const ::robotnik_rms_msgs::mission_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_rms_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_rms_msgs::mission_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_rms_msgs::mission_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_rms_msgs::mission_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_rms_msgs::mission_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_rms_msgs::mission_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_rms_msgs::mission_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_rms_msgs::mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78cd14bad56ac69e0a4b2c9b5cf0cce1";
  }

  static const char* value(const ::robotnik_rms_msgs::mission_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78cd14bad56ac69eULL;
  static const uint64_t static_value2 = 0x0a4b2c9b5cf0cce1ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_rms_msgs::mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_rms_msgs/mission";
  }

  static const char* value(const ::robotnik_rms_msgs::mission_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_rms_msgs::mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name_mission\n"
"int32 id_mission\n"
"string description\n"
"robotnik_rms_msgs/action[] actions\n"
"\n"
"================================================================================\n"
"MSG: robotnik_rms_msgs/action\n"
"\n"
"int32 type_action\n"
"string id_action\n"
"string name_action\n"
"string description\n"
;
  }

  static const char* value(const ::robotnik_rms_msgs::mission_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_rms_msgs::mission_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name_mission);
      stream.next(m.id_mission);
      stream.next(m.description);
      stream.next(m.actions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mission_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_rms_msgs::mission_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_rms_msgs::mission_<ContainerAllocator>& v)
  {
    s << indent << "name_mission: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name_mission);
    s << indent << "id_mission: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id_mission);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "actions[]" << std::endl;
    for (size_t i = 0; i < v.actions.size(); ++i)
    {
      s << indent << "  actions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robotnik_rms_msgs::action_<ContainerAllocator> >::stream(s, indent + "    ", v.actions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_RMS_MSGS_MESSAGE_MISSION_H
