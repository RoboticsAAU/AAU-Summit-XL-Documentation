// Generated by gencpp from file poi_manager_msgs/PoiState.msg
// DO NOT EDIT!


#ifndef POI_MANAGER_MSGS_MESSAGE_POISTATE_H
#define POI_MANAGER_MSGS_MESSAGE_POISTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_msgs/State.h>

namespace poi_manager_msgs
{
template <class ContainerAllocator>
struct PoiState_
{
  typedef PoiState_<ContainerAllocator> Type;

  PoiState_()
    : state()
    , action()  {
    }
  PoiState_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , action(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robotnik_msgs::State_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(IDLE)
  #undef IDLE
#endif
#if defined(_WIN32) && defined(GOTO)
  #undef GOTO
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  IDLE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  GOTO;

  typedef boost::shared_ptr< ::poi_manager_msgs::PoiState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::poi_manager_msgs::PoiState_<ContainerAllocator> const> ConstPtr;

}; // struct PoiState_

typedef ::poi_manager_msgs::PoiState_<std::allocator<void> > PoiState;

typedef boost::shared_ptr< ::poi_manager_msgs::PoiState > PoiStatePtr;
typedef boost::shared_ptr< ::poi_manager_msgs::PoiState const> PoiStateConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      PoiState_<ContainerAllocator>::IDLE =
        
          "idle"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      PoiState_<ContainerAllocator>::GOTO =
        
          "goto"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::poi_manager_msgs::PoiState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::poi_manager_msgs::PoiState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::poi_manager_msgs::PoiState_<ContainerAllocator1> & lhs, const ::poi_manager_msgs::PoiState_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.action == rhs.action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::poi_manager_msgs::PoiState_<ContainerAllocator1> & lhs, const ::poi_manager_msgs::PoiState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace poi_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::poi_manager_msgs::PoiState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::poi_manager_msgs::PoiState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poi_manager_msgs::PoiState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poi_manager_msgs::PoiState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poi_manager_msgs::PoiState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poi_manager_msgs::PoiState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::poi_manager_msgs::PoiState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "101b52bedf2e3b0a4131fc9efb64a91c";
  }

  static const char* value(const ::poi_manager_msgs::PoiState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x101b52bedf2e3b0aULL;
  static const uint64_t static_value2 = 0x4131fc9efb64a91cULL;
};

template<class ContainerAllocator>
struct DataType< ::poi_manager_msgs::PoiState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "poi_manager_msgs/PoiState";
  }

  static const char* value(const ::poi_manager_msgs::PoiState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::poi_manager_msgs::PoiState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string IDLE=idle\n"
"string GOTO=goto\n"
"\n"
"robotnik_msgs/State state\n"
"string action\n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/State\n"
"# constants\n"
"int32 INIT_STATE = 100\n"
"int32 STANDBY_STATE = 200\n"
"int32 READY_STATE = 300\n"
"int32 EMERGENCY_STATE = 400\n"
"int32 FAILURE_STATE = 500\n"
"int32 SHUTDOWN_STATE = 600\n"
"int32 UNKOWN_STATE = 700\n"
"\n"
"# state of the component\n"
"int32 state\n"
"# desired control loop frecuency\n"
"float32 desired_freq\n"
"# real frecuency \n"
"float32 real_freq\n"
"# Description of the state\n"
"string state_description\n"
;
  }

  static const char* value(const ::poi_manager_msgs::PoiState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::poi_manager_msgs::PoiState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoiState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::poi_manager_msgs::PoiState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::poi_manager_msgs::PoiState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    s << std::endl;
    Printer< ::robotnik_msgs::State_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POI_MANAGER_MSGS_MESSAGE_POISTATE_H
