// Generated by gencpp from file poi_manager_msgs/GetEnvironmentsResponse.msg
// DO NOT EDIT!


#ifndef POI_MANAGER_MSGS_MESSAGE_GETENVIRONMENTSRESPONSE_H
#define POI_MANAGER_MSGS_MESSAGE_GETENVIRONMENTSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace poi_manager_msgs
{
template <class ContainerAllocator>
struct GetEnvironmentsResponse_
{
  typedef GetEnvironmentsResponse_<ContainerAllocator> Type;

  GetEnvironmentsResponse_()
    : environments()  {
    }
  GetEnvironmentsResponse_(const ContainerAllocator& _alloc)
    : environments(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _environments_type;
  _environments_type environments;





  typedef boost::shared_ptr< ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetEnvironmentsResponse_

typedef ::poi_manager_msgs::GetEnvironmentsResponse_<std::allocator<void> > GetEnvironmentsResponse;

typedef boost::shared_ptr< ::poi_manager_msgs::GetEnvironmentsResponse > GetEnvironmentsResponsePtr;
typedef boost::shared_ptr< ::poi_manager_msgs::GetEnvironmentsResponse const> GetEnvironmentsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator1> & lhs, const ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.environments == rhs.environments;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator1> & lhs, const ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace poi_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a31ffa69fc51dd8da4b6db62e868d0c";
  }

  static const char* value(const ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a31ffa69fc51dd8ULL;
  static const uint64_t static_value2 = 0xda4b6db62e868d0cULL;
};

template<class ContainerAllocator>
struct DataType< ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "poi_manager_msgs/GetEnvironmentsResponse";
  }

  static const char* value(const ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] environments\n"
;
  }

  static const char* value(const ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.environments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetEnvironmentsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::poi_manager_msgs::GetEnvironmentsResponse_<ContainerAllocator>& v)
  {
    s << indent << "environments[]" << std::endl;
    for (size_t i = 0; i < v.environments.size(); ++i)
    {
      s << indent << "  environments[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.environments[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POI_MANAGER_MSGS_MESSAGE_GETENVIRONMENTSRESPONSE_H
