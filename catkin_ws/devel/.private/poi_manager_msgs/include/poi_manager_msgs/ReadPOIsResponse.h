// Generated by gencpp from file poi_manager_msgs/ReadPOIsResponse.msg
// DO NOT EDIT!


#ifndef POI_MANAGER_MSGS_MESSAGE_READPOISRESPONSE_H
#define POI_MANAGER_MSGS_MESSAGE_READPOISRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <poi_manager_msgs/LabeledPose.h>

namespace poi_manager_msgs
{
template <class ContainerAllocator>
struct ReadPOIsResponse_
{
  typedef ReadPOIsResponse_<ContainerAllocator> Type;

  ReadPOIsResponse_()
    : success(false)
    , message()
    , pose_list()  {
    }
  ReadPOIsResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , message(_alloc)
    , pose_list(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef std::vector< ::poi_manager_msgs::LabeledPose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::poi_manager_msgs::LabeledPose_<ContainerAllocator> >::other >  _pose_list_type;
  _pose_list_type pose_list;





  typedef boost::shared_ptr< ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ReadPOIsResponse_

typedef ::poi_manager_msgs::ReadPOIsResponse_<std::allocator<void> > ReadPOIsResponse;

typedef boost::shared_ptr< ::poi_manager_msgs::ReadPOIsResponse > ReadPOIsResponsePtr;
typedef boost::shared_ptr< ::poi_manager_msgs::ReadPOIsResponse const> ReadPOIsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator1> & lhs, const ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.message == rhs.message &&
    lhs.pose_list == rhs.pose_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator1> & lhs, const ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace poi_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f27a9f2acb83bf336ee2be2f5c17fa51";
  }

  static const char* value(const ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf27a9f2acb83bf33ULL;
  static const uint64_t static_value2 = 0x6ee2be2f5c17fa51ULL;
};

template<class ContainerAllocator>
struct DataType< ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "poi_manager_msgs/ReadPOIsResponse";
  }

  static const char* value(const ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"string message\n"
"poi_manager_msgs/LabeledPose[] pose_list\n"
"\n"
"\n"
"================================================================================\n"
"MSG: poi_manager_msgs/LabeledPose\n"
"string name\n"
"string environment\n"
"string params\n"
"string frame_id\n"
"geometry_msgs/Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.message);
      stream.next(m.pose_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReadPOIsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::poi_manager_msgs::ReadPOIsResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "pose_list[]" << std::endl;
    for (size_t i = 0; i < v.pose_list.size(); ++i)
    {
      s << indent << "  pose_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::poi_manager_msgs::LabeledPose_<ContainerAllocator> >::stream(s, indent + "    ", v.pose_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POI_MANAGER_MSGS_MESSAGE_READPOISRESPONSE_H
