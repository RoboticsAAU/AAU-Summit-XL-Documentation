// Generated by gencpp from file poi_manager_msgs/AddPOI_paramsRequest.msg
// DO NOT EDIT!


#ifndef POI_MANAGER_MSGS_MESSAGE_ADDPOI_PARAMSREQUEST_H
#define POI_MANAGER_MSGS_MESSAGE_ADDPOI_PARAMSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace poi_manager_msgs
{
template <class ContainerAllocator>
struct AddPOI_paramsRequest_
{
  typedef AddPOI_paramsRequest_<ContainerAllocator> Type;

  AddPOI_paramsRequest_()
    : name()
    , environment()
    , frame_id()
    , params()
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
    }
  AddPOI_paramsRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , environment(_alloc)
    , frame_id(_alloc)
    , params(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _environment_type;
  _environment_type environment;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _params_type;
  _params_type params;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddPOI_paramsRequest_

typedef ::poi_manager_msgs::AddPOI_paramsRequest_<std::allocator<void> > AddPOI_paramsRequest;

typedef boost::shared_ptr< ::poi_manager_msgs::AddPOI_paramsRequest > AddPOI_paramsRequestPtr;
typedef boost::shared_ptr< ::poi_manager_msgs::AddPOI_paramsRequest const> AddPOI_paramsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator1> & lhs, const ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.environment == rhs.environment &&
    lhs.frame_id == rhs.frame_id &&
    lhs.params == rhs.params &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator1> & lhs, const ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace poi_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70ba34f8566fa4f88bb9afaa01efe40a";
  }

  static const char* value(const ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70ba34f8566fa4f8ULL;
  static const uint64_t static_value2 = 0x8bb9afaa01efe40aULL;
};

template<class ContainerAllocator>
struct DataType< ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "poi_manager_msgs/AddPOI_paramsRequest";
  }

  static const char* value(const ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string environment\n"
"string frame_id\n"
"string params\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
;
  }

  static const char* value(const ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.environment);
      stream.next(m.frame_id);
      stream.next(m.params);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddPOI_paramsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::poi_manager_msgs::AddPOI_paramsRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "environment: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.environment);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "params: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.params);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POI_MANAGER_MSGS_MESSAGE_ADDPOI_PARAMSREQUEST_H
