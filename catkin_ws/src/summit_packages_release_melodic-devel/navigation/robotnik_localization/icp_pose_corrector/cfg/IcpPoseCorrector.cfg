#!/usr/bin/env python

from math import pi as PI
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("minimum_coincidences", int_t, 0, "Minimum number of coincidences to accept registration", 5, 5, 100)
gen.add("minimum_area_covered", double_t, 0, "Minimum area covered to accept registration", 100, 0.0, 1000) 
gen.add("obstacle_value", int_t, 0, "Value at which obstacles are represented in the recevied map", 100, 0, 255)
gen.add("outer_iterations", int_t, 0, "Iterations of recursive execution", 5,  1, 10)
gen.add("inner_iterations", int_t, 0, "Iterations for each registration execution", 250,  100, 1000)
gen.add("max_allowed_distance_correction", double_t, 0, "Maximum distance correction, if it is more, it will discard the correction", .4, 0.0, 10.0)
gen.add("max_allowed_angular_correction", double_t, 0, "Maximum angular correction, if it is more, it will discard the correction", .4, 0.0, 10.0)
gen.add("inflation_distance", double_t, 0, "Distance arround map points where scan match points will be used to correct the pose", 0.15, 0.0, 0.5)
gen.add("update_min_d", double_t, 0, "Euclidean distance before performing a pose registration", 0.1, 0.0, 5)  # name taken from AMCL, to maintain cohesion
gen.add("update_min_a", double_t, 0, "Angular distance before performing a pose registration", 0.1, 0.0, 2*PI) # name taken from AMCL, to maintain cohesion
gen.add("enabled", bool_t, 0, "Wether to apply corrections or not",  True)

exit(gen.generate("icp_pose_corrector", "icp_pose_corrector_node", "IcpPoseCorrector"))
